import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-CIlhU4_A.js";const e={};function h(l,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="java基础" tabindex="-1"><a class="header-anchor" href="#java基础"><span>Java基础</span></a></h1><h2 id="java语言" tabindex="-1"><a class="header-anchor" href="#java语言"><span>Java语言</span></a></h2><h3 id="java的特点" tabindex="-1"><a class="header-anchor" href="#java的特点"><span>Java的特点</span></a></h3><p>首先，<strong>平台无关性强</strong>。Java 程序编译后生成字节码，可以在任何安装了 Java 虚拟机（JVM）的平台上运行，实现了“<strong>一次编写，处处运行</strong>”的跨平台能力。</p><p>其次，Java 是<strong>面向对象的语言</strong>，支持封装、继承、多态，有利于代码复用和模块化管理，提升系统的可维护性。</p><p>第三，Java 拥有<strong>丰富的类库和强大的生态系统</strong>，涵盖网络编程、多线程、数据库访问、分布式开发等各个领域，适合构建各类企业级应用。</p><p>此外，Java 具备<strong>自动内存管理和垃圾回收机制</strong>，降低了内存泄漏和指针错误的风险，提升了程序的稳定性和安全性。</p><p>最后，Java 支持<strong>多线程编程</strong>，并发能力强，特别适用于高并发、高可靠性的服务端开发。</p><hr><h3 id="java的劣势" tabindex="-1"><a class="header-anchor" href="#java的劣势"><span>Java的劣势</span></a></h3><p><strong>首先，Java的内存占用较高，JVM启动时间较长</strong>。由于JVM的运行时开销和对象模型设计，Java程序通常消耗更多内存；并且由于类加载和JIT预热过程，JVM的启动时间较长，这使得Java不太适合短生命周期的任务。（因资源限制，Java不适合嵌入式系统）</p><p><strong>其次，Java的语法设计存在一定的局限性</strong>。例如需要手动编写Getter/Setter、匿名内部类等样板代码。同时，Java对函数式编程的支持较弱，模式匹配、值类型等特性直到较新版本才逐步引入，导致在某些场景下开发效率不如其他语言。</p><p><strong>第三，Java在实时性和底层控制方面存在不足。</strong> Java 的 GC（垃圾回收）会在系统运行时自动触发，会暂停所有线程，这就可能导致关键任务延迟执行。另外Java无法直接操作内存，能直接操作硬件寄存器、中断等底层资源，这使得它不适合开发操作系统、驱动程序等需要精细内存管理的底层软件。</p><p>当然，这些劣势需要结合具体场景评估。例如，对于高吞吐分布式系统，Java的GC劣势可能被其成熟的并发库和监控工具所抵消。</p><hr><h3 id="解释与编译并存" tabindex="-1"><a class="header-anchor" href="#解释与编译并存"><span>解释与编译并存</span></a></h3><p>Java 程序<strong>先编译成字节码（编译）</strong>，运行时再由 JVM <strong>解释执行或 JIT 编译执行（解释+编译）</strong>，同时具备解释型语言和编译型语言的特性。</p><p>从<strong>设计</strong>上讲：</p><p>1，<strong>字节码</strong>使得 Java 程序能跨平台，不同平台只需要实现自己的 JVM，就可以运行相同的字节码。</p><p>2，<strong>解释执行</strong>让程序可以快速启动，不需要等待全部编译完。</p><p>3，<strong>JIT 编译</strong>让热点代码运行时能更高效，避免纯解释执行的性能瓶颈。</p><hr><p><strong>编译型语言和解释型语言的区别</strong></p><p><strong>编译型语言</strong>：在程序执行之前，整个源代码会被编译成机器码或者字节码，生成可执行文件。执行时直接运行编译后的代码，速度快，但跨平台性较差。</p><p><strong>解释型语言</strong>：在程序执行时，逐行解释执行源代码，不生成独立的可执行文件。通常由解释器动态解释并执行代码，跨平台性好，但执行速度相对较慢。</p><p>典型的编译型语言如C、C++，典型的解释型语言如Python、JavaScript。</p><hr><h3 id="为什么跨平台" tabindex="-1"><a class="header-anchor" href="#为什么跨平台"><span>为什么跨平台</span></a></h3><p><strong>Java的跨平台能力主要基于JVM（Java虚拟机）和&quot;一次编写，到处运行&quot;的设计理念</strong></p><p>1，Java编译器把程序编译成.class<strong>字节码</strong>文件，这种字节码是平台无关的中间表示，相当于在源代码和机器指令之间增加了一个抽象层。</p><p>2，<strong>每个操作系统平台都有对应的JVM实现</strong>。JVM负责将统一的字节码JIT编译或解释执行为当前系统的本地机器指令。</p><p>3，Java通过严格规范确保<strong>所有JVM实现遵循相同的行为标准</strong>，包括统一的内存模型、一致的类加载机制、标准的核心类库。</p><hr><h3 id="jvm、jdk、jre" tabindex="-1"><a class="header-anchor" href="#jvm、jdk、jre"><span>JVM、JDK、JRE</span></a></h3><p>1、<strong>JVM</strong>是<strong>Java虚拟机</strong>，是Java程序运行的环境。它负责将Java字节码（由Java编译器生成）解释或编译成机器码，并执行程序。JVM提供了内存管理、垃圾回收、安全性等功能，使得Java程序具备跨平台性。</p><p>2、<strong>JDK</strong>是<strong>Java开发工具包</strong>，是开发Java程序所需的工具集合。它包含了JVM、编译器（javac）、调试器（jdb）等开发工具，以及一系列的类库（如Java标准库和开发工具库）。<strong>JDK提供了开发、编译、调试和运行Java程序所需的全部工具和环境。</strong></p><p>3、<strong>JRE</strong>是Java运行时环境，是Java程序运行所需的最小环境。它包含了JVM和一组Java类库，用于支持Java程序的执行。<strong>JRE不包含开发工具，只提供Java程序运行所需的运行环境。</strong></p><hr><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h3><table><thead><tr><th>类型</th><th>占用内存</th><th>默认值</th><th>范围/说明</th><th>使用场景</th></tr></thead><tbody><tr><td><code>byte</code></td><td>1 字节</td><td>0</td><td>-128 ~ 127</td><td>适合用于节省内存，例如在处理文件或网络流时存储小范围整数数据。</td></tr><tr><td><code>short</code></td><td>2 字节</td><td>0</td><td>-2¹⁵ ~ 2¹⁵ - 1</td><td>通常用于在需要节省内存且数值范围在该区间的场景。</td></tr><tr><td><code>int</code></td><td>4 字节</td><td>0</td><td>-2³¹ ~ 2³¹-1</td><td>最常用，可满足大多数日常编程中整数计算的需求。</td></tr><tr><td><code>long</code></td><td>8 字节</td><td>0L</td><td>-2⁶³ ~ 2⁶³-1</td><td>用于表示非常大的整数，定义时数值后需加 <code>L</code> 或 <code>l</code>。</td></tr><tr><td><code>float</code></td><td>4 字节</td><td>0.0f</td><td>约 ±3.4e38，7 位精度</td><td>单精度浮点数，定义时数值后需加 <code>F</code> 或 <code>f</code>。</td></tr><tr><td><code>double</code></td><td>8 字节</td><td>0.0d</td><td>约 ±1.8e308，15 位精度</td><td>双精度浮点数，是 Java 中表示小数的默认类型。</td></tr><tr><td><code>char</code></td><td>2 字节</td><td>&#39;\\u0000&#39;</td><td>单个 Unicode 字符（0 ~ 65535）</td><td>用于表示单个字符，采用 Unicode 编码。</td></tr><tr><td><code>boolean</code></td><td>1 位*</td><td>false</td><td>true / false（JVM 中通常按 1 字节处理）</td><td>用于逻辑判断</td></tr></tbody></table><h3 id="数据类型转换方式" tabindex="-1"><a class="header-anchor" href="#数据类型转换方式"><span>数据类型转换方式</span></a></h3><p>1，自动类型转换：例如，将<code>int</code>转换为<code>long</code>、将<code>float</code>转换为<code>double</code>等。</p><p>2，强制类型转换：例如，将<code>long</code>转换为<code>int</code>、将<code>double</code>转换为<code>int</code>等，可能导致数据丢失或溢出。</p><p>3，字符串转换：例如，将字符串转换为整型<code>int</code>，可以使用<code>Integer.parseInt()</code>方法。</p><p>4，数值之间转换：例如，将整型转换为字符型、将字符型转换为整型等。通过类型的包装类来实现提供的相应的转换方法。</p><hr><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h3><p><strong>String、StringBuilder、StringBuffer</strong></p><p><code>String</code> 是不可变的。</p><p><code>StringBuilder</code> 与 <code>StringBuffer</code> 都继承自 <code>AbstractStringBuilder</code> 类，在 <code>AbstractStringBuilder</code> 中也是使用字符数组保存字符串，不过没有使用 <code>final</code> 和 <code>private</code> 关键字修饰，最关键的是这个 <code>AbstractStringBuilder</code> 类还提供了很多修改字符串的方法比如 <code>append</code> 方法。</p><p><code>String</code> 中的对象是不可变的，也就可以理解为常量，线程安全。<code>StringBuffer</code> 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。<code>StringBuilder</code> 并没有对方法进行加同步锁，所以是非线程安全的。</p><p>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。<code>StringBuilder</code>和<code>StringBuffer</code> 每次都会对对象本身进行操作，但是<code>StringBuffer</code> 有线程安全的开销。</p><hr><p><strong>String为什么不可变？</strong></p><p>首先从<strong>存储结构</strong>来看，String内部使用final修饰的字符数组（JDK9后改为byte[]）存储数据，这个数组不仅被final限定不可重新赋值，还被private修饰彻底封装，外部无法直接操作底层数据。</p><p>其次从<strong>类设计</strong>层面，String类本身被final修饰形成终极防线，任何继承行为都被禁止，从根本上杜绝了通过子类覆写方法破坏不可变性的可能。</p><p>最后从<strong>方法设计</strong>角度，String没有提供任何会修改内部状态的方法，而StringBuilder和StringBuffer通过继承AbstractStringBuilder获得了修改能力，这种鲜明的对比恰恰凸显了String的不可变特性。</p><p>⬆<strong>实现</strong>上解释不可变，⬇<strong>设计</strong>上解释不可变</p><hr><p><strong>为什么设计成不可变的？</strong></p><p>首先从<strong>安全性</strong>上讲，当 String 对象作为参数传递或在多线程间共享时，由于其内容不可更改，完全避免了并发修改导致的数据竞争问题。这种特性在网络通信、安全认证等关键场景中尤为重要。</p><p>其次在<strong>性能优化</strong>方面，JVM 可以基于此特性实现字符串常量池。同时 String 的 hashCode 可以被缓存，因为内容不变意味着哈希值永远有效，这极大提升了 HashMap 等集合类的操作效率。</p><p>从<strong>设计哲学</strong>层面，不可变 String 建立了明确的行为契约：任何字符串操作都保证返回新对象而非修改原对象。这种设计使 String 作为方法参数时，调用方无需担心内容被意外修改，大大提高了代码的可预测性。</p><hr><p>**字符串常量池 : ** JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。</p><p>当你使用 <code>new String(&quot;abc&quot;)</code> 时，实际上会发生两个步骤：</p><ol><li><strong>首先，字符串字面量 <code>&quot;abc&quot;</code> 会被检查是否在字符串常量池中</strong>。如果 <code>&quot;abc&quot;</code> 不在常量池中，它会被添加进去；如果已经在常量池中，直接复用常量池中的 <code>&quot;abc&quot;</code>。</li><li><strong>然后，<code>new String(&quot;abc&quot;)</code> 会创建一个新的 <code>String</code> 对象</strong>，这个新的对象会指向常量池中的 <code>&quot;abc&quot;</code> 字符串。虽然它和常量池中的 <code>&quot;abc&quot;</code> 内容一样，但它是 <strong>一个新的对象</strong>（存储在堆内存中）。</li></ol><p>所以，<code>new String(&quot;abc&quot;)</code> 实际上会<strong>创建两个 <code>&quot;abc&quot;</code></strong>：一个是存储在字符串常量池中的 <code>&quot;abc&quot;</code>（如果之前没有的话）。另一个是存储在堆内存中的新 <code>String</code> 对象。</p><blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//字符串常量池</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &quot;hello&quot; 被加入常量池</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // s1 和 s2 引用的是同一个对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 通过 new 创建，指向堆内存，不在常量池中</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s4 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // s4 仍然指向常量池中的 &quot;hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s5 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> s1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// s5 仍然指向常量池中的 &quot;hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//intern() 方法的作用是让你获得常量池中的字符串，如果该字符串已经存在于常量池中，直接返回该对象；如果不存在，则将它添加到常量池。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//包装类的缓存机制</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 会从缓存池获取</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 同样会从缓存池获取，i1 和 i2 指向同一个对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 不会从缓存池获取，而是新建对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i4 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // i3 和 i4 不是同一个对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><hr><p>**String的 “ + ” **：字符串对象通过“+”的字符串拼接方式，实际上是通过 <code>StringBuilder</code> 调用 <code>append()</code> 方法实现的，拼接完成之后调用 <code>toString()</code> 得到一个 <code>String</code> 对象 。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(s)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str1).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str2).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>**String的 “ equals ” **：检查是否是同一个对象; 检查传入的对象是否是 String 类型; 检查长度是否相等; for循环逐个字符比较。</p><hr><h3 id="bigdecimal" tabindex="-1"><a class="header-anchor" href="#bigdecimal"><span>BigDecimal</span></a></h3><p><strong>浮点数精度丢失</strong></p><p>浮点数运算进度丢失是因为计算机二进制存储数字，但是有些小数不能在有限位数里转化成二进制。所以就需要截断，导致精度丢失。</p><p>二进制表示小数的时候只能够表示能够用1/(2^n)的和的任意组合</p><hr><p>使用<code>BigDecimal</code>: 用字符串的形式存储小数位，以十进制方式精确表示每一位，适合做高精度运算，比如金额计算。</p><p>在创建<code>BigDecimal</code>对象时，应该使用字符串作为参数。</p><blockquote><p><strong>常见方法</strong>：</p><ul><li><strong>创建</strong>：推荐使用它的<code>BigDecimal(String val)</code>构造方法或者 <code>BigDecimal.valueOf(double val)</code> 静态方法来创建对象。不能直接把double转化为BigDecimal对象，因为 double 是不精确的二进制浮点数，直接用它构造 <code>BigDecimal</code> 会把那些 误差也带进去，导致结果不准确。</li><li><strong>加减乘除</strong>：<code>add</code> 方法用于将两个 <code>BigDecimal</code> 对象相加，<code>subtract</code> 方法用于将两个 <code>BigDecimal</code> 对象相减。<code>multiply</code> 方法用于将两个 <code>BigDecimal</code> 对象相乘，<code>divide</code> 方法用于将两个 <code>BigDecimal</code> 对象相除</li></ul><blockquote><p>使用 <code>divide</code> 方法的时候尽量使用 3 个参数版本，并且<code>RoundingMode</code> 不要选择 <code>UNNECESSARY</code>，否则很可能会遇到 <code>ArithmeticException</code>（无法除尽出现无限循环小数的时候），其中 <code>scale</code> 表示要保留几位小数，<code>roundingMode</code> 代表保留规则。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">divide</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(b));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 无法除尽，抛出 ArithmeticException 异常</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">divide</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(b, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RoundingMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">HALF_UP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1.11</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ul><li><strong>大小比较</strong>：<code>a.compareTo(b)</code> : 返回 -1 表示 <code>a</code> 小于 <code>b</code>，0 表示 <code>a</code> 等于 <code>b</code> ， 1 表示 <code>a</code> 大于 <code>b</code>。<code>equals()</code> 方法不仅仅会比较值的大小（value）还会比较精度（scale），而 <code>compareTo()</code> 方法比较的时候会忽略精度。</li><li><strong>保留几位小数</strong>：通过 <code>setScale</code>方法设置保留几位小数以及保留规则。</li></ul></blockquote><hr><h3 id="biginteger" tabindex="-1"><a class="header-anchor" href="#biginteger"><span>BigInteger</span></a></h3><p><code>BigInteger</code> 内部使用 <code>int[]</code> 数组来存储任意大小的整形数据。可以用来存储超过long整型的数据。</p><p>相对于常规整数类型的运算来说，<code>BigInteger</code> 运算的效率会相对较低。</p><hr><h2 id="包装类型" tabindex="-1"><a class="header-anchor" href="#包装类型"><span>包装类型</span></a></h2><h3 id="包装类型-vs-基本数据类型" tabindex="-1"><a class="header-anchor" href="#包装类型-vs-基本数据类型"><span>包装类型 vs 基本数据类型</span></a></h3><p>1，<strong>本质</strong>上讲，包装类是对象而基本类型是原始数据。包装类继承自Object，可以调用方法，而int等基本类型直接存储数值，没有面向对象特性。</p><p>2，<strong>存储位置</strong>上，基本数据类型作为方法局部变量时直接存储在虚拟机栈的栈帧中，访问速度最快；作为对象成员变量时则随对象实例存储在堆内存中；而静态的基本类型变量会被分配到方法区（元空间）；包装类对象则始终存储在堆内存中，Java对部分包装类实现了缓存优化，缓存在堆内存的特殊区域。</p><p>3，<strong>默认值</strong>，基本类型有明确默认值（int为0），包装类默认值为null。</p><p>4，<strong>应用场景</strong>上，高频计算场景推荐使用基本类型（性能更好），而需要对象特性的场景（如集合存储、泛型使用）必须使用包装类。</p><hr><h3 id="包装类型的缓存机制" tabindex="-1"><a class="header-anchor" href="#包装类型的缓存机制"><span>包装类型的缓存机制</span></a></h3><p><code>JVM</code>会将常见的重复使用的对象进行复用，避免每次都创建新的对象，提高性能，减少内存使用。</p><p>比如Integer，<code>JVM</code>会缓存<code>-128到127</code>的整数。调用<code>Integer.valueOf(int)</code>的时候，如果传入的整数在这个范围，<code>JVM</code>就返回一个已经创建好的共享对象，而不是在创建一个新的Integer对象。Boolean类型<code>JVM</code>只会缓存true和false两个值。</p><hr><h3 id="包装类的作用" tabindex="-1"><a class="header-anchor" href="#包装类的作用"><span>包装类的作用</span></a></h3><p>包装类的设计是为了解决<strong>基本数据类型无法满足对象化操作需求</strong>的问题</p><p>1，包装类使基本数据类型具备<strong>面向对象特性</strong>，使其可以调用方法、实现接口、参与多态等。</p><p>2，包装类使得基本数据类型能够以对象形式<strong>存储在集合中</strong>，例如<code>List&lt;Integer&gt;</code>。</p><p>3，<strong>提供null值支持</strong>：基本数据类型不能表示&quot;无值&quot;状态（如数据库中的NULL），而包装类可以通过<code>null</code>来表示这种状态，</p><p>4，包装类<strong>提供了许多静态方法</strong>，如<code>Integer.parseInt()</code>、<code>Double.toString()</code>等，方便进行数据类型转换和数值处理。</p><p>5，包装类是对象，可以参与<strong>反射操作</strong>和序列化/反序列化过程，而基本数据类型无法直接支持这些特性。</p><p>6，部分包装类（如Integer、Long等）对特定范围内的值进行了<strong>缓存优化</strong>（如-128到127），提高了性能和内存使用效率。</p><hr><h3 id="自动装箱与拆箱" tabindex="-1"><a class="header-anchor" href="#自动装箱与拆箱"><span>自动装箱与拆箱</span></a></h3><p><strong>自动装箱</strong>是将基本数据类型转换为其对应的包装类的过程，<strong>拆箱</strong>则是将包装类转换为基本数据类型的过程。这两个过程是由<strong>编译器</strong>自动完成的。装箱的时候<code>JVM</code>调用包装类的构造方法或 <code>valueOf()</code> 方法，拆箱时会通过 <code>xxxValue()</code> 方法（如 <code>Integer.intValue()</code>）获取基本数据类型的值。另外包装类的缓存机制会避免重复创建对象，提升性能。</p><p>但是频繁的装箱可能会导致性能问题，因为如果你的基本数据类型的大小超过了缓存机制的界限，那么就会不断产生新的对象，增加垃圾回收的压力。</p><hr><h2 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字"><span>关键字</span></a></h2><h3 id="static" tabindex="-1"><a class="header-anchor" href="#static"><span>static</span></a></h3><p>在 Java 中，<code>static</code> 是一个非常基础的关键字，表示“静态的”，意思就是这个东西不依赖于对象，而是属于类本身。可以修饰静态变量，静态方法，静态代码块，静态内部类，接口的static方法（8+），接口中的变量默认都是static final的。</p><p><strong>在类中</strong>，<code>static</code> 方法是属于类的，可以通过类名直接调用，不需要实例化对象，也<strong>不能被重写</strong>，因为它不属于实例，不参与多态。</p><p><strong>在接口中（Java 8+）</strong>，允许定义 <code>static</code> 方法，<strong>只能通过接口名调用，不能被实现类继承或重写</strong>，这主要是为了给接口提供一些工具方法。</p><p>**静态变量有什么作用？**静态变量也就是被 <code>static</code> 关键字修饰的变量。它可以被类的所有实例共享，无论一个类创建了多少个对象，它们都共享同一份静态变量。好处就是：节省内存、共享数据、方便统一管理。</p><p><strong>静态方法为什么不能调用非静态成员?</strong></p><p>静态方法属于类而不是实例，而非静态成员属于对象（实例）。</p><p>静态方法在类加载时就可以访问，不依赖于类的具体实例。非静态成员只有在类的实例化对象存在时，才能访问。</p><p>静态方法没有<code>this</code>引用，不能访问与实例关联的成员。</p><h3 id="final" tabindex="-1"><a class="header-anchor" href="#final"><span>final</span></a></h3><p><code>final</code> 这个关键字在 Java 里主要是用来限制“修改”的，可以修饰变量、方法和类</p><p>如果修饰变量，基本数据类型就表示值不能再变了，引用数据类型表示这个引用不能再指向别的对象，但对象本身的内容是可以改变的。</p><p>如果修饰方法，表示它不能被子类重写。比如，<code>lang.Object</code>类的<code>getClass</code>方法。因为这个方法的行为是由 Java 虚拟机底层实现来保证的，不应该被子类修改。</p><p>如果修饰类，表示不能被继承。比如，<code>String</code>类是<code>final</code>修饰的。</p><hr><h3 id="static-final" tabindex="-1"><a class="header-anchor" href="#static-final"><span>static final</span></a></h3><p>组合在一起使用时表示这个变量是<strong>全局常量</strong>，在整个程序中只存在一份，值不能修改，是一种<strong>线程安全、全局唯一的只读变量</strong>。</p><h3 id="transient" tabindex="-1"><a class="header-anchor" href="#transient"><span>transient</span></a></h3><p><code>transient</code> 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 <code>transient</code> 修饰的变量值不会被持久化和恢复。</p><p>关于 <code>transient</code> 还有几点注意：</p><ul><li><code>transient</code> 只能修饰变量，不能修饰类和方法。</li><li><code>transient</code> 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 <code>int</code> 类型，那么反序列后结果就是 <code>0</code>。</li><li><code>static</code> 变量因为不属于任何对象(Object)，所以无论有没有 <code>transient</code> 关键字修饰，均不会被序列化。</li></ul><h2 id="java-对象" tabindex="-1"><a class="header-anchor" href="#java-对象"><span>Java 对象</span></a></h2><h3 id="java创建对象的方式" tabindex="-1"><a class="header-anchor" href="#java创建对象的方式"><span>Java创建对象的方式</span></a></h3><p>1，<strong>使用<code>new</code>关键字</strong>：最直接的创建方式，通过调用类构造方法完成内存分配和初始化。</p><p>2，<strong>反射机制</strong>：分为两种实现路径：</p><ul><li><code>Class.newInstance()</code>：调用无参构造（JDK9已废弃，推荐Constructor方式）</li><li><code>Constructor.newInstance()</code>：支持带参构造，更灵活的反射实例化方案</li></ul><p>4，<strong>使用clone()方法</strong>：如果类实现了Cloneable接口，可以使用clone()方法复制对象。</p><p>5，<strong>使用反序列化</strong>：通过<code>ObjectInputStream</code>读取序列化字节流，绕过构造方法直接重建对象。要求类实现<code>Serializable</code>接口，常用于网络传输和持久化场景。</p><hr><h3 id="对象创建的过程" tabindex="-1"><a class="header-anchor" href="#对象创建的过程"><span>对象创建的过程</span></a></h3><p>当new一个对象的时候，JVM首先判断类是否已经加载，如果没有就加载，如果已经加载了，那么就会在 <strong>堆内存</strong> 中为这个对象分配内存，分配好内存后，JVM 会先对这块内存做默认初始化，比如 int 是 0，引用是 null 等，接下来会准备好 this 指针，把它绑定到刚才分配的那块内存上，进程初始化，执行父类的非静态变量和代码块、父类构造器、子类的非静态变量和代码块、子类构造器。最后返回这个对象在堆的引用。</p><hr><h3 id="如何获取私有对象" tabindex="-1"><a class="header-anchor" href="#如何获取私有对象"><span>如何获取私有对象</span></a></h3><p>私有对象通常指的是类中被声明为<code>private</code>的成员变量或方法，这些成员只能在其所在的类内部被访问。</p><p>但也可以通过下面两种方式来间接获取私有对象：</p><p>1，使用<strong>公共访问器</strong>方法（getter 方法）。</p><p>2，<strong>反射机制</strong>：反射机制允许在运行时检查和修改类、方法、字段等信息。</p><hr><h2 id="java-类" tabindex="-1"><a class="header-anchor" href="#java-类"><span>Java 类</span></a></h2><h3 id="类加载过程" tabindex="-1"><a class="header-anchor" href="#类加载过程"><span>类加载过程</span></a></h3><p>类加载是指 Java 程序在运行过程中，<strong>把 .class 文件加载到 JVM 中，并转化为 Class 对象的过程</strong>。</p><p>加载：JVM 通过类的全限定名查找 <code>.class</code> 文件，把它的字节码读取进内存，并创建一个 <code>Class</code> 对象。</p><p>验证：这一步是为了安全，检查这个字节码文件是否合法，比如语法结构、常量池是否合法、防止字节码被篡改等。</p><p>准备：这个阶段会为类的<strong>静态变量</strong>分配内存，并设置默认值，比如 <code>int</code> 是 0，<code>boolean</code> 是 false。</p><p>解析：把类中的符号引用（就是类似类名、字段名这种字符串）替换为真正的地址引用（也就是指向内存的引用）。</p><p>初始化：这一步才是真正执行代码，比如执行 <code>static</code> 代码块，或者静态变量的赋值操作，这些代码只会执行一次。</p><p>Java 类加载器采用的是<strong>双亲委派模型</strong>，意思是：<strong>一个类加载器在加载某个类时，先把请求交给它的父加载器，父加载器找不到，才由自己来加载</strong>。有两个好处，应该是避免重复加载，另一个是保证核心类的优先级。</p><hr><h2 id="unsafe类" tabindex="-1"><a class="header-anchor" href="#unsafe类"><span>Unsafe类</span></a></h2><p><code>Unsafe</code> 是 Java 提供的一个<strong>底层工具类</strong>，放在 <code>sun.misc</code> 包里，平时不能直接访问。它提供了很多<strong>绕过 JVM 安全机制的操作</strong>，比如直接操作内存、对象实例化、CAS 原子操作等。</p><p>它的主要作用就是<strong>提升性能、实现并发底层原语</strong>。不过它比较危险，因为可以绕开 Java 的内存模型、类型安全等限制，一般只在底层框架或者 JDK 内部使用。</p><p>从 Java 9 开始，官方推荐使用 <code>VarHandle</code> 来替代 <code>Unsafe</code>，更加安全规范。</p><h2 id="新特性" tabindex="-1"><a class="header-anchor" href="#新特性"><span>新特性</span></a></h2><h3 id="java8新特性" tabindex="-1"><a class="header-anchor" href="#java8新特性"><span>Java8新特性</span></a></h3><p>首先最重要的是<strong>Lambda表达式和函数式编程的支持</strong>。Lambda表达式提供了一种简洁的语法来表示匿名函数，使得我们可以用更少的代码实现同样的功能。配合函数式接口（@FunctionalInterface），我们可以写出更优雅的代码。比如用()-&gt;{}替代匿名内部类，大大简化了代码。</p><p>其次是<strong>Stream API的引入</strong>。Stream提供了一种高效且易于并行化的数据处理方式。通过filter、map、reduce等操作，我们可以用声明式的方式处理集合数据。比如处理一个订单列表时，可以轻松实现过滤、排序、分组等操作，而且还能自动利用多核处理器进行并行计算。</p><p>第三是<strong>新的日期时间API</strong>（java.time包）。这个全新的API解决了旧Date/Calendar类的各种问题，提供了线程安全、不可变且更直观的日期时间操作类，如LocalDate、LocalDateTime等。</p><p>另外还有几个重要特性：</p><ol><li>默认方法（default method），允许接口包含方法实现</li><li>方法引用（Method Reference），进一步简化Lambda表达式</li><li>Optional类，提供了更好的null值处理方式</li></ol><hr><h3 id="java-21新特性" tabindex="-1"><a class="header-anchor" href="#java-21新特性"><span>Java 21新特性</span></a></h3><p><strong>1. 虚拟线程（Virtual Threads）</strong> 这是 Java 21 最核心的特性，通过 <code>java.lang.VirtualThread</code> 实现了轻量级线程。虚拟线程由 JVM 管理，显著提升了高并发场景下的性能，可以支持数百万级别的线程创建，而传统线程受限于操作系统，通常只能创建数千个。使用方式也很简单，通过 <code>Thread.startVirtualThread()</code> 或 <code>ExecutorService.newVirtualThreadPerTaskExecutor()</code> 即可创建。</p><p><strong>2. 序列集合（Sequenced Collections）</strong> 新增了 <code>SequencedCollection</code>、<code>SequencedSet</code> 和 <code>SequencedMap</code> 接口，为集合提供了统一的获取首尾元素的方法，如 <code>getFirst()</code>、<code>getLast()</code>、<code>addFirst()</code> 等，解决了之前不同集合类型操作方式不一致的问题。</p><p><strong>3. 字符串模板（String Templates）</strong> 预览特性，通过 <code>STR</code> 模板处理器实现更安全的字符串拼接，避免 SQL 注入等安全问题。</p><p><strong>4. 分代 ZGC（Generational ZGC）</strong> ZGC 垃圾回收器现在支持分代收集，可以更高效地管理内存，降低停顿时间，尤其适合大内存应用。</p><p><strong>5. switch 模式匹配增强</strong> 支持更简洁的模式匹配语法，可以直接在 switch 中匹配类型。</p><hr><h3 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式"><span>Lambda表达式</span></a></h3><p>本质上是一个匿名函数，允许我们将函数作为方法参数传递，或者将代码作为数据处理。它的核心思想来自于函数式编程。</p><p>从语法上看，Lambda表达式由三部分组成：</p><ol><li>参数列表：可以省略参数类型（类型推断）</li><li>箭头符号：-&gt;</li><li>方法体：可以是表达式或代码块</li></ol><p><strong>优点</strong>：</p><p>1，简洁性：Lambda表达式大幅减少了样板代码。相比传统的匿名内部类，它消除了冗余的类定义和方法声明，使代码更加紧凑。</p><p>2，可读性：通过将关注点集中在业务逻辑本身，过滤掉了非核心的语法结构。链式调用配合方法引用，使数据处理流程可以像自然语言一样线性表达。</p><p>3，允许将函数作为方法参数传递，实现了策略模式的轻量化应用。比如集合的sort方法，现在可以直接传入比较逻辑，而不需要创建完整的Comparator实现类。</p><p>虽然 Lambda 表达式优点蛮多的，不过也有一些<strong>缺点</strong>，比如会增加调试困难，因为 Lambda 表达式是匿名的，在调试时很难定位具体是哪个 Lambda 表达式出现了问题。尤其是当 Lambda 表达式嵌套使用或者比较复杂时，调试难度会进一步增加。</p><hr><h3 id="stream-api" tabindex="-1"><a class="header-anchor" href="#stream-api"><span>Stream API</span></a></h3><p>Java Stream API是Java 8引入的声明式数据处理框架，它通过函数式编程范式重新定义了集合操作方式。Stream的本质是对数据源的元素序列进行函数式流水线操作。</p><p>这个API最大的<strong>优势</strong>是让数据处理代码更加简洁明了，特别是在需要对集合进行复杂操作时，可以避免编写多层嵌套的循环语句。同时，它的函数式风格也使得代码更容易理解和维护。</p><p>Stream API还支持<strong>并行处理</strong>，通过parallelStream()方法可以自动将任务分配到多个线程执行。在使用时需要注意，Stream是单向的，一旦被消费就不能重复使用。</p><hr><p><strong>Stream的操作</strong>分为中间操作和终止操作两种类型。中间操作会返回一个新的Stream，可以进行链式调用，主要包括：</p><ul><li>filter：数据过滤</li><li>map：数据转换</li><li>sorted：数据排序</li><li>distinct：去重操作</li></ul><p>终止操作会触发实际计算，产生一个具体结果或副作用，常见的有：</p><ul><li>forEach：遍历元素</li><li>collect：将流转换为集合</li><li>reduce：聚合计算</li><li>count：统计元素数量</li></ul><hr><h3 id="completablefuture" tabindex="-1"><a class="header-anchor" href="#completablefuture"><span>CompletableFuture</span></a></h3><p>CompletableFuture是Java 8引入的异步编程工具，它扩展了Future接口，提供了更强大的异步任务编排能力。这个类主要解决了传统Future的几个痛点：无法手动完成任务、缺乏任务编排能力、异常处理不够灵活。</p><p>CompletableFuture的核心功能可以分为几个方面：首先是任务链式编排，通过thenApply、thenAccept等方法实现异步任务的流水线处理。其次是组合操作，支持thenCompose、thenCombine等方法组合多个异步任务的结果。然后是异常处理，提供了exceptionally、handle等方法来优雅处理异步任务中的异常。</p><hr><h1 id="面向对象编程" tabindex="-1"><a class="header-anchor" href="#面向对象编程"><span>面向对象编程</span></a></h1><p>面向对象编程是一种以对象为基本单元的编程范式，其核心是将现实世界的事物抽象为程序中的独立实体。每个对象包含数据（属性）和操作数据的方法，通过对象之间的交互来完成复杂功能。</p><hr><h2 id="oop的三大特性" tabindex="-1"><a class="header-anchor" href="#oop的三大特性"><span>OOP的三大特性</span></a></h2><p>首先OOP的三大特性分别是封装，继承，多态。</p><p><strong>封装</strong>就是把数据和方法封装起来，隐藏内部的实现细节，外部只能通过提供的接口访问和修改数据，并且封装还提供了访问修饰符来控制权限，进一步增强了安全性和灵活性。它强调的是安全性和可维护性。</p><p><strong>继承</strong>允许我们在已有类的基础上创建类，也就是子类继承父类的属性和方法，避免了代码的重复，提高了代码的复用性，它体现的是一个（is-a）的关系，存在耦合的问题，在实践中我们有”组合（has-a）优于继承“的设计思想。强调的是复用。</p><p><strong>多态</strong>是指”一个接口，多种实现“，分为运行时多态和编译时多态，多态让我们可以用统一的方式处理不同的对象，强调的是扩展性和灵活性。</p><hr><h2 id="面向对象的设计原则" tabindex="-1"><a class="header-anchor" href="#面向对象的设计原则"><span>面向对象的设计原则</span></a></h2><p>面向对象设计主要遵循SOLID五大核心原则，这些原则共同构成了健壮可维护系统的设计基础：</p><p><strong>单一职责原则（SRP）</strong> 强调每个类应该只有一个引起变化的原因。例如用户管理系统中，将用户信息存储和用户权限校验分离到不同类中，避免修改用户属性时影响权限逻辑。</p><p><strong>开闭原则（OCP）</strong> 指出软件实体应对扩展开放，对修改关闭。通过抽象化和多态机制实现，比如定义Shape抽象类后，新增圆形、三角形等子类时无需修改原有图形处理代码。</p><p><strong>里氏替换原则（LSP）</strong> 规定子类必须能够替换父类而不影响程序正确性。这就要求子类不重写父类已实现的方法，而是通过抽象方法或接口扩展。例如鸟类有fly()方法，企鹅作为子类不应重写为空方法，而应重新设计继承体系。</p><p><strong>接口隔离原则（ISP）</strong> 主张客户端不应依赖它不需要的接口。将臃肿接口拆分为多个专用接口，就像打印机功能应该将打印、扫描、传真分为不同接口，避免多功能设备强制实现所有方法。</p><p><strong>依赖倒置原则（DIP）</strong> 要求高层模块不依赖低层模块，二者都应依赖抽象。通过依赖注入实现，如订单服务依赖Payment接口而非具体的Alipay实现，支持灵活切换支付方式。</p><p>此外，还有两个重要的辅助原则：</p><p><strong>迪米特法则（LoD）</strong> 限制对象间的交互范围，强调最少知识原则。例如顾客购车时，销售员不应直接操作发动机的零部件，而应该通过整车接口交互。</p><p><strong>组合复用原则（CRP）</strong> 提倡优先使用组合而非继承来扩展功能。就像给汽车增加导航系统，应该通过组合GPS设备实现，而不是继承某个导航基类。</p><hr><h2 id="静态变量与静态方法" tabindex="-1"><a class="header-anchor" href="#静态变量与静态方法"><span>静态变量与静态方法</span></a></h2><p><strong>静态变量</strong>（也称为类变量）是在类中使用<code>static</code>关键字声明的变量。常用于需要在所有对象间共享的数据，如计数器、常量等。它们属于类而不是任何具体的对象。主要的特点：</p><p>1，<strong>共享性</strong>：所有该类的实例共享同一个静态变量。如果一个实例修改了静态变量的值，其他实例也会看到这个更改。</p><p>2，<strong>初始化</strong>：静态变量在类被加载时初始化，只会对其进行一次分配内存。</p><p>3，<strong>访问方式</strong>：静态变量可以直接通过类名访问，也可以通过实例访问，但推荐使用类名。</p><p>静态方法是在类中使用<code>static</code>关键字声明的方法。类似于静态变量，静态方法也属于类，而不是任何具体的对象。常用于助手方法、获取类级别的信息或者是没有依赖于实例的数据处理。主要的特点：</p><p>1，<strong>无实例依赖</strong>：静态方法可以在没有创建类实例的情况下调用。对于静态方法来说，不能直接访问非静态的成员变量或方法，因为静态方法没有上下文的实例。</p><p>2，<strong>访问静态成员</strong>：静态方法可以直接调用其他静态变量和静态方法，但不能直接访问非静态成员。</p><p>3，<strong>多态性</strong>：：静态方法不支持重写（Override），但可以被隐藏（Hide）。</p><hr><h2 id="非静态内部类与静态内部类" tabindex="-1"><a class="header-anchor" href="#非静态内部类与静态内部类"><span>非静态内部类与静态内部类</span></a></h2><p>内部类是为了更好地组织代码结构，让逻辑上紧密关联的类写在一起，提高封装性和可读性。</p><p><strong>非静态内部类和静态内部类的区别</strong></p><p><strong>本质区别</strong>：非静态内部类持有外部类的隐式引用，可以直接访问外部类的所有成员；静态内部类不持有外部类引用，只能访问外部类的静态成员。</p><p><strong>实例化方式</strong>上，非静态内部类必须通过外部类实例来创建；静态内部类可以直接实例化。</p><p><strong>内存管理</strong>方面，非静态内部类会导致外部类实例无法被GC回收，这在Android开发中容易引发Activity泄漏；静态内部类则不存在此问题。</p><p><strong>应用场景上</strong>，非静态内部类适合紧密耦合的场景，如事件处理器需要访问UI组件状态。静态内部类更适用于工具类、Builder模式等独立功能实现。</p><hr><p><strong>非静态内部类可以直接访问外部方法是因为</strong>编译器在生成字节码时会为非静态内部类维护一个指向外部类实例的引用。</p><p>这个引用使得非静态内部类能够访问外部类的实例变量和方法。编译器会在生成非静态内部类的构造方法时，将外部类实例作为参数传入，并在内部类的实例化过程中建立外部类实例与内部类实例之间的联系，从而实现直接访问外部方法的功能。</p><hr><h2 id="重写-vs-重载" tabindex="-1"><a class="header-anchor" href="#重写-vs-重载"><span>重写 vs 重载</span></a></h2><p>首先在<strong>定义</strong>上，重载是指同一个类中存在多个同名方法，通过不同的参数列表进行区分；而重写是子类对父类方法进行重新定义，保持方法签名完全一致。</p><p>其次在<strong>作用范围</strong>上，重载发生在同一个类内部，重写则是在父子类之间进行。重载关注的是方法调用的多样性，重写关注的是方法实现的差异性。</p><p>第三在<strong>绑定时机</strong>上，重载属于编译时多态，编译器在编译阶段就能确定调用哪个方法；重写属于运行时多态，需要等到程序运行时才能确定具体调用的方法实现。</p><p>第四在<strong>方法签名要求</strong>上，重载要求方法名称相同但参数列表必须不同；重写则要求方法名称、参数列表和返回类型都必须与父类方法保持一致。</p><p>最后在<strong>访问权限</strong>上，重载对方法的访问修饰符没有特殊要求；重写的方法访问权限不能比父类方法更严格，比如父类方法是protected，子类重写时就不能用private。</p><hr><h2 id="抽象类-vs-普通类" tabindex="-1"><a class="header-anchor" href="#抽象类-vs-普通类"><span>抽象类 vs 普通类</span></a></h2><p><strong>抽象类</strong>用于定义具有部分实现的结构，强调抽象概念，而<strong>普通类</strong>用于描述具体实体，强调具体实现。</p><p>抽象类不能被直接<strong>实例化</strong>，必须通过子类继承后实例化子类对象。普通类可以直接使用new关键字创建对象实例。</p><p>抽象类可以<strong>包含抽象方法和具体方法</strong>。普通类中的所有方法都必须有完整实现，不能存在抽象方法。</p><p><strong>继承</strong>抽象类的子类必须实现所有抽象方法（除非子类也是抽象类），而继承普通类时子类可以选择性地重写父类方法。</p><hr><h2 id="接口-vs-抽象类" tabindex="-1"><a class="header-anchor" href="#接口-vs-抽象类"><span>接口 vs 抽象类</span></a></h2><p>抽象类是对一类事物的本质抽象，强调&quot;是什么&quot;的层次关系，可以有成员变量、构造方法和具体方法。接口是对行为的抽象，强调&quot;能做什么&quot;的能力约定，只能有常量和抽象方法（Java 8 以后可以有默认方法和静态方法）。</p><p>一个类只能继承一个抽象类，但可以实现多个接口。</p><p>接口更强调行为标准的统一，而抽象类提供部分实现，强调代码的复用。</p><hr><p><strong>接口里面可以定义哪些方法</strong></p><p>抽象方法：抽象方法是接口的核心部分，所有实现接口的类都必须实现这些方法。</p><p>默认方法：默认方法是在 Java 8 中引入的，允许接口提供具体实现。实现类可以选择重写默认方法。</p><p>静态方法：默认方法是在 Java 8 中引入的，允许接口提供具体实现。实现类可以选择重写默认方法。</p><p>私有方法：默认方法是在 Java 8 中引入的，允许接口提供具体实现。实现类可以选择重写默认方法。</p><hr><h2 id="成员变量-vs-局部变量" tabindex="-1"><a class="header-anchor" href="#成员变量-vs-局部变量"><span>成员变量 vs 局部变量</span></a></h2><p>成员变量就是你在类里面定义的、但不写在方法里的变量，它是属于对象或者类本身的。只要对象在，它就一直在；对象没了，它才跟着消失。比如你定义了一个 <code>int age</code> 放在类里面，这就是成员变量。它有默认值，就算你不赋值，它也不是空的。</p><p>而局部变量呢，是写在方法、代码块或者参数里的，比如你在一个方法里面写了 <code>int count = 0;</code>，这个就是局部变量。它只在方法执行时存在，用完方法就被销毁了。而且它<strong>必须</strong>赋值后才能用，不然编译都不会通过。</p><p>还有一个区别是：成员变量可以加 <code>public</code>、<code>private</code>、<code>static</code> 这些修饰符，但局部变量不行，它不能有访问控制符，也不能是 static。</p><p>**为什么成员变量有默认值，局部变量没有？**成员变量是跟着对象走的，存在于堆内存里，一旦你创建了对象，JVM 就会自动帮你把这些变量都初始化成默认值，比如 <code>int</code> 是 0，<code>boolean</code> 是 false，引用类型是 null。这样做的好处是让程序更安全——你用成员变量的时候，不会因为“没初始化”导致程序崩掉或行为异常。局部变量没有，它是跟着方法走的，存在于栈内存里。Java 不给它默认值，目的就是强制你自己先赋值，不然编译器直接报错。</p><h2 id="静态方法-vs-实例方法" tabindex="-1"><a class="header-anchor" href="#静态方法-vs-实例方法"><span>静态方法 vs 实例方法</span></a></h2><p><strong>调用静态方法可以无需创建对象</strong>：前者可以使用 <code>类名.方法名</code> 的方式，也可以使用 <code>对象.方法名</code> 的方式，后者只能用第二种</p><p>静态方法只允许访问静态成员，不允许访问实例成员，而实例方法没有这种限制。</p><h2 id="构造代码块-vs-构造方法" tabindex="-1"><a class="header-anchor" href="#构造代码块-vs-构造方法"><span>构造代码块 vs 构造方法</span></a></h2><p>构造代码块是写在类中、没有方法名、没有修饰符的代码块。它在每次创建对象时都会执行，并且<strong>优先于构造方法执行</strong>。</p><p>构造方法用于创建对象时初始化，名字与类名相同，可以有多个重载版本。</p><h2 id="构造代码块-vs-静态代码块" tabindex="-1"><a class="header-anchor" href="#构造代码块-vs-静态代码块"><span>构造代码块 vs 静态代码块</span></a></h2><p>构造代码块在每次创建对象前都会执行，提取多个构造方法的共同行为，减少代码重复</p><p>静态代码块是在 Java 类中用 <code>static {}</code> 包裹的一段代码。<strong>它在类加载时执行，并且只执行一次</strong>，不管你创建了多少个对象。</p><hr><h2 id="多态体现在哪里" tabindex="-1"><a class="header-anchor" href="#多态体现在哪里"><span>多态体现在哪里</span></a></h2><p>首先是<strong>编译时多态</strong>，主要通过方法重载机制实现。当类中存在多个同名方法但参数列表不同时，编译器在编译阶段就能确定具体调用的方法版本。</p><p>其次是<strong>运行时多态</strong>，这是面向对象最核心的多态形式。通过方法重写机制，子类可以重新定义父类方法的实现。当父类引用指向子类对象时，JVM会根据对象实际类型动态绑定方法调用。这个特性依赖于虚方法表机制，每个类都会维护一个包含可调用方法地址的vtable。</p><p>第三是<strong>接口多态</strong>，通过接口与实现类的关系实现。不同于类继承的单继承限制，一个类可以实现多个接口，每个接口方法在不同的实现类中可以有不同的行为表现。例如集合框架中的List接口与ArrayList、LinkedList等实现类的关系。</p><hr><h2 id="面向对象-vs-面向过程" tabindex="-1"><a class="header-anchor" href="#面向对象-vs-面向过程"><span>面向对象 vs 面向过程</span></a></h2><p>POP把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题。</p><p>OOP关注的是对象和它们之间的互动，每个对象负责自己的行为，程序通过“对象”来组织和管理。</p><p>相比较于 POP，OOP 开发的程序一般具有下面这些优点：</p><p><strong>易维护</strong>：由于良好的结构和封装性，OOP 程序通常更容易维护。</p><p><strong>易复用</strong>：通过继承和多态，OOP 设计使得代码更具复用性，方便扩展功能。</p><p><strong>易扩展</strong>：模块化设计使得系统扩展变得更加容易和灵活。</p><hr><h1 id="java-机制" tabindex="-1"><a class="header-anchor" href="#java-机制"><span>Java 机制</span></a></h1><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h2><p>Java异常处理机制为我们提供了一套完善的错误处理和恢复体系。Java中的异常都是Throwable类的子类，主要分为两大类：Error和Exception。</p><p><strong>Error</strong>表示严重的系统错误，通常与程序逻辑无关，而是JVM运行时出现的问题，比如OutOfMemoryError或StackOverflowError。这类错误一般无法通过程序处理，只能尽量避免。</p><p><strong>Exception</strong>则是程序可以处理的异常，它又分为受检异常和非受检异常。<strong>受检异常</strong>如IOException、SQLException等，编译器会强制要求我们处理这些异常，要么用try-catch捕获，要么在方法签名中用throws声明。这种设计确保了程序对可能发生的问题有明确的处理逻辑。<strong>非受检异常</strong>即RuntimeException及其子类，如NullPointerException、ArrayIndexOutOfBoundsException等，这类异常通常由程序逻辑错误引起，编译器不强制处理。</p><hr><h3 id="异常处理机制" tabindex="-1"><a class="header-anchor" href="#异常处理机制"><span>异常处理机制</span></a></h3><p>处理异常有三种机制：</p><ul><li><p><code>try-catch-finally</code> 块：<code>try</code>块用于捕获并处理异常，其后可接零个或多个 <code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个 <code>finally</code> 块。<code>catch</code>块用于处理 try 捕获到的异常。<code>finally</code> 块无论是否发生异常都会执行，常用于释放资源；</p><blockquote><p><strong>不要在 finally 语句块中使用 return!</strong> 当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略。这是因为 try 语句中的 return 返回值会先被暂存在一个本地变量中，当执行到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。</p></blockquote><blockquote><p>**什么情况下finally 中的代码不会被执行？**1，在 finally 之前虚拟机被终止运行；2，程序所在的线程死亡；3，关闭 CPU。</p></blockquote></li><li><p><code>throw</code>：用于手动抛出一个异常实例；</p></li><li><p><code>throws</code>：用于在方法签名中声明该方法可能抛出哪些异常，方便调用者进行处理。</p></li></ul><hr><p><strong>异常的传播机制</strong>：如果一个方法抛出了异常而没有处理，就会沿着调用栈一直向上传递，直到被某一层捕获为止，如果始终没有被捕获，最终 JVM 会终止程序并打印异常堆栈。</p><hr><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h3><p>首先，应该捕获<strong>具体</strong>的异常类型，而不是简单地捕获Exception。其次，不要吞没异常，至少要<strong>记录异常信息</strong>。第三，合理使用<strong>自定义异常</strong>来区分业务异常和系统异常。最后，要注意异常处理的<strong>性能开销</strong>，特别是在高频执行的代码路径中。</p><p>补充：异常不能被定义为静态变量，否则会导致异常栈信息错乱</p><blockquote><p>举个例子，在电商系统开发中，我们可能会定义BusinessException来表示库存不足等业务异常，同时使用@ExceptionHandler将其转换为友好的错误信息返回给前端。</p></blockquote><hr><h3 id="throwable" tabindex="-1"><a class="header-anchor" href="#throwable"><span><strong>Throwable</strong></span></a></h3><p><strong>常见方法有哪些</strong>：</p><p><code>String getMessage()</code>: 返回异常发生时的详细信息</p><p><code>String toString()</code>: 返回异常发生时的简要描述</p><p><code>String getLocalizedMessage()</code>: 返回异常对象的本地化信息。使用 <code>Throwable</code> 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 <code>getMessage()</code>返回的结果相同</p><p><code>void printStackTrace()</code>: 在控制台上打印 <code>Throwable</code> 对象封装的异常信息</p><hr><h3 id="try-with-resources" tabindex="-1"><a class="header-anchor" href="#try-with-resources"><span><strong>try-with-resources</strong></span></a></h3><p><strong><code>try-with-resources</code></strong> 是 Java 7 引入的一种语法，用来简化资源（比如文件、数据库连接、输入输出流等）的关闭操作。</p><p>就是在 <code>try()</code> 里声明一个可自动关闭的资源，<code>try</code> 代码块结束后**，**JVM 会自动帮你调用 <code>close()</code> 方法，不需要再写 <code>finally</code> 手动关闭。</p><p><strong>使用条件</strong>：资源类必须实现 <code>AutoCloseable</code> 接口（<code>Closeable</code> 也是它的子接口，比如 <code>FileInputStream</code>、<code>BufferedReader</code> 等）。</p><p><strong>优点</strong>：语法简洁；自动关闭资源，避免资源泄露；多个资源可以一起声明。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Scanner</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> scanner </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Scanner</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">))) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">scanner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">scanner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nextLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FileNotFoundException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fnfe</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    fnfe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><p>泛型就是在定义类、接口或方法时，<strong>不指定具体的数据类型</strong>，而是用一个“占位符”（比如 <code>&lt;T&gt;</code>）来代替，<strong>等真正使用的时候再传入具体的类型</strong>。</p><p>泛型本质上是<strong>编译期的检查机制</strong>，运行时其实是<strong>擦除了类型信息</strong>，所以它是典型的语法糖。</p><p>好处呢一个是<strong>提高代码的通用性</strong>：可以写一次代码，适用于多种类型；<strong>增强类型安全</strong>：编译阶段就能检查类型，避免运行时出错；<strong>减少强制类型转换</strong>：不需要手动强转，代码更简洁安全。</p><hr><h3 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式"><span><strong>使用方式</strong></span></a></h3><p>1，泛型类，比如集合框架、自定义容器、工具类；2，泛型接口；3，泛型方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//泛型接口</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Generator</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//泛型方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> E </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> printArray</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">( </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] inputArray )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ( </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> element </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> inputArray ){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;%s &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, element );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">     }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">     System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>静态方法不能用类外面那个 T（因为那时候 T 还没值）， 但可以自己在方法前写 <code>&lt;E&gt;</code>，来定义一个属于自己的泛型。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Box</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> normalMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 可以用T</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">       System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(value);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> staticMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ❌ 报错！不能用T</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       // T 是类上的泛型，但静态方法用不了</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> printArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">inputArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ✅ 正确</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> element</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> inputArray) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">           System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(element);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>项目哪里用到了泛型？</strong>：</p><ul><li><p>自定义接口通用返回结果 <code>CommonResult&lt;T&gt;</code> 通过参数 <code>T</code> 可根据具体的返回类型动态指定结果的数据类型</p></li><li><p>定义 <code>Excel</code> 处理类 <code>ExcelUtil&lt;T&gt;</code> 用于动态指定 <code>Excel</code> 导出的数据类型</p></li><li><p>构建集合工具类（参考 <code>Collections</code> 中的 <code>sort</code>, <code>binarySearch</code> 方法）</p></li></ul><h3 id="泛型的坑" tabindex="-1"><a class="header-anchor" href="#泛型的坑"><span><strong>泛型的坑</strong></span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//泛型遇到重载-----报错，因为泛型擦除后一样</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GenericTypes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;invoke method(List&lt;String&gt; list)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;invoke method(List&lt;Integer&gt; list)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//泛型遇到 catch-----JVM 是无法区分两个异常类型MyException&lt;String&gt;和MyException&lt;Integer&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//泛型内包含静态变量-----GT&lt;Integer&gt;.var和GT&lt;String&gt;.var其实是一个变量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StaticTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        GT</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gti</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        gti</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        GT</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gts</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        gts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">gti</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//输出结果为：2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GT</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> var</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> nothing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h2><p>Java 反射 (Reflection) 是一种<strong>在程序运行时，动态地获取类的信息并操作类或对象的能力</strong>。</p><hr><h3 id="特性实现" tabindex="-1"><a class="header-anchor" href="#特性实现"><span>特性实现</span></a></h3><p><strong>动态对象创建</strong>：即使在编译时不知道具体类名也能使用反射API动态创建对象实例。这是通过Class类的newInstance()方法或Constructor对象的newInstance()方法实现的。</p><p><strong>动态方法调用</strong>：可以在运行时动态地调用对象的方法，包括私有方法。这通过Method类的invoke()方法实现，允许你传入对象实例和参数值来执行方法。</p><p><strong>访问和修改字段值</strong>：反射还允许程序在运行时访问和修改对象的字段值，即使是私有的。这是通过Field类的get()和set()方法完成的。</p><hr><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span><strong>优点</strong></span></a></h3><p><strong>灵活性和动态性</strong>：反射允许程序在运行时动态地加载类、创建对象、调用方法和访问字段。这样可以根据实际需求（如配置文件、用户输入、注解等）动态地适应和扩展程序的行为，显著提高了系统的灵活性和适应性。</p><p><strong>框架开发的基础</strong>：许多现代 Java 框架（如 Spring、Hibernate、MyBatis）都大量使用反射来实现依赖注入（DI）、面向切面编程（AOP）、对象关系映射（ORM）、注解处理等核心功能。</p><p><strong>解耦合和通用性</strong>：通过反射，可以编写更通用、可重用和高度解耦的代码，降低模块之间的依赖。例如，可以通过反射实现通用的对象拷贝、序列化、Bean 工具等。</p><hr><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span><strong>缺点</strong></span></a></h3><p><strong>性能开销</strong>：反射操作通常比直接代码调用要慢。因为涉及到动态类型解析、方法查找以及 JIT 编译器的优化受限等因素。不过，对于大多数框架场景，这种性能损耗通常是可以接受的，或者框架本身会做一些缓存优化。</p><p><strong>安全性问题</strong>：反射可以绕过 Java 语言的访问控制机制（如访问 <code>private</code> 字段和方法），破坏了封装性，可能导致数据泄露或程序被恶意篡改。此外，还可以绕过泛型检查，带来类型安全隐患。</p><p><strong>代码可读性和维护性</strong>：过度使用反射会使代码变得复杂、难以理解和调试。错误通常在运行时才会暴露，不像编译期错误那样容易发现。</p><hr><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span><strong>应用场景</strong></span></a></h3><p><strong>依赖注入与控制反转</strong>：以 Spring/Spring Boot 为代表的 IoC 框架，会在启动时扫描带有特定注解（如 <code>@Component</code>, <code>@Service</code>, <code>@Repository</code>, <code>@Controller</code>）的类，利用反射实例化对象（Bean），并通过反射注入依赖（如 <code>@Autowired</code>、构造器注入等）</p><p><strong>注解处理</strong>：框架通过反射检查类、方法、字段上有没有特定的注解，然后根据注解信息执行相应的逻辑。比如，看到 <code>@Value</code>，就用反射读取注解内容，去配置文件找对应的值，再用反射把值设置给字段。</p><p><strong>动态代理与 AOP</strong>：动态代理是实现 AOP 的常用手段。在运行时创建一个代理对象，这个对象对外看起来跟原对象一样，但它在方法调用的过程中，会先通过反射拿到你要调用的方法，然后可以在调用前后插入一些逻辑，比如打印日志，最后再通过反射去真正调用目标方法。</p><p><strong>对象关系映射（ORM）</strong>：像 MyBatis这种框架通过反射获取 Java 类的属性列表，然后把查询结果按名字或配置对应起来，再用反射调用 setter 或直接修改字段值。反过来，保存对象到数据库时，也是用反射读取属性值来拼 SQL。</p><hr><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><p><code>Annotation</code> （注解） 是 Java5 开始引入的新特性，主要用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。</p><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>注解本质是一个继承了Annotation的特殊接口，其具体实现类是Java运行时生成的动态代理类。</p><p>我们通过反射获取注解时，返回的是Java运行时生成的动态代理对象。通过代理对象调用自定义注解的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会从memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。</p><hr><h3 id="注解解析" tabindex="-1"><a class="header-anchor" href="#注解解析"><span><strong>注解解析</strong></span></a></h3><p><strong>注解解析的两种核心机制</strong></p><p>1，<strong>运行时解析</strong>依赖Java反射API，JVM在类加载阶段会将注解信息存储在Class对象的AnnotationData结构中，后续通过getAnnotation()等反射方法读取。Spring框架对此进行了深度优化，比如使用ASM字节码技术绕过类加载直接读取注解，并通过缓存机制避免重复解析带来的性能损耗。</p><p>2.<strong>编译时解析</strong>则遵循JSR 269规范，通过注解处理器在javac编译阶段介入。注解处理器继承AbstractProcessor基类，可以扫描分析源代码中的注解信息并生成新代码或编译错误。Lombok就是典型代表，它通过直接修改AST语法树实现在编译期间自动生成getter/setter等方法。</p><hr><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>作用域</span></a></h3><p>注解的作用域（Scope）指的是注解可以应用在哪些程序元素上，例如类、方法、字段等。</p><p>1，<strong>类级别作用域</strong>：用于描述类的注解，通常放置在类定义的上面，可以用来指定类的一些属性，如类的访问级别、继承关系、注释等。</p><p>2，<strong>方法级别作用域</strong>：用于描述方法的注解，通常放置在方法定义的上面，可以用来指定方法的一些属性，如方法的访问级别、返回值类型、异常类型、注释等。</p><p>3，<strong>字段级别作用域</strong>：用于描述字段的注解，通常放置在字段定义的上面，可以用来指定字段的一些属性，如字段的访问级别、默认值、注释等。</p><p>4，除了这三种作用域，Java还提供了其他一些注解作用域，例如构造函数作用域和局部变量作用域。这些注解作用域可以用来对构造函数和局部变量进行描述和注释。</p><hr><h2 id="spi" tabindex="-1"><a class="header-anchor" href="#spi"><span>SPI*</span></a></h2><p>是 Java 提供的一种服务发现机制。</p><p>它的作用是让我们可以只依赖接口，具体的实现类由第三方提供，并且在运行时动态加载，不需要写死。比如 JDBC 加载数据库驱动，底层就是用 SPI 机制实现的，Java 会自动去找配置好的驱动类并加载它们。</p><p>通俗讲，SPI 就像是插件机制，我只负责定义接口，谁来实现、怎么实现，运行时系统自己去找，这样就实现了解耦和扩展。</p><p><strong>优缺点</strong>：提高接口设计的灵活性；</p><p>效率低：需要遍历加载所有的实现类，不能做到按需加载</p><p>并发问题：当多个 <code>ServiceLoader</code> 同时 <code>load</code> 时，会有并发问题。</p><h3 id="和api的区别" tabindex="-1"><a class="header-anchor" href="#和api的区别"><span><strong>和API的区别</strong></span></a></h3><p>API 是“我去用别人”，它是别人定义好一套功能接口，我作为调用者去使用，比如我们常用的 List、HttpClient 这些都是 API。 而 SPI 是“别人来接我”，我定义一套接口，让第三方去实现，然后在运行时由系统动态加载这些实现类，比如 JDBC 加载数据库驱动，就是通过 SPI 实现的。</p><blockquote><p>API是“用户”使用外卖平台给你提供的“点餐功能”、“下单功能”、“付款功能”</p><p>SPI是平台方想让商家来入驻，就告诉商家：“只要你能送外卖，就来报名，遵守我的规则（接口）。” 商家来实现你的送外卖接口。<strong>平台在运行时会去找这些商家来派单。</strong></p></blockquote><h3 id="serviceloader" tabindex="-1"><a class="header-anchor" href="#serviceloader"><span><strong>ServiceLoader</strong></span></a></h3><p><code>ServiceLoader</code> 是 Java 提供的一个工具类，用来实现 <strong>SPI 机制的服务发现</strong>。 它的作用就是在运行时根据接口，<strong>自动加载并实例化配置好的实现类</strong>，也就是说我只依赖接口，不需要手动 new 实现类，系统会自动去找“谁实现了这个接口”。</p><p>常见的场景比如 JDBC 驱动加载，Java 就是用 <code>ServiceLoader</code> 去找实现了 <code>java.sql.Driver</code> 的类，从而实现驱动的自动注册。</p><h1 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h1><h2 id="vs-equals" tabindex="-1"><a class="header-anchor" href="#vs-equals"><span>== vs equals</span></a></h2><p>==是一个运算符，对于基本数据类型，表示对比值是否相等，对于引用数据类型，表示对比是否指向同一个对象，也就是在堆内存的内存地址是否相同</p><p>而equals是<code>Obejct</code>类的方法，默认实现就是<code>return this == obj</code>，也就是比较引用的地址，但是<code>Object</code>作为所有类的直接或间接的父类，有些标准类都是重写了<code>equals</code>方法的，比如<code>String</code>，<code>Integer</code>，用来比较对象的内容是否相等。</p><p>但是需要注意的一点是<code>Integer a = 127; Integer b = 127;</code> 比较时 <code>a == b</code> 为 <code>true</code>，因为 Java 会缓存 <code>-128</code> 到 <code>127</code> 之间的整数对象，也就是包装类的缓存机制。</p><h2 id="jmm-vs-jvm" tabindex="-1"><a class="header-anchor" href="#jmm-vs-jvm"><span>JMM vs JVM</span></a></h2><p><strong>JVM</strong> 是一个具体的虚拟机，它负责在特定的硬件和操作系统上运行 Java 程序。它包括内存管理、垃圾回收、执行字节码等多个方面。</p><p><strong>JMM</strong> 是 Java 语言的内存模型规范，它并不具体描述实现，而是提供了多线程编程中如何访问共享变量的规范，主要目的是确保并发编程中的线程安全。MM 主要定义了 <strong>内存可见性</strong>、<strong>原子性</strong> 和 <strong>有序性</strong> 三个方面的规则。</p><h2 id="值传递vs引用传递" tabindex="-1"><a class="header-anchor" href="#值传递vs引用传递"><span>值传递vs引用传递</span></a></h2><p>Java 是值传递</p><p><strong>方法调用时，传递的是变量中存储的值的副本</strong>，而不是变量本身。</p><p>基本类型：传的是值的拷贝，方法里怎么改都不会影响原来的。</p><p>引用类型：传的是引用地址的拷贝，能通过这个地址修改对象的内容，但不能改原来的引用指向。</p><h2 id="深拷贝-浅拷贝-引用拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝-浅拷贝-引用拷贝"><span>深拷贝，浅拷贝，引用拷贝</span></a></h2><p>浅拷贝仅复制对象本身及其中基本类型字段，对于引用类型字段则复制引用地址，新旧对象共享同一子对象。</p><p>深拷贝会递归复制对象及其所有引用字段指向的整个对象图，生成完全独立的副本。</p><p>引用拷贝是最基础的对象地址复制，仅产生指向原对象的新引用变量</p><hr><h3 id="实现深拷贝的三种方式" tabindex="-1"><a class="header-anchor" href="#实现深拷贝的三种方式"><span>实现深拷贝的三种方式</span></a></h3><p>在 Java 中，实现对象深拷贝的方法有以下几种主要方式：</p><p>1，<strong>实现 Cloneable 接口并重写 clone() 方法</strong>：在 clone() 方法中，通过<strong>递归</strong>克隆引用类型字段来实现深拷贝。(默认的<code>clone()</code>是浅拷贝，深拷贝需要手动实现)</p><p>2，<strong>使用序列化和反序列化</strong>：通过将对象序列化为字节流，再从字节流反序列化为对象来实现深拷贝。</p><p>3，<strong>手动递归复制</strong>：手动递归复制对象及其引用类型字段。适用于对象结构复杂度不高的情况。</p><hr><h3 id="深拷贝-vs-浅拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝-vs-浅拷贝"><span>深拷贝 vs 浅拷贝</span></a></h3><p>浅拷贝仅复制对象本身及其中基本类型字段，对于引用类型字段则复制引用地址，新旧对象共享同一子对象。深拷贝会递归复制对象及其所有引用字段指向的整个对象图，生成完全独立的副本。</p><p>浅拷贝后新旧对象的引用类型字段指向同一个实例，修改任一对象的List都会影响另一个。深拷贝会创建全新的List实例及其所有元素副本，新旧对象完全隔离。</p><hr><h3 id="浅拷贝-vs-引用拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝-vs-引用拷贝"><span>浅拷贝 vs 引用拷贝</span></a></h3><p>引用拷贝是最基础的对象地址复制，仅产生指向原对象的新引用变量。浅拷贝是对象层级的复制，创建新对象实例但对引用类型字段仅复制指针。</p><p>执行引用拷贝后，两个变量完全共享同一对象实体，任何修改都是对原对象的直接操作。而浅拷贝会创建新对象容器，虽然其引用字段与原对象共享子对象，但对象本身是独立的，修改新对象的<strong>非引用字段</strong>不会影响原对象。</p><hr><h2 id="序列化-反序列化" tabindex="-1"><a class="header-anchor" href="#序列化-反序列化"><span>序列化，反序列化</span></a></h2><p>序列化就是把 Java 对象转换成字节流的过程，方便把对象保存到磁盘、或者通过网络传输。反序列化就是把字节流恢复成原来的 Java 对象。</p><p><strong>常见应用场景</strong>：网络传输；存储到文件；存储到数据库；存储到内存；</p><p><strong>OSI 七层协议模型中表示层做的事情主要就是对应用层的用户数据进行处理转换为二进制流，所以序列化协议对应于 TCP/IP 4 层模型的TCP/IP 协议应用层。</strong></p><p>对于不想进行序列化的变量，使用 <strong><code>transient</code></strong> 关键字修饰</p><p><strong>常见的序列化协议</strong>：比较常用的序列化协议有 Hessian、Kryo、Protobuf、ProtoStuff，这些都是基于二进制的序列化协议。</p><p>像 JSON 和 XML 这种属于文本类序列化方式。虽然可读性比较好，但是性能较差，一般不会选择。</p><h3 id="jdk-自带的序列化方式" tabindex="-1"><a class="header-anchor" href="#jdk-自带的序列化方式"><span>JDK 自带的序列化方式</span></a></h3><p>JDK 自带的序列化方式一般不会用 ，因为序列化效率低并且存在安全问题。</p><p><strong>为什么不推荐使用 JDK 自带的序列化？</strong></p><ul><li><strong>无法跨语言</strong>： Java 序列化目前只适用基于 Java 语言实现的框架，其它语言大部分都没有使用 Java 的序列化框架，也没有实现 Java 序列化这套协议。因此，如果是两个基于不同语言编写的应用程序相互通信，则无法实现两个应用服务之间传输对象的序列化与反序列化。</li><li><strong>容易被攻击</strong>：Java 序列化是不安全的，我们知道对象是通过在 ObjectInputStream 上调用 readObject() 方法进行反序列化的，这个方法其实是一个神奇的构造器，它可以将类路径上几乎所有实现了 Serializable 接口的对象都实例化。这也就意味着，在反序列化字节流的过程中，该方法可以执行任意类型的代码，这是非常危险的。</li><li><strong>序列化后的流太大</strong>：序列化后的二进制流大小能体现序列化的性能。序列化后的二进制数组越大，占用的存储空间就越多，存储硬件的成本就越高。如果我们是进行网络传输，则占用的带宽就更多，这时就会影响到系统的吞吐量。</li></ul><p>我会考虑用主流序列化框架，比如FastJson、Protobuf来替代Java 序列化。</p><hr><h3 id="序列化如何实现" tabindex="-1"><a class="header-anchor" href="#序列化如何实现"><span>序列化如何实现</span></a></h3><p>在 Java 中，将对象转换为二进制字节流的过程叫做<strong>序列化</strong>，主要是为了实现对象的持久化存储或跨网络传输。</p><p>具体实现方式是：<strong>对象必须实现 <code>java.io.Serializable</code> 接口</strong>，这只是一个标记接口，用来告诉 JVM 这个类的对象是可以被序列化的。然后，使用 Java 提供的 <code>ObjectOutputStream</code> 将对象写出为字节流。</p><p>序列化的本质，是将对象的状态（即成员变量的值）转换为一组可以保存或传输的字节信息，写入文件或通过网络发送。接收端则通过反序列化将字节流还原为对象。</p><p>需要注意的是，序列化不会保存 <code>static</code> 和 <code>transient</code> 修饰的字段，它们在反序列化时会被忽略。</p><hr><h1 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h1><h2 id="如何将对象从一个jvm转移到另一个jvm时" tabindex="-1"><a class="header-anchor" href="#如何将对象从一个jvm转移到另一个jvm时"><span>如何将对象从一个JVM转移到另一个JVM时</span></a></h2><p><strong>对象跨JVM转移的核心方法</strong></p><ol><li><strong>对象序列化与反序列化</strong> 这是最常用的跨JVM对象传输方案。通过实现Serializable接口，可以将对象转换为字节序列，然后通过任意传输机制（如网络、文件）发送到另一个JVM后重建。Java原生序列化虽然简单，但存在性能较低、安全性等问题。实际开发中更推荐使用JSON、Protocol Buffers等跨语言序列化方案。</li><li><strong>RPC框架调用</strong> 在分布式系统中，通过Dubbo、gRPC等RPC框架可以实现透明的对象传输。框架内部会处理序列化和网络通信细节，开发者只需像调用本地方法一样使用远程对象。这种方式适合生产环境，但需要引入额外依赖。</li><li><strong>分布式缓存/消息队列</strong> 使用Redis、Memcached等分布式缓存作为中转，或通过Kafka、RabbitMQ等消息队列传递序列化后的对象。这种方案具有松耦合特性，适合异步场景。</li><li><strong>Java远程方法调用(RMI)</strong> Java原生提供的RMI技术允许直接跨JVM调用方法，底层自动处理对象序列化和网络传输。但由于其强耦合性和防火墙穿透问题，现代项目中已较少使用。</li></ol><hr><h2 id="学生类按照分数排序再按学号排序" tabindex="-1"><a class="header-anchor" href="#学生类按照分数排序再按学号排序"><span>学生类按照分数排序再按学号排序</span></a></h2><p>可以使用Comparable接口来实现按照分数排序，再按照学号排序。首先在学生类中实现Comparable接口，并重写compareTo方法，然后在compareTo方法中实现按照分数排序和按照学号排序的逻辑。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 实现 Comparable 接口，自定义排序逻辑</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> compareTo</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Student</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> other) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compare</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">score</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 分数降序</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compare</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 学号升序</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//也可以使用 Comparator 的方式排序</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Comparator</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">comparingInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Student</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">getScore).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">reversed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">thenComparingInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Student</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">getId));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h1><h2 id="hashcode" tabindex="-1"><a class="header-anchor" href="#hashcode"><span>hashCode()</span></a></h2><p><code>hashCode()</code> 的作用是获取哈希码（<code>int</code> 整数），也称为散列码。这个哈希码的作用是确定该对象在哈希表中的索引位置。</p><p><code>hashCode()</code> 定义在 JDK 的 <code>Object</code> 类中，这就意味着 Java 中的任何类都包含有 <code>hashCode()</code> 函数。另外需要注意的是：<code>Object</code> 的 <code>hashCode()</code> 方法是本地方法，也就是用 C 语言或 C++ 实现的。</p><p>**为什么重写 equals() 时必须重写 hashCode() 方法？**Java 为了保证集合类在处理对象时能够正常工作，规定的一对规则：<code>equals()</code> 判断对象相等时，两个相等的对象必须返回相同的 <code>hashCode()</code> 值。</p><hr><p><strong>重写 equals() 时没有重写 hashCode() 方法的话，使用 HashMap 可能会出现什么问题?</strong></p><p>1, <strong>相同的键无法正确查找</strong>:get失败，查不到值。你往 <code>HashMap</code> 里放了一个对象当 key，然后你用另一个“内容一样”的对象去查，发现返回了 <code>null</code>，查不到。</p><p>2，<strong>无法正确覆盖旧的键值对</strong>：put 不会覆盖，存重复 key。你往 <code>HashMap</code> 里放了一个 key，然后又放了一个“内容一模一样”的 key，理论上应该覆盖旧值，结果没覆盖，变成了两个 key 各自存在。</p><hr><h2 id="可变长参数" tabindex="-1"><a class="header-anchor" href="#可变长参数"><span>可变长参数</span></a></h2><p>从 <code>Java5 </code>开始，Java 支持定义可变长参数，它允许在方法中传递可变数量的参数来简化方法参数。</p><p>遇到方法重载的情况会优先匹配固定参数，因为固定参数的方法匹配度更高。</p><p>Java 的可变参数编译后实际会被转换成一个数组，从编译后生成的 <code>class</code>文件就可以看出。</p><h2 id="语法糖" tabindex="-1"><a class="header-anchor" href="#语法糖"><span>语法糖</span></a></h2><p>语法糖就是 Java 提供的一些语法层面的简化写法，让代码更简洁、更好读，但最终编译出来还是普通的底层代码。语法糖的存在主要是方便开发人员使用。但其实， Java 虚拟机并不支持这些语法糖，在编译阶段就会被还原成简单的基础语法结构，这个过程就是解语法糖。</p><p>Java 中最常用的语法糖主要有泛型、自动拆装箱、变长参数、枚举、内部类、增强 for 循环、try-with-resources 语法、lambda 表达式等。</p><ul><li><strong>switch 支持 String 与枚举</strong>：本质上 String 会被转成 <code>hashCode + equals</code>，枚举会被转成 <code>ordinal()</code> 索引，编译器自动完成了这些逻辑。</li><li><strong>泛型</strong>：编译器在编译期做类型检查、自动补上强转，运行期泛型信息被擦除，底层是原始类型操作（如 Object）。</li><li><strong>自动装拆箱</strong>：编译器在编译时会自动把基本类型和包装类互相转换，底层调用的是如 <code>Integer.valueOf()</code> 和 <code>intValue()</code> 这些方法。</li><li><strong>可变长参数</strong>：方法传任意多个参数，编译器会把它转换成一个数组参数来处理。</li><li><strong>枚举</strong>：编译器会将 <code>enum</code> 类转化为一个普通的类，并生成所有的常量、构造方法以及辅助方法（<code>values()</code>、<code>valueOf()</code> 等），这让我们可以方便地使用枚举而不需要手动编写大量的常量和方法。</li><li><strong>内部类</strong>：内部类、局部内部类、匿名内部类 都是语法糖。编译器会把它们拆成独立的类文件，并加上必要的外部类引用或构造函数参数。比如成员内部类会持有外部类的引用，匿名类会生成自动命名的类，局部变量也会被处理为 final 拷贝传入。</li><li><strong>增强 for 循环</strong>：编译器会把它转成普通的 <code>Iterator</code> 遍历（如果是集合）或下标访问（如果是数组）。</li><li><strong>try-with-resources</strong>：用来自动关闭资源，编译器会自动帮你加上 finally 和 close() 调用。</li><li><strong>lambda 表达式</strong>：用来简化函数式接口的写法。底层要么编译成匿名内部类，要么使用 <code>invokedynamic</code> 和 <code>LambdaMetafactory</code> 在运行时动态生成函数对象，<strong>本质仍然是函数式接口的实现类实例</strong>。</li><li></li></ul><h2 id="值传递" tabindex="-1"><a class="header-anchor" href="#值传递"><span>值传递</span></a></h2><p>Java 只有值传递，没有引用传递。</p><p>不管是基本类型还是引用类型，方法调用时传进去的都是“值”的拷贝。区别在于：</p><ul><li>传基本类型时，传的是变量的值本身；</li><li>传引用类型时，传的是“对象引用”的拷贝，也就是指向对象的地址。</li></ul><p>所以你可以通过这个引用修改对象的内容，但<strong>不能让它指向另一个新对象</strong>，因为这个引用本身也是拷贝，改不了外面的引用地址。</p><h2 id="移位运算符" tabindex="-1"><a class="header-anchor" href="#移位运算符"><span>移位运算符</span></a></h2><h3 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h3><p>1.高效：移位运算符直接对应于处理器的移位指令。现代处理器具有专门的硬件指令来执行这些移位操作，这些指令通常在一个时钟周期内完成。相比之下，乘法和除法等算术运算在硬件层面上需要更多的时钟周期来完成。</p><p>2.节省内存：通过移位操作，可以使用一个整数（如 <code>int</code> 或 <code>long</code>）来存储多个布尔值或标志位，从而节省内存。</p><h3 id="常用场景" tabindex="-1"><a class="header-anchor" href="#常用场景"><span>常用场景</span></a></h3><p>1.<strong>快速乘以或除以 2 的幂次方</strong>：a &lt;&lt; n 即 <code>a * 2ⁿ</code>；a &gt;&gt; n 即 <code>a / 2ⁿ</code>（向下取整）；&gt;&gt;&gt; 即 无符号右移，忽略符号位，空位都以 0 补齐。</p><p>2.<strong>位字段管理</strong>：例如存储和操作多个布尔值。</p><p>3.<strong>哈希算法和加密解密</strong>：通过移位和与、或等操作来混淆数据</p><p>4.<strong>数据压缩</strong>：例如霍夫曼编码通过移位运算符可以快速处理和操作二进制数据，以生成紧凑的压缩格式。</p><p>5.<strong>数据校验</strong>：例如 CRC（循环冗余校验）通过移位和多项式除法生成和校验数据完整性。</p><p>6.<strong>内存对齐</strong>：通过移位操作，可以轻松计算和调整数据的对齐地址。</p><p>由于 <code>double</code>，<code>float</code> 在二进制中的表现比较特殊，因此不能来进行移位操作。移位操作符实际上支持的类型只有<code>int</code>和<code>long</code>，编译器在对<code>short</code>、<code>byte</code>、<code>char</code>类型进行移位前，都会将其转换为<code>int</code>类型再操作。</p><p>**如果移位的位数超过数值所占有的位数会怎样？**当 int 类型左移/右移位数大于等于 32 位操作时，会先求余（%）后再进行左移/右移操作。实际执行的是 <code>位数 % 数据类型位宽</code>。</p><h2 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法"><span>构造方法</span></a></h2><p>构造方法是一种特殊的方法，主要作用是完成对象的初始化工作。如果一个类没有声明构造方法，也会有默认的不带参数的构造方法。如果我们自己添加了类的构造方法（无论是否有参），Java 就不会添加默认的无参数的构造方法了。</p><p>构造方法具有以下特点：<strong>名称与类名相同</strong>，<strong>没有返回值</strong>，<strong>自动执行</strong>。不能被重写，可以被重载。</p><h2 id="native方法" tabindex="-1"><a class="header-anchor" href="#native方法"><span>Native方法</span></a></h2><p>在 Java 中，<code>native</code> 方法是<strong>用非 Java 语言实现的方法</strong>，通常是用 C 或 C++ 编写的。它通过关键字 <code>native</code> 声明，表示该方法在 Java 中没有具体实现，而是由本地代码在操作系统层面实现的。</p><p>Java 通过 <strong>JNI（Java Native Interface）机制</strong> 调用这些本地方法。主要用于两个场景：一是访问操作系统底层功能，比如硬件、系统调用等；二是与已有的本地库（如 C/C++ 库）集成，提高性能或复用现有代码</p>`,498)]))}const d=i(e,[["render",h]]),o=JSON.parse('{"path":"/1.Note/1.Java%20_%20CS/Java.html","title":"Java","lang":"en-US","frontmatter":{"title":"Java","order":1},"git":{"createdTime":1754567385000,"updatedTime":1754567385000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":63.54,"words":19061},"filePathRelative":"1.Note/1.Java & CS/Java.md"}');export{d as comp,o as data};
