import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as t}from"./app-DhFSNDga.js";const e={};function h(l,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="java基础" tabindex="-1"><a class="header-anchor" href="#java基础"><span>Java基础</span></a></h1><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h3><table><thead><tr><th>类型</th><th>占用内存</th><th>默认值</th><th>范围/说明</th></tr></thead><tbody><tr><td><code>byte</code></td><td>1 字节</td><td>0</td><td>-128 ~ 127</td></tr><tr><td><code>short</code></td><td>2 字节</td><td>0</td><td>-32,768 ~ 32,767</td></tr><tr><td><code>int</code></td><td>4 字节</td><td>0</td><td>-2³¹ ~ 2³¹-1</td></tr><tr><td><code>long</code></td><td>8 字节</td><td>0L</td><td>-2⁶³ ~ 2⁶³-1</td></tr><tr><td><code>float</code></td><td>4 字节</td><td>0.0f</td><td>约 ±3.4e38，7 位精度</td></tr><tr><td><code>double</code></td><td>8 字节</td><td>0.0d</td><td>约 ±1.8e308，15 位精度</td></tr><tr><td><code>char</code></td><td>2 字节</td><td>&#39;\\u0000&#39;</td><td>单个 Unicode 字符（0 ~ 65535）</td></tr><tr><td><code>boolean</code></td><td>1 位*</td><td>false</td><td>true / false（JVM 中通常按 1 字节处理）</td></tr></tbody></table><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h3><p><code>String</code> 是不可变的。</p><p><code>StringBuilder</code> 与 <code>StringBuffer</code> 都继承自 <code>AbstractStringBuilder</code> 类，在 <code>AbstractStringBuilder</code> 中也是使用字符数组保存字符串，不过没有使用 <code>final</code> 和 <code>private</code> 关键字修饰，最关键的是这个 <code>AbstractStringBuilder</code> 类还提供了很多修改字符串的方法比如 <code>append</code> 方法。</p><p><code>String</code> 中的对象是不可变的，也就可以理解为常量，线程安全。<code>StringBuffer</code> 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。<code>StringBuilder</code> 并没有对方法进行加同步锁，所以是非线程安全的。</p><p>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。<code>StringBuilder</code>和<code>StringBuffer</code> 每次都会对对象本身进行操作，但是<code>StringBuffer</code> 有线程安全的开销。</p><p><strong>String为什么不可变？</strong></p><p>首先在<code>Java</code>中，<code>final</code>修饰的引用数据类型不能再指向其他对象，而<code>string</code>的字段value底层存储数据的形式就是字符数组，这个数组被final修饰，并且还是私有的，其次string这个类本身也是被final修饰的，那么它就不能被继承，你就不能通过子类来修改，其次，<code>stringbuilder</code>和<code>stringbuffer</code>继承了<code>abstractstringbuilder</code>类，有append等修改字符串的方法，而string没有继承，自然也没有这种方法，这个原因也体现了<code>OOP</code>的封装特性，所以综上所述，<code>string</code>是不可修改的。</p><p>因为不可变性，<code>String</code> 是线程安全的，并且它可以作为常量存储在字符串池中，从而节省内存。</p><p>**String的 “ + ” **：字符串对象通过“+”的字符串拼接方式，实际上是通过 <code>StringBuilder</code> 调用 <code>append()</code> 方法实现的，拼接完成之后调用 <code>toString()</code> 得到一个 <code>String</code> 对象 。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(s)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str1).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str2).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>**String的 “ equals ” **：检查是否是同一个对象; 检查传入的对象是否是 String 类型; 检查长度是否相等; for循环逐个字符比较。</p><p>**字符串常量池 : ** JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。</p><p>当你使用 <code>new String(&quot;abc&quot;)</code> 时，实际上会发生两个步骤：</p><ol><li><strong>首先，字符串字面量 <code>&quot;abc&quot;</code> 会被检查是否在字符串常量池中</strong>。如果 <code>&quot;abc&quot;</code> 不在常量池中，它会被添加进去；如果已经在常量池中，直接复用常量池中的 <code>&quot;abc&quot;</code>。</li><li><strong>然后，<code>new String(&quot;abc&quot;)</code> 会创建一个新的 <code>String</code> 对象</strong>，这个新的对象会指向常量池中的 <code>&quot;abc&quot;</code> 字符串。虽然它和常量池中的 <code>&quot;abc&quot;</code> 内容一样，但它是 <strong>一个新的对象</strong>（存储在堆内存中）。</li></ol><p>所以，<code>new String(&quot;abc&quot;)</code> 实际上会<strong>创建两个 <code>&quot;abc&quot;</code></strong>：一个是存储在字符串常量池中的 <code>&quot;abc&quot;</code>（如果之前没有的话）。另一个是存储在堆内存中的新 <code>String</code> 对象。</p><blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//字符串常量池</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &quot;hello&quot; 被加入常量池</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // s1 和 s2 引用的是同一个对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 通过 new 创建，指向堆内存，不在常量池中</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s4 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // s4 仍然指向常量池中的 &quot;hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s5 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> s1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// s5 仍然指向常量池中的 &quot;hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//intern() 方法的作用是让你获得常量池中的字符串，如果该字符串已经存在于常量池中，直接返回该对象；如果不存在，则将它添加到常量池。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//包装类的缓存机制</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 会从缓存池获取</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 同样会从缓存池获取，i1 和 i2 指向同一个对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 不会从缓存池获取，而是新建对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i4 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // i3 和 i4 不是同一个对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="bigdecimal" tabindex="-1"><a class="header-anchor" href="#bigdecimal"><span>BigDecimal</span></a></h3><p>浮点数运算进度丢失是因为计算机二进制存储数字，但是有些小数不能在有限位数里转化成二进制，所以就需要截断，导致精度丢失。</p><p>使用<code>BigDecimal</code>: 用字符串的形式存储小数位，以十进制方式精确表示每一位，适合做高精度运算，比如金额计算。</p><p><strong>常见方法</strong>：</p><ul><li><strong>创建</strong>：推荐使用它的<code>BigDecimal(String val)</code>构造方法或者 <code>BigDecimal.valueOf(double val)</code> 静态方法来创建对象。不能直接把double转化为BigDecimal对象，因为 double 是不精确的二进制浮点数，直接用它构造 <code>BigDecimal</code> 会把那些 误差也带进去，导致结果不准确。</li><li><strong>加减乘除</strong>：<code>add</code> 方法用于将两个 <code>BigDecimal</code> 对象相加，<code>subtract</code> 方法用于将两个 <code>BigDecimal</code> 对象相减。<code>multiply</code> 方法用于将两个 <code>BigDecimal</code> 对象相乘，<code>divide</code> 方法用于将两个 <code>BigDecimal</code> 对象相除</li></ul><blockquote><p>使用 <code>divide</code> 方法的时候尽量使用 3 个参数版本，并且<code>RoundingMode</code> 不要选择 <code>UNNECESSARY</code>，否则很可能会遇到 <code>ArithmeticException</code>（无法除尽出现无限循环小数的时候），其中 <code>scale</code> 表示要保留几位小数，<code>roundingMode</code> 代表保留规则。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">divide</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(b));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 无法除尽，抛出 ArithmeticException 异常</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">divide</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(b, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RoundingMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">HALF_UP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1.11</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ul><li><strong>大小比较</strong>：<code>a.compareTo(b)</code> : 返回 -1 表示 <code>a</code> 小于 <code>b</code>，0 表示 <code>a</code> 等于 <code>b</code> ， 1 表示 <code>a</code> 大于 <code>b</code>。<code>equals()</code> 方法不仅仅会比较值的大小（value）还会比较精度（scale），而 <code>compareTo()</code> 方法比较的时候会忽略精度。</li><li><strong>保留几位小数</strong>：通过 <code>setScale</code>方法设置保留几位小数以及保留规则。</li></ul><h3 id="biginteger" tabindex="-1"><a class="header-anchor" href="#biginteger"><span>BigInteger</span></a></h3><p><code>BigInteger</code> 内部使用 <code>int[]</code> 数组来存储任意大小的整形数据。可以用来存储超过long整型的数据</p><p>相对于常规整数类型的运算来说，<code>BigInteger</code> 运算的效率会相对较低。</p><h2 id="包装类型" tabindex="-1"><a class="header-anchor" href="#包装类型"><span>包装类型</span></a></h2><h3 id="包装类和基本数据类型的区别" tabindex="-1"><a class="header-anchor" href="#包装类和基本数据类型的区别"><span>包装类和基本数据类型的区别</span></a></h3><p>包装类型是<code>java</code>为每种基本数据类型提供的对应的类对象类型，让基本类型具备对象的特性。</p><p>基本类型是<code>Java</code>最原始的数据类型，不是对象，操作效率高，内存占用小，如果是局部变量一般存储在栈内存，但是如果是成员变量就存储在堆<code>/方法区/元空间(static修饰的静态变量)</code>。</p><p>包装类型是基本类型的类，是对象，可以用于集合，支持泛型，引用可能在栈中，实际存储在堆中，对于一些比如说Integer范围内的常量，<code>JVM</code>会缓存，也就是包装类型的缓存机制，存储在常量池或栈。</p><h3 id="包装类型的缓存机制" tabindex="-1"><a class="header-anchor" href="#包装类型的缓存机制"><span>包装类型的缓存机制</span></a></h3><p><code>JVM</code>会将常见的重复使用的对象进行复用，避免每次都创建新的对象，提高性能，减少内存使用。</p><p>比如Integer，<code>JVM</code>会缓存<code>-128到127</code>的整数。调用<code>Integer.valueOf(int)</code>的时候，如果传入的整数在这个范围，<code>JVM</code>就返回一个已经创建好的共享对象，而不是在创建一个新的Integer对象。Boolean类型<code>JVM</code>只会缓存true和false两个值。</p><h3 id="自动装箱与拆箱" tabindex="-1"><a class="header-anchor" href="#自动装箱与拆箱"><span>自动装箱与拆箱</span></a></h3><p><strong>自动装箱</strong>是将基本数据类型转换为其对应的包装类的过程，<strong>拆箱</strong>则是将包装类转换为基本数据类型的过程。这两个过程是由编译器自动完成的。装箱的时候<code>JVM</code>调用包装类的构造方法或 <code>valueOf()</code> 方法，拆箱时会通过 <code>xxxValue()</code> 方法（如 <code>Integer.intValue()</code>）获取基本数据类型的值。另外包装类的缓存机制会避免重复创建对象，提升性能。</p><p>但是频繁的装箱可能会导致性能问题，因为如果你的基本数据类型的大小超过了缓存机制的界限，那么就会不断产生新的对象，增加垃圾回收的压力。</p><h2 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字"><span>关键字</span></a></h2><h3 id="static" tabindex="-1"><a class="header-anchor" href="#static"><span>static</span></a></h3><p>在 Java 中，<code>static</code> 是一个非常基础的关键字，表示“静态的”，意思就是这个东西不依赖于对象，而是属于类本身。可以修饰静态变量，静态方法，静态代码块，静态内部类，接口的static方法（8+），接口中的变量默认都是static final的。</p><p><strong>在类中</strong>，<code>static</code> 方法是属于类的，可以通过类名直接调用，不需要实例化对象，也<strong>不能被重写</strong>，因为它不属于实例，不参与多态。</p><p><strong>在接口中（Java 8+）</strong>，允许定义 <code>static</code> 方法，<strong>只能通过接口名调用，不能被实现类继承或重写</strong>，这主要是为了给接口提供一些工具方法。</p><p>**静态变量有什么作用？**静态变量也就是被 <code>static</code> 关键字修饰的变量。它可以被类的所有实例共享，无论一个类创建了多少个对象，它们都共享同一份静态变量。好处就是：节省内存、共享数据、方便统一管理。</p><p><strong>静态方法为什么不能调用非静态成员?</strong></p><p>静态方法属于类而不是实例，而非静态成员属于对象（实例）。</p><p>静态方法在类加载时就可以访问，不依赖于类的具体实例。非静态成员只有在类的实例化对象存在时，才能访问。</p><p>静态方法没有<code>this</code>引用，不能访问与实例关联的成员。</p><h3 id="final" tabindex="-1"><a class="header-anchor" href="#final"><span>final</span></a></h3><p><code>final</code> 这个关键字在 Java 里主要是用来限制“修改”的，可以修饰变量、方法和类</p><p>如果修饰变量，基本数据类型就表示值不能再变了，引用数据类型表示这个引用不能再指向别的对象。</p><p>如果修饰方法，表示它不能被子类重写。</p><p>如果修饰类，表示不能被继承。</p><h3 id="static-final" tabindex="-1"><a class="header-anchor" href="#static-final"><span>static final</span></a></h3><p>组合在一起使用时表示这个变量是<strong>全局常量</strong>，在整个程序中只存在一份，值不能修改，是一种<strong>线程安全、全局唯一的只读变量</strong>。</p><h3 id="transient" tabindex="-1"><a class="header-anchor" href="#transient"><span>transient</span></a></h3><p><code>transient</code> 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 <code>transient</code> 修饰的变量值不会被持久化和恢复。</p><p>关于 <code>transient</code> 还有几点注意：</p><ul><li><code>transient</code> 只能修饰变量，不能修饰类和方法。</li><li><code>transient</code> 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 <code>int</code> 类型，那么反序列后结果就是 <code>0</code>。</li><li><code>static</code> 变量因为不属于任何对象(Object)，所以无论有没有 <code>transient</code> 关键字修饰，均不会被序列化。</li></ul><h2 id="unsafe类" tabindex="-1"><a class="header-anchor" href="#unsafe类"><span>Unsafe类*</span></a></h2><p><code>Unsafe</code> 是 Java 提供的一个<strong>底层工具类</strong>，放在 <code>sun.misc</code> 包里，平时不能直接访问。它提供了很多<strong>绕过 JVM 安全机制的操作</strong>，比如直接操作内存、对象实例化、CAS 原子操作等。</p><p>它的主要作用就是<strong>提升性能、实现并发底层原语</strong>。不过它比较危险，因为可以绕开 Java 的内存模型、类型安全等限制，一般只在底层框架或者 JDK 内部使用。</p><p>从 Java 9 开始，官方推荐使用 <code>VarHandle</code> 来替代 <code>Unsafe</code>，更加安全规范。</p><h2 id="新特性" tabindex="-1"><a class="header-anchor" href="#新特性"><span>新特性</span></a></h2><h1 id="面向对象编程" tabindex="-1"><a class="header-anchor" href="#面向对象编程"><span>面向对象编程</span></a></h1><h2 id="面向对象和面向过程的区别" tabindex="-1"><a class="header-anchor" href="#面向对象和面向过程的区别"><span>面向对象和面向过程的区别</span></a></h2><p>POP把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题。</p><p>OOP关注的是对象和它们之间的互动，每个对象负责自己的行为，程序通过“对象”来组织和管理。</p><p>相比较于 POP，OOP 开发的程序一般具有下面这些优点：</p><p><strong>易维护</strong>：由于良好的结构和封装性，OOP 程序通常更容易维护。</p><p><strong>易复用</strong>：通过继承和多态，OOP 设计使得代码更具复用性，方便扩展功能。</p><p><strong>易扩展</strong>：模块化设计使得系统扩展变得更加容易和灵活。</p><h2 id="oop的三大特性" tabindex="-1"><a class="header-anchor" href="#oop的三大特性"><span>OOP的三大特性</span></a></h2><p>首先OOP的三大特性分别是封装，继承，多态。</p><p>封装就是把数据和方法封装起来，隐藏内部的实现细节，外部只能通过提供的接口访问和修改数据，并且封装还提供了访问修饰符来控制权限，进一步增强了安全性和灵活性。它强调的是安全性和可维护性。</p><p>继承允许我们在已有类的基础上创建类，也就是子类继承父类的属性和方法，避免了代码的重复，提高了代码的复用性，它体现的是一个（is-a）的关系，存在耦合的问题，在实践中我们有”组合（has-a）优于继承“的设计思想。强调的是复用。</p><p>多态是指”一个接口，多种实现“，分为运行时多态和编译时多态，分别对应方法重写和方法重载，重写发生在子类和父类之间，子类重写父类的方法，要求方法名和参数和返回值类型都相同，在运行时根据对象的实际类型决定调用哪个方法；重载发生在同一个类，方法名相同，但是参数列表不同，返回值也能不同，在编译时根据参数列表决定调用哪个方法，常用于构造方法。多态让我们可以用统一的方式处理不同的对象，强调的是扩展性和灵活性。</p><p>另外还有一个特性叫做”抽象“，有时候也被成为第四大特性，它是前三个特性的基础，是对共性行为或特征的提取，主要有两种形式：接口和抽象类。接口主要用于对类的行为进行约束，强调”能做什么“，只能有常量和抽象方法，而抽象类是对特征的提取和抽象,主要用于代码复用，强调的是所属关系，可以有构造方法，成员变量，普通方法。一个类只能继承一个类（包括抽象类）。但一个类可以实现多个接口，一个接口也可以继承多个其他接口。</p><blockquote><p>Java 8 之前，接口中的方法默认是 <code>public abstract</code> ，也就是只能有方法声明。自 Java 8 起，可以在接口中定义 <code>default</code>（默认） 方法和 <code>static</code> （静态）方法。 自 Java 9 起，接口可以包含 <code>private</code> 方法。</p><p>抽象类可以包含抽象方法和非抽象方法。抽象方法没有方法体，必须在子类中实现。非抽象方法有具体实现，可以直接在抽象类中使用或在子类中重写。</p></blockquote><h2 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法"><span>构造方法</span></a></h2><p>构造方法是一种特殊的方法，主要作用是完成对象的初始化工作。如果一个类没有声明构造方法，也会有默认的不带参数的构造方法。如果我们自己添加了类的构造方法（无论是否有参），Java 就不会添加默认的无参数的构造方法了。</p><p>构造方法具有以下特点：<strong>名称与类名相同</strong>，<strong>没有返回值</strong>，<strong>自动执行</strong>。不能被重写，可以被重载。</p><h1 id="机制" tabindex="-1"><a class="header-anchor" href="#机制"><span>机制</span></a></h1><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h2><p>Java 的异常系统是为了处理程序运行时的异常情况，比如除以零、数组越界、空指针引用、文件不存在等等。这些情况如果不处理，可能会导致程序崩溃。</p><p>异常的根类是<code>Throwable</code>，下面分为两类：Error和Exception：</p><blockquote><p><strong>Throwable的常见方法有哪些</strong>：</p><p><code>String getMessage()</code>: 返回异常发生时的详细信息</p><p><code>String toString()</code>: 返回异常发生时的简要描述</p><p><code>String getLocalizedMessage()</code>: 返回异常对象的本地化信息。使用 <code>Throwable</code> 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 <code>getMessage()</code>返回的结果相同</p><p><code>void printStackTrace()</code>: 在控制台上打印 <code>Throwable</code> 对象封装的异常信息</p></blockquote><p>Error属于系统级的错误，通常是JVM层面的问题，属于严重错误。</p><p>Exception就是我们常见的异常，分为受检异常和非受检异常（也叫运行时异常），受检异常必须捕获处理或向上抛出，非受检异常不强制处理。</p><p>处理异常有三种机制：</p><ul><li><p><code>try-catch-finally</code> 块：<code>try</code>块用于捕获并处理异常，其后可接零个或多个 <code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个 <code>finally</code> 块。<code>catch</code>块用于处理 try 捕获到的异常。<code>finally</code> 块无论是否发生异常都会执行，常用于释放资源；</p><blockquote><p><strong>不要在 finally 语句块中使用 return!</strong> 当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略。这是因为 try 语句中的 return 返回值会先被暂存在一个本地变量中，当执行到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。</p></blockquote><blockquote><p>**什么情况下finally 中的代码不会被执行？**1，在 finally 之前虚拟机被终止运行；2，程序所在的线程死亡；3，关闭 CPU。</p></blockquote></li><li><p><code>throw</code>：用于手动抛出一个异常实例；</p></li><li><p><code>throws</code>：用于在方法签名中声明该方法可能抛出哪些异常，方便调用者进行处理。</p></li></ul><p><strong>异常的传播机制</strong>：如果一个方法抛出了异常而没有处理，就会沿着调用栈一直向上传递，直到被某一层捕获为止，如果始终没有被捕获，最终 JVM 会终止程序并打印异常堆栈。</p><p><strong>异常的使用注意事项</strong>：异常不能被定义为静态变量，否则会导致异常栈信息错乱； 抛出的异常信息一定要有意义，并且要更加具体准确的子类；</p><p><strong>try-with-resources</strong></p><p><strong><code>try-with-resources</code></strong> 是 Java 7 引入的一种语法，用来简化资源（比如文件、数据库连接、输入输出流等）的关闭操作。</p><p>就是在 <code>try()</code> 里声明一个可自动关闭的资源，<code>try</code> 代码块结束后**，**JVM 会自动帮你调用 <code>close()</code> 方法，不需要再写 <code>finally</code> 手动关闭。</p><p><strong>使用条件</strong>：资源类必须实现 <code>AutoCloseable</code> 接口（<code>Closeable</code> 也是它的子接口，比如 <code>FileInputStream</code>、<code>BufferedReader</code> 等）。</p><p><strong>优点</strong>：语法简洁；自动关闭资源，避免资源泄露；多个资源可以一起声明。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Scanner</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> scanner </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Scanner</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">))) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">scanner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">scanner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nextLine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FileNotFoundException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fnfe</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    fnfe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><p>泛型就是在定义类、接口或方法时，<strong>不指定具体的数据类型</strong>，而是用一个“占位符”（比如 <code>&lt;T&gt;</code>）来代替，<strong>等真正使用的时候再传入具体的类型</strong>。</p><p>泛型本质上是<strong>编译期的检查机制</strong>，运行时其实是<strong>擦除了类型信息</strong>，所以它是典型的语法糖。</p><p>好处呢一个是<strong>提高代码的通用性</strong>：可以写一次代码，适用于多种类型；<strong>增强类型安全</strong>：编译阶段就能检查类型，避免运行时出错；<strong>减少强制类型转换</strong>：不需要手动强转，代码更简洁安全。</p><h3 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式"><span><strong>使用方式</strong></span></a></h3><p>1，泛型类，比如集合框架、自定义容器、工具类；2，泛型接口；3，泛型方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//泛型接口</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Generator</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//泛型方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> E </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> printArray</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">( </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] inputArray )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ( </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> element </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> inputArray ){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;%s &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, element );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">     }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">     System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>静态方法不能用类外面那个 T（因为那时候 T 还没值）， 但可以自己在方法前写 <code>&lt;E&gt;</code>，来定义一个属于自己的泛型。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Box</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> normalMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 可以用T</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">       System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(value);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> staticMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ❌ 报错！不能用T</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       // T 是类上的泛型，但静态方法用不了</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> printArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">inputArray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ✅ 正确</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">       for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> element</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> inputArray) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">           System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(element);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>项目哪里用到了泛型？</strong>：</p><ul><li><p>自定义接口通用返回结果 <code>CommonResult&lt;T&gt;</code> 通过参数 <code>T</code> 可根据具体的返回类型动态指定结果的数据类型</p></li><li><p>定义 <code>Excel</code> 处理类 <code>ExcelUtil&lt;T&gt;</code> 用于动态指定 <code>Excel</code> 导出的数据类型</p></li><li><p>构建集合工具类（参考 <code>Collections</code> 中的 <code>sort</code>, <code>binarySearch</code> 方法）</p></li></ul><h3 id="泛型的坑" tabindex="-1"><a class="header-anchor" href="#泛型的坑"><span><strong>泛型的坑</strong>：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//泛型遇到重载-----报错，因为泛型擦除后一样</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GenericTypes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;invoke method(List&lt;String&gt; list)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;invoke method(List&lt;Integer&gt; list)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//泛型遇到 catch-----JVM 是无法区分两个异常类型MyException&lt;String&gt;和MyException&lt;Integer&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//泛型内包含静态变量-----GT&lt;Integer&gt;.var和GT&lt;String&gt;.var其实是一个变量</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StaticTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        GT</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gti</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        gti</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        GT</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">gts</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        gts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">gti</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//输出结果为：2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GT</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> var</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> nothing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h2><p>Java 反射 (Reflection) 是一种<strong>在程序运行时，动态地获取类的信息并操作类或对象（方法、属性）的能力</strong>。</p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span><strong>优点</strong>：</span></a></h3><p><strong>灵活性和动态性</strong>：反射允许程序在运行时动态地加载类、创建对象、调用方法和访问字段。这样可以根据实际需求（如配置文件、用户输入、注解等）动态地适应和扩展程序的行为，显著提高了系统的灵活性和适应性。</p><p><strong>框架开发的基础</strong>：许多现代 Java 框架（如 Spring、Hibernate、MyBatis）都大量使用反射来实现依赖注入（DI）、面向切面编程（AOP）、对象关系映射（ORM）、注解处理等核心功能。</p><p><strong>解耦合和通用性</strong>：通过反射，可以编写更通用、可重用和高度解耦的代码，降低模块之间的依赖。例如，可以通过反射实现通用的对象拷贝、序列化、Bean 工具等。</p><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span><strong>缺点</strong>：</span></a></h3><p><strong>性能开销</strong>：反射操作通常比直接代码调用要慢。因为涉及到动态类型解析、方法查找以及 JIT 编译器的优化受限等因素。不过，对于大多数框架场景，这种性能损耗通常是可以接受的，或者框架本身会做一些缓存优化。</p><p><strong>安全性问题</strong>：反射可以绕过 Java 语言的访问控制机制（如访问 <code>private</code> 字段和方法），破坏了封装性，可能导致数据泄露或程序被恶意篡改。此外，还可以绕过泛型检查，带来类型安全隐患。</p><p><strong>代码可读性和维护性</strong>：过度使用反射会使代码变得复杂、难以理解和调试。错误通常在运行时才会暴露，不像编译期错误那样容易发现。</p><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span><strong>应用场景</strong>：</span></a></h3><p><strong>依赖注入与控制反转</strong>：以 Spring/Spring Boot 为代表的 IoC 框架，会在启动时扫描带有特定注解（如 <code>@Component</code>, <code>@Service</code>, <code>@Repository</code>, <code>@Controller</code>）的类，利用反射实例化对象（Bean），并通过反射注入依赖（如 <code>@Autowired</code>、构造器注入等）</p><p><strong>注解处理</strong>：框架通过反射检查类、方法、字段上有没有特定的注解，然后根据注解信息执行相应的逻辑。比如，看到 <code>@Value</code>，就用反射读取注解内容，去配置文件找对应的值，再用反射把值设置给字段。</p><p><strong>动态代理与 AOP</strong>：动态代理是实现 AOP 的常用手段。在运行时创建一个代理对象，这个对象对外看起来跟原对象一样，但它在方法调用的过程中，会先通过反射拿到你要调用的方法，然后可以在调用前后插入一些逻辑，比如打印日志，最后再通过反射去真正调用目标方法。</p><p><strong>对象关系映射（ORM）</strong>：像 MyBatis这种框架通过反射获取 Java 类的属性列表，然后把查询结果按名字或配置对应起来，再用反射调用 setter 或直接修改字段值。反过来，保存对象到数据库时，也是用反射读取属性值来拼 SQL。</p><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><p><code>Annotation</code> （注解） 是 Java5 开始引入的新特性，主要用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。</p><p>注解本质是一个继承了<code>Annotation</code> 的特殊接口。</p><p><strong>解析方法</strong>：</p><p>注解只有被解析之后才会生效，常见的解析方法有两种：<strong>编译期直接扫描</strong>：编译器在编译 Java 代码的时候扫描对应的注解并处理，比如某个方法使用<code>@Override</code> 注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。<strong>运行期通过反射处理</strong>：像框架中自带的注解(比如 Spring 框架的 <code>@Value</code>、<code>@Component</code>)都是通过反射来进行处理的。</p><h2 id="spi" tabindex="-1"><a class="header-anchor" href="#spi"><span>SPI*</span></a></h2><p>是 Java 提供的一种服务发现机制。</p><p>它的作用是让我们可以只依赖接口，具体的实现类由第三方提供，并且在运行时动态加载，不需要写死。比如 JDBC 加载数据库驱动，底层就是用 SPI 机制实现的，Java 会自动去找配置好的驱动类并加载它们。</p><p>通俗讲，SPI 就像是插件机制，我只负责定义接口，谁来实现、怎么实现，运行时系统自己去找，这样就实现了解耦和扩展。</p><p><strong>优缺点</strong>：提高接口设计的灵活性；</p><p>效率低：需要遍历加载所有的实现类，不能做到按需加载</p><p>并发问题：当多个 <code>ServiceLoader</code> 同时 <code>load</code> 时，会有并发问题。</p><h3 id="和api的区别" tabindex="-1"><a class="header-anchor" href="#和api的区别"><span><strong>和API的区别</strong></span></a></h3><p>API 是“我去用别人”，它是别人定义好一套功能接口，我作为调用者去使用，比如我们常用的 List、HttpClient 这些都是 API。 而 SPI 是“别人来接我”，我定义一套接口，让第三方去实现，然后在运行时由系统动态加载这些实现类，比如 JDBC 加载数据库驱动，就是通过 SPI 实现的。</p><blockquote><p>API是“用户”使用外卖平台给你提供的“点餐功能”、“下单功能”、“付款功能”</p><p>SPI是平台方想让商家来入驻，就告诉商家：“只要你能送外卖，就来报名，遵守我的规则（接口）。” 商家来实现你的送外卖接口。<strong>平台在运行时会去找这些商家来派单。</strong></p></blockquote><h3 id="serviceloader" tabindex="-1"><a class="header-anchor" href="#serviceloader"><span><strong>ServiceLoader</strong></span></a></h3><p><code>ServiceLoader</code> 是 Java 提供的一个工具类，用来实现 <strong>SPI 机制的服务发现</strong>。 它的作用就是在运行时根据接口，<strong>自动加载并实例化配置好的实现类</strong>，也就是说我只依赖接口，不需要手动 new 实现类，系统会自动去找“谁实现了这个接口”。</p><p>常见的场景比如 JDBC 驱动加载，Java 就是用 <code>ServiceLoader</code> 去找实现了 <code>java.sql.Driver</code> 的类，从而实现驱动的自动注册。</p><h1 id="过程" tabindex="-1"><a class="header-anchor" href="#过程"><span>过程</span></a></h1><h3 id="类加载过程" tabindex="-1"><a class="header-anchor" href="#类加载过程"><span>类加载过程</span></a></h3><p>类加载是指 Java 程序在运行过程中，<strong>把 .class 文件加载到 JVM 中，并转化为 Class 对象的过程</strong>。</p><p>加载：JVM 通过类的全限定名查找 <code>.class</code> 文件，把它的字节码读取进内存，并创建一个 <code>Class</code> 对象。</p><p>验证：这一步是为了安全，检查这个字节码文件是否合法，比如语法结构、常量池是否合法、防止字节码被篡改等。</p><p>准备：这个阶段会为类的<strong>静态变量</strong>分配内存，并设置默认值，比如 <code>int</code> 是 0，<code>boolean</code> 是 false。</p><p>解析：把类中的符号引用（就是类似类名、字段名这种字符串）替换为真正的地址引用（也就是指向内存的引用）。</p><p>初始化：这一步才是真正执行代码，比如执行 <code>static</code> 代码块，或者静态变量的赋值操作，这些代码只会执行一次。</p><p>Java 类加载器采用的是<strong>双亲委派模型</strong>，意思是：<strong>一个类加载器在加载某个类时，先把请求交给它的父加载器，父加载器找不到，才由自己来加载</strong>。有两个好处，应该是避免重复加载，另一个是保证核心类的优先级。</p><h3 id="对象创建的过程" tabindex="-1"><a class="header-anchor" href="#对象创建的过程"><span>对象创建的过程</span></a></h3><p>当new一个对象的时候，JVM首先判断类是否已经加载，如果没有就加载，如果已经加载了，那么就会在 <strong>堆内存</strong> 中为这个对象分配内存，分配好内存后，JVM 会先对这块内存做默认初始化，比如 int 是 0，引用是 null 等，接下来会准备好 this 指针，把它绑定到刚才分配的那块内存上，进程初始化，执行父类的非静态变量和代码块、父类构造器、子类的非静态变量和代码块、子类构造器。最后返回这个对象在堆的引用。</p><h1 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h1><h3 id="vs-equals" tabindex="-1"><a class="header-anchor" href="#vs-equals"><span>== vs equals</span></a></h3><p>==是一个运算符，对于基本数据类型，表示对比值是否相等，对于引用数据类型，表示对比是否指向同一个对象，也就是在堆内存的内存地址是否相同</p><p>而equals是<code>Obejct</code>类的方法，默认实现就是<code>return this == obj</code>，也就是比较引用的地址，但是<code>Object</code>作为所有类的直接或间接的父类，有些标准类都是重写了<code>equals</code>方法的，比如<code>String</code>，<code>Integer</code>，用来比较对象的内容是否相等。</p><p>但是需要注意的一点是<code>Integer a = 127; Integer b = 127;</code> 比较时 <code>a == b</code> 为 <code>true</code>，因为 Java 会缓存 <code>-128</code> 到 <code>127</code> 之间的整数对象，也就是包装类的缓存机制。</p><h3 id="成员变量vs局部变量" tabindex="-1"><a class="header-anchor" href="#成员变量vs局部变量"><span>成员变量vs局部变量</span></a></h3><p>成员变量就是你在类里面定义的、但不写在方法里的变量，它是属于对象或者类本身的。只要对象在，它就一直在；对象没了，它才跟着消失。比如你定义了一个 <code>int age</code> 放在类里面，这就是成员变量。它有默认值，就算你不赋值，它也不是空的。</p><p>而局部变量呢，是写在方法、代码块或者参数里的，比如你在一个方法里面写了 <code>int count = 0;</code>，这个就是局部变量。它只在方法执行时存在，用完方法就被销毁了。而且它<strong>必须</strong>赋值后才能用，不然编译都不会通过。</p><p>还有一个区别是：成员变量可以加 <code>public</code>、<code>private</code>、<code>static</code> 这些修饰符，但局部变量不行，它不能有访问控制符，也不能是 static。</p><p>**为什么成员变量有默认值，局部变量没有？**成员变量是跟着对象走的，存在于堆内存里，一旦你创建了对象，JVM 就会自动帮你把这些变量都初始化成默认值，比如 <code>int</code> 是 0，<code>boolean</code> 是 false，引用类型是 null。这样做的好处是让程序更安全——你用成员变量的时候，不会因为“没初始化”导致程序崩掉或行为异常。局部变量没有，它是跟着方法走的，存在于栈内存里。Java 不给它默认值，目的就是强制你自己先赋值，不然编译器直接报错。</p><h3 id="静态方法vs实例方法" tabindex="-1"><a class="header-anchor" href="#静态方法vs实例方法"><span>静态方法vs实例方法</span></a></h3><p><strong>调用静态方法可以无需创建对象</strong>：前者可以使用 <code>类名.方法名</code> 的方式，也可以使用 <code>对象.方法名</code> 的方式，后者只能用第二种</p><p>静态方法只允许访问静态成员，不允许访问实例成员，而实例方法没有这种限制。</p><h3 id="构造代码块vs构造方法" tabindex="-1"><a class="header-anchor" href="#构造代码块vs构造方法"><span>构造代码块vs构造方法</span></a></h3><p>构造代码块是写在类中、没有方法名、没有修饰符的代码块。它在每次创建对象时都会执行，并且<strong>优先于构造方法执行</strong>。</p><p>构造方法用于创建对象时初始化，名字与类名相同，可以有多个重载版本。</p><h3 id="构造代码块vs静态代码块" tabindex="-1"><a class="header-anchor" href="#构造代码块vs静态代码块"><span>构造代码块vs静态代码块</span></a></h3><p>构造代码块在每次创建对象前都会执行，提取多个构造方法的共同行为，减少代码重复</p><p>静态代码块是在 Java 类中用 <code>static {}</code> 包裹的一段代码。<strong>它在类加载时执行，并且只执行一次</strong>，不管你创建了多少个对象。</p><h3 id="jmm-vs-jvm" tabindex="-1"><a class="header-anchor" href="#jmm-vs-jvm"><span>JMM vs JVM</span></a></h3><p><strong>JVM</strong> 是一个具体的虚拟机，它负责在特定的硬件和操作系统上运行 Java 程序。它包括内存管理、垃圾回收、执行字节码等多个方面。</p><p><strong>JMM</strong> 是 Java 语言的内存模型规范，它并不具体描述实现，而是提供了多线程编程中如何访问共享变量的规范，主要目的是确保并发编程中的线程安全。MM 主要定义了 <strong>内存可见性</strong>、<strong>原子性</strong> 和 <strong>有序性</strong> 三个方面的规则。</p><h3 id="值传递vs引用传递" tabindex="-1"><a class="header-anchor" href="#值传递vs引用传递"><span>值传递vs引用传递</span></a></h3><p>Java 是值传递</p><p><strong>方法调用时，传递的是变量中存储的值的副本</strong>，而不是变量本身。</p><p>基本类型：传的是值的拷贝，方法里怎么改都不会影响原来的。</p><p>引用类型：传的是引用地址的拷贝，能通过这个地址修改对象的内容，但不能改原来的引用指向。</p><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h1><h2 id="hashcode" tabindex="-1"><a class="header-anchor" href="#hashcode"><span>hashCode()</span></a></h2><p><code>hashCode()</code> 的作用是获取哈希码（<code>int</code> 整数），也称为散列码。这个哈希码的作用是确定该对象在哈希表中的索引位置。</p><p><code>hashCode()</code> 定义在 JDK 的 <code>Object</code> 类中，这就意味着 Java 中的任何类都包含有 <code>hashCode()</code> 函数。另外需要注意的是：<code>Object</code> 的 <code>hashCode()</code> 方法是本地方法，也就是用 C 语言或 C++ 实现的。</p><p>**为什么重写 equals() 时必须重写 hashCode() 方法？**Java 为了保证集合类在处理对象时能够正常工作，规定的一对规则：<code>equals()</code> 判断对象相等时，两个相等的对象必须返回相同的 <code>hashCode()</code> 值。</p><blockquote><p><strong>重写 equals() 时没有重写 hashCode() 方法的话，使用 HashMap 可能会出现什么问题?</strong></p><p>1, <strong>相同的键无法正确查找</strong>:get失败，查不到值。你往 <code>HashMap</code> 里放了一个对象当 key，然后你用另一个“内容一样”的对象去查，发现返回了 <code>null</code>，查不到。</p><p>2，<strong>无法正确覆盖旧的键值对</strong>：put 不会覆盖，存重复 key。你往 <code>HashMap</code> 里放了一个 key，然后又放了一个“内容一模一样”的 key，理论上应该覆盖旧值，结果没覆盖，变成了两个 key 各自存在。</p></blockquote><h2 id="可变长参数" tabindex="-1"><a class="header-anchor" href="#可变长参数"><span>可变长参数</span></a></h2><p>从 <code>Java5 </code>开始，Java 支持定义可变长参数，它允许在方法中传递可变数量的参数来简化方法参数。</p><p>遇到方法重载的情况会优先匹配固定参数，因为固定参数的方法匹配度更高。</p><p>Java 的可变参数编译后实际会被转换成一个数组，从编译后生成的 <code>class</code>文件就可以看出。</p><h2 id="深拷贝-浅拷贝-引用拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝-浅拷贝-引用拷贝"><span>深拷贝，浅拷贝，引用拷贝</span></a></h2><p>深拷贝是完全复制一个对象及其所有嵌套的对象，<strong>包括所有引用对象</strong>。</p><p>浅拷贝是创建一个新的对象，但<strong>对象的属性依然是引用类型时</strong>，这些属性指向的是原对象中相同的内存地址（也就是<strong>引用</strong>不会复制，而是共享）。如果属性是基本数据类型，则会创建一个新值。</p><p>引用拷贝是将<strong>对象的引用</strong>复制一份，这意味着两个引用指向同一个对象。<strong>不会创建新对象</strong>，只是简单地复制了原始引用，栈中的两个变量都指向堆中的同一个对象。</p><h2 id="序列化-反序列化" tabindex="-1"><a class="header-anchor" href="#序列化-反序列化"><span>序列化，反序列化</span></a></h2><p>序列化就是把 Java 对象转换成字节流的过程，方便把对象保存到磁盘、或者通过网络传输。反序列化就是把字节流恢复成原来的 Java 对象。</p><p><strong>常见应用场景</strong>：网络传输；存储到文件；存储到数据库；存储到内存；</p><p><strong>OSI 七层协议模型中表示层做的事情主要就是对应用层的用户数据进行处理转换为二进制流，所以序列化协议对应于 TCP/IP 4 层模型的TCP/IP 协议应用层。</strong></p><p>对于不想进行序列化的变量，使用 <strong><code>transient</code></strong> 关键字修饰</p><p><strong>常见的序列化协议</strong>：比较常用的序列化协议有 Hessian、Kryo、Protobuf、ProtoStuff，这些都是基于二进制的序列化协议。</p><p>像 JSON 和 XML 这种属于文本类序列化方式。虽然可读性比较好，但是性能较差，一般不会选择。</p><h3 id="jdk-自带的序列化方式" tabindex="-1"><a class="header-anchor" href="#jdk-自带的序列化方式"><span>JDK 自带的序列化方式</span></a></h3><p>JDK 自带的序列化方式一般不会用 ，因为序列化效率低并且存在安全问题。</p><p><strong>为什么不推荐使用 JDK 自带的序列化？</strong></p><ul><li><strong>不支持跨语言调用</strong> : 如果调用的是其他语言开发的服务的时候就不支持了。</li><li><strong>性能差</strong>：相比于其他序列化框架性能更低，主要原因是序列化之后的字节数组体积较大，导致传输成本加大。</li><li><strong>存在安全问题</strong>：序列化和反序列化本身并不存在问题。但当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。</li></ul><p>Kryo、Protobuf、Hessian都是跨语言的序列化方式，如果有跨语言需求的话可以考虑使用。</p><h2 id="语法糖" tabindex="-1"><a class="header-anchor" href="#语法糖"><span>语法糖</span></a></h2><p>语法糖就是 Java 提供的一些语法层面的简化写法，让代码更简洁、更好读，但最终编译出来还是普通的底层代码。语法糖的存在主要是方便开发人员使用。但其实， Java 虚拟机并不支持这些语法糖，在编译阶段就会被还原成简单的基础语法结构，这个过程就是解语法糖。</p><p>Java 中最常用的语法糖主要有泛型、自动拆装箱、变长参数、枚举、内部类、增强 for 循环、try-with-resources 语法、lambda 表达式等。</p><ul><li><strong>switch 支持 String 与枚举</strong>：本质上 String 会被转成 <code>hashCode + equals</code>，枚举会被转成 <code>ordinal()</code> 索引，编译器自动完成了这些逻辑。</li><li><strong>泛型</strong>：编译器在编译期做类型检查、自动补上强转，运行期泛型信息被擦除，底层是原始类型操作（如 Object）。</li><li><strong>自动装拆箱</strong>：编译器在编译时会自动把基本类型和包装类互相转换，底层调用的是如 <code>Integer.valueOf()</code> 和 <code>intValue()</code> 这些方法。</li><li><strong>可变长参数</strong>：方法传任意多个参数，编译器会把它转换成一个数组参数来处理。</li><li><strong>枚举</strong>：编译器会将 <code>enum</code> 类转化为一个普通的类，并生成所有的常量、构造方法以及辅助方法（<code>values()</code>、<code>valueOf()</code> 等），这让我们可以方便地使用枚举而不需要手动编写大量的常量和方法。</li><li><strong>内部类</strong>：内部类、局部内部类、匿名内部类 都是语法糖。编译器会把它们拆成独立的类文件，并加上必要的外部类引用或构造函数参数。比如成员内部类会持有外部类的引用，匿名类会生成自动命名的类，局部变量也会被处理为 final 拷贝传入。</li><li><strong>增强 for 循环</strong>：编译器会把它转成普通的 <code>Iterator</code> 遍历（如果是集合）或下标访问（如果是数组）。</li><li><strong>try-with-resources</strong>：用来自动关闭资源，编译器会自动帮你加上 finally 和 close() 调用。</li><li><strong>lambda 表达式</strong>：用来简化函数式接口的写法。底层要么编译成匿名内部类，要么使用 <code>invokedynamic</code> 和 <code>LambdaMetafactory</code> 在运行时动态生成函数对象，<strong>本质仍然是函数式接口的实现类实例</strong>。</li><li></li></ul><h2 id="值传递" tabindex="-1"><a class="header-anchor" href="#值传递"><span>值传递</span></a></h2><p>Java 只有值传递，没有引用传递。</p><p>不管是基本类型还是引用类型，方法调用时传进去的都是“值”的拷贝。区别在于：</p><ul><li>传基本类型时，传的是变量的值本身；</li><li>传引用类型时，传的是“对象引用”的拷贝，也就是指向对象的地址。</li></ul><p>所以你可以通过这个引用修改对象的内容，但<strong>不能让它指向另一个新对象</strong>，因为这个引用本身也是拷贝，改不了外面的引用地址。</p><h2 id="移位运算符" tabindex="-1"><a class="header-anchor" href="#移位运算符"><span>移位运算符</span></a></h2><h3 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h3><p>1.高效：移位运算符直接对应于处理器的移位指令。现代处理器具有专门的硬件指令来执行这些移位操作，这些指令通常在一个时钟周期内完成。相比之下，乘法和除法等算术运算在硬件层面上需要更多的时钟周期来完成。</p><p>2.节省内存：通过移位操作，可以使用一个整数（如 <code>int</code> 或 <code>long</code>）来存储多个布尔值或标志位，从而节省内存。</p><h3 id="常用场景" tabindex="-1"><a class="header-anchor" href="#常用场景"><span>常用场景</span></a></h3><p>1.<strong>快速乘以或除以 2 的幂次方</strong>：a &lt;&lt; n 即 <code>a * 2ⁿ</code>；a &gt;&gt; n 即 <code>a / 2ⁿ</code>（向下取整）；&gt;&gt;&gt; 即 无符号右移，忽略符号位，空位都以 0 补齐。</p><p>2.<strong>位字段管理</strong>：例如存储和操作多个布尔值。</p><p>3.<strong>哈希算法和加密解密</strong>：通过移位和与、或等操作来混淆数据</p><p>4.<strong>数据压缩</strong>：例如霍夫曼编码通过移位运算符可以快速处理和操作二进制数据，以生成紧凑的压缩格式。</p><p>5.<strong>数据校验</strong>：例如 CRC（循环冗余校验）通过移位和多项式除法生成和校验数据完整性。</p><p>6.<strong>内存对齐</strong>：通过移位操作，可以轻松计算和调整数据的对齐地址。</p><p>由于 <code>double</code>，<code>float</code> 在二进制中的表现比较特殊，因此不能来进行移位操作。移位操作符实际上支持的类型只有<code>int</code>和<code>long</code>，编译器在对<code>short</code>、<code>byte</code>、<code>char</code>类型进行移位前，都会将其转换为<code>int</code>类型再操作。</p><p>**如果移位的位数超过数值所占有的位数会怎样？**当 int 类型左移/右移位数大于等于 32 位操作时，会先求余（%）后再进行左移/右移操作。实际执行的是 <code>位数 % 数据类型位宽</code>。</p>`,233)]))}const k=i(e,[["render",h]]),r=JSON.parse('{"path":"/1.Note/1.Java%20_%20CS/Java.html","title":"Java","lang":"en-US","frontmatter":{"title":"Java","order":1},"git":{"createdTime":1752236139000,"updatedTime":1752236139000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":35.81,"words":10744},"filePathRelative":"1.Note/1.Java & CS/Java.md"}');export{k as comp,r as data};
