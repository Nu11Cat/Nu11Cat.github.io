import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as n,o as e}from"./app-BGcFI8hN.js";const s={};function a(p,r){return e(),t("div",null,r[0]||(r[0]=[n('<h1 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h1><h2 id="容器" tabindex="-1"><a class="header-anchor" href="#容器"><span>容器</span></a></h2><p><strong>容器就是将软件打包成标准化单元，以用于开发、交付和部署。</strong></p><p>容器是一种<strong>轻量级、可移植、自包含的软件运行环境</strong>，它将应用程序及其运行所需的依赖、库、配置等打包在一起，确保在任何环境中都能以一致的方式运行。</p><p>容器并不是虚拟机，它不需要启动完整的操作系统，而是<strong>共享宿主机的内核</strong>，因此启动速度更快、资源开销更小。容器通过操作系统层的虚拟化（如 Linux 的命名空间和 cgroups）来实现<strong>进程隔离和资源限制</strong>，保障应用之间的安全与稳定。</p><p>容器最大的优势是：<strong>“一次构建，到处运行”</strong>。开发、测试和生产环境中使用同一个镜像，大大提高了部署效率和环境一致性。常见的容器技术包括 Docker、containerd 等。</p><h2 id="docker基础" tabindex="-1"><a class="header-anchor" href="#docker基础"><span>Docker基础</span></a></h2><p><strong>Docker是什么</strong></p><p>Docker 是一个开源的<strong>容器化平台</strong>，用于将应用及其依赖打包成一个统一的容器镜像，并在隔离的环境中运行。它基于 Linux 的容器技术（如 namespaces 和 cgroups），实现了轻量级的进程级虚拟化，支持快速构建、交付和部署应用，是现代 DevOps 和云原生架构的重要基础设施。</p><hr><p><strong>Docker有什么特点</strong></p><ul><li><strong>轻量级</strong>：容器共享宿主机内核，不像虚拟机那样需要完整操作系统，启动快、资源占用低。</li><li><strong>快速部署</strong>：镜像打包好后可秒级启动，大大提升交付效率。</li><li><strong>环境一致性</strong>：开发、测试、生产使用同一个镜像，避免“在我这没问题”的情况。</li><li><strong>易于移植</strong>：一次构建，任意运行，无论是在本地、测试机还是云上。</li><li><strong>模块化</strong>：每个容器只运行一个服务，天然支持微服务架构。</li><li><strong>便于版本控制和回滚</strong>：镜像支持版本管理，随时还原。</li></ul><hr><p><strong>为什么要使用Docker</strong></p><p>使用 Docker 可以大大简化应用的部署流程，解决传统开发中环境不一致、部署慢、依赖冲突等问题。它让应用更容易迁移、更易扩展，特别适合微服务架构和持续集成/持续交付（CI/CD）场景。同时，Docker 还能提升资源利用率，降低运维成本，是现代应用开发中非常重要的基础设施工具。</p><hr><h2 id="docker基础概念" tabindex="-1"><a class="header-anchor" href="#docker基础概念"><span>Docker基础概念</span></a></h2><p>Docker 中有非常重要的三个基本概念：镜像（Image）、容器（Container）和仓库（Repository）。</p><hr><h3 id="镜像" tabindex="-1"><a class="header-anchor" href="#镜像"><span>镜像</span></a></h3><p><strong>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。</strong> 镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p>Docker 设计时，就充分利用 <strong>Union FS</strong> 的技术，将其设计为<strong>分层存储的架构</strong> 。镜像实际是由多层文件系统联合组成。</p><p><strong>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</strong> 比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p><hr><h3 id="容器-1" tabindex="-1"><a class="header-anchor" href="#容器-1"><span>容器</span></a></h3><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，<strong>容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等</strong> 。</p><p><strong>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。前面讲过镜像使用的是分层存储，容器也是如此。</strong></p><p><strong>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</strong></p><p>按照 Docker 最佳实践的要求，<strong>容器不应该向其存储层内写入任何数据</strong> ，容器存储层要保持无状态化。<strong>所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录</strong>，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此， <strong>使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。</strong></p><hr><h3 id="仓库" tabindex="-1"><a class="header-anchor" href="#仓库"><span>仓库</span></a></h3><p>镜像构建完成后，可以很容易的在当前宿主上运行，但是， <strong>如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</strong></p><p>一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。所以说：<strong>镜像仓库是 Docker 用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。</strong></p><p>通常，<strong>一个仓库会包含同一个软件不同版本的镜像</strong>，而<strong>标签就常用于对应该软件的各个版本</strong> 。我们可以通过<code>&lt;仓库名&gt;:&lt;标签&gt;</code>的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签.。</p><hr><h1 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h1><p><a href="https://javaguide.cn/tools/docker/docker-intro.html#docker-%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4" target="_blank" rel="noopener noreferrer">Docker 常见命令</a></p>',38)]))}const i=o(s,[["render",a]]),h=JSON.parse('{"path":"/1.Note/4.Tool/Docker.html","title":"Docker","lang":"en-US","frontmatter":{"title":"Docker","order":3},"git":{"createdTime":1754213079000,"updatedTime":1754213079000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":5.43,"words":1628},"filePathRelative":"1.Note/4.Tool/Docker.md"}');export{i as comp,h as data};
