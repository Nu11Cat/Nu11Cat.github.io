import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as r,o as c}from"./app-BHLiXdjN.js";const n={};function p(a,o){return c(),e("div",null,o[0]||(o[0]=[r("<p>自动配置、Starter、Actuator</p><p>spring 框架有四大核心特性：</p><blockquote><p>Ioc，就是控制反转，是为了解决对象创建和依赖的高耦合的问题，是一种创建和获取对象的技术思想，是通过DI，也就是依赖注入实现的,传统开发我们需要new出新对象，而通过IOC我们通过ioc容器来实例化对象，大大降低对象之间的耦合。</p><p>通过反射，依赖注入，设计模式（工厂模式），容器实现的，其中，反射就是java反射机制，允许Ioc容器在运行时加载类和创建对象实例以及调用对象方法；依赖注入是ioc的核心概念；容器作为工厂来实例化bean并管理他们的生命周期；IOC容器通常使用BeanFactory或者ApplicationContext来管理Bean，依赖关系的硬编码问题</p></blockquote><blockquote><p>AOP，就是面向切面编程,允许开发者定义横切关注点，比如说事务管理，日志管理和权限控制。把那些与对象无关的，但是被业务代码共同调用的逻辑封装起来，减少重复代码，降低了模块间的耦合，有利于未来的扩展和维护。AOP是依赖于<strong>动态代理技术</strong>，动态代理是在运行时动态生成代理对象，而不是在编译时。它允许开发者在允许时指定要代理的接口和行为，从而实现在不修改源码的情况下增强或者拦截方法。</p></blockquote><blockquote><p>事务处理，</p></blockquote><blockquote><p>MVC，是指模型，视图，控制器，是一种软件设计典范，是一种把业务逻辑、数据、界面显示分离的方法组织代码。流程步骤就是用户通过view页面向服务端提出请求，controller控制器接收到解析，找到相应的model来处理，处理结果由controller返回给用户的view界面，界面渲染之后呈现。</p></blockquote><blockquote><p>DI，依赖注入，为了解决依赖关系的硬编码问题和类依赖问题导致的高耦合，容器负责管理应用程序组件之间的依赖问题，是一种具体的编码技巧。不再通过new来在类的内部创建依赖类的对象，而是将对象的创建和依赖关系交给容器，类只需要声明自己依赖的对象，容器就会在运行的时候把依赖注入到类种，从而降低类与类的耦合度，实现方式有构造器注入、Setter方法注入，还有字段注入。</p></blockquote><blockquote><p>自动装配：</p></blockquote>",8)]))}const m=t(n,[["render",p]]),u=JSON.parse('{"path":"/1.Note/2.Spring_Framework/Spring%20Boot.html","title":"Spring Boot","lang":"en-US","frontmatter":{"title":"Spring Boot","order":2},"git":{"createdTime":1753162465000,"updatedTime":1753162465000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":2.24,"words":672},"filePathRelative":"1.Note/2.Spring&Framework/Spring Boot.md"}');export{m as comp,u as data};
