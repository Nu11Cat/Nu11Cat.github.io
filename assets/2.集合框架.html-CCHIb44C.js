import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-gkVmqSKC.js";const l={};function t(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><p>1.集合框架概述与基本使用</p><blockquote><p>学习并理解 Java 集合框架的整体结构及其各个常见集合类。</p></blockquote><p>2.底层实现及原理</p><blockquote><p>深入研究集合框架背后的底层实现。</p></blockquote><p>3.线程安全与并发场景</p><blockquote><p>了解在多线程环境中，如何保证集合的线程安全。</p></blockquote><p>4.设计模式与源码设计思想</p><blockquote><p>探讨集合框架中的设计模式（如工厂模式、单例模式等）及其在源码中的应用。</p></blockquote><h2 id="_1-集合框架概述与基本使用" tabindex="-1"><a class="header-anchor" href="#_1-集合框架概述与基本使用"><span>1.集合框架概述与基本使用</span></a></h2><h4 id="集合体系结构概览" tabindex="-1"><a class="header-anchor" href="#集合体系结构概览"><span>集合体系结构概览</span></a></h4><p>Java 的集合框架（Collection Framework）是一个强大且统一的 API，用于存储和操作对象数据。它大致可以分为两大体系：</p><p><strong>Collection 与 Map 的两大体系</strong></p><ul><li><code>Collection</code> 接口是集合层次结构的根，用于表示一组对象（元素），其子接口包括： <ul><li><code>List</code>：有序集合，允许重复元素。</li><li><code>Set</code>：不允许重复元素，无序或有序视实现而定。</li><li><code>Queue</code>：支持队列操作的集合，通常用于按一定顺序处理元素（如 FIFO）。</li></ul></li><li><code>Map</code> 接口独立于 <code>Collection</code>，用于存储**键值对（key-value）**映射关系： <ul><li>键唯一，值可重复。</li><li>典型实现包括 <code>HashMap</code>、<code>TreeMap</code>、<code>LinkedHashMap</code> 等。</li></ul></li></ul><p><strong>Collection 下的 List、Set、Queue 简介</strong></p><table><thead><tr><th>接口</th><th>特点</th><th>常见实现类</th></tr></thead><tbody><tr><td><code>List</code></td><td>有序，可重复</td><td><code>ArrayList</code>, <code>LinkedList</code>, <code>Vector</code></td></tr><tr><td><code>Set</code></td><td>无序，不可重复</td><td><code>HashSet</code>, <code>LinkedHashSet</code>, <code>TreeSet</code></td></tr><tr><td><code>Queue</code></td><td>先进先出（FIFO）</td><td><code>LinkedList</code>, <code>PriorityQueue</code>, <code>ArrayDeque</code></td></tr></tbody></table><p>• Map 接口的独立地位</p><ul><li><code>Map</code> 不继承 <code>Collection</code>，因为其语义（键值映射）与传统集合不同。</li><li>其主要操作包括：添加 (<code>put</code>)、获取 (<code>get</code>)、删除 (<code>remove</code>)、遍历等。</li></ul><p><strong>接口 vs 实现类的关系图解</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>          Iterable</span></span>
<span class="line"><span>              |</span></span>
<span class="line"><span>          Collection               Map</span></span>
<span class="line"><span>          /    |    \\               |</span></span>
<span class="line"><span>      List   Set   Queue         SortedMap</span></span>
<span class="line"><span>       |       |      |             |</span></span>
<span class="line"><span>  ArrayList HashSet LinkedList   TreeMap</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心接口与通用方法Java 集合框架中的所有类都遵循统一的接口规范，使得学习与使用变得更为一致和高效。</p><p>• add()、remove()、contains() 等基础方法</p><ul><li><code>add(E e)</code>：向集合中添加元素。</li><li><code>remove(Object o)</code>：移除指定对象（第一次出现）。</li><li><code>contains(Object o)</code>：判断集合中是否包含该对象。</li><li><code>isEmpty()</code>：判断集合是否为空。</li><li><code>size()</code>：获取集合大小。</li></ul><blockquote><p><strong>注意：</strong> 不同集合对 <code>add()</code> 的行为不同，如 <code>Set</code> 添加重复元素会失败。</p></blockquote><p><strong>equals()、hashCode() 在集合中的作用</strong></p><ul><li><code>Set</code>、<code>Map</code> 等集合依赖 <code>equals()</code> 和 <code>hashCode()</code> 判断对象是否“相等”。</li><li>若自定义对象作为集合元素或 Map 的键，<strong>必须重写这两个方法</strong>以避免逻辑错误。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> equals</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> obj) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 比较字段值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 返回基于字段的 hash</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型支持与类型安全</p><ul><li><p>Java 5 引入泛型后，集合类支持类型参数：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>避免类型转换错误（<code>ClassCastException</code>）：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 不再需要强制转换</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p><strong>fail-fast 与 fail-safe 行为差异</strong></p><ul><li><strong>fail-fast（快速失败）</strong>： <ul><li>集合在结构被修改（非通过迭代器）时，遍历会抛出 <code>ConcurrentModificationException</code>。</li><li>如：<code>ArrayList</code>, <code>HashMap</code>, <code>HashSet</code></li></ul></li><li><strong>fail-safe（安全失败）</strong>： <ul><li>基于副本的遍历，不抛异常，但不保证实时性。</li><li>如：<code>CopyOnWriteArrayList</code>, <code>ConcurrentHashMap</code></li></ul></li></ul><h4 id="集合框架中的遍历方式" tabindex="-1"><a class="header-anchor" href="#集合框架中的遍历方式"><span>集合框架中的遍历方式</span></a></h4><p>集合遍历是集合使用中最常见的操作之一，Java 提供了多种方式。</p><p><strong>Iterator / enhanced for / forEach</strong></p><ul><li><p><code>Iterator</code> 是最通用的遍历方式：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Iterator</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> it </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">it</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> it</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>for-each</code> 语法糖：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> list) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 自动调用 Iterator</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>Collection.forEach(Consumer)</code>（Java 8+）：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p><strong>ListIterator 的前后遍历</strong></p><ul><li><p>仅 <code>List</code> 接口支持 <code>ListIterator</code>，可双向遍历：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ListIterator</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> it </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">listIterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">it</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> it</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">it</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasPrevious</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> it</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">previous</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可通过 <code>add()</code>、<code>remove()</code> 等在遍历中安全修改集合。</p></li></ul><p><strong>lambda 与 stream 的遍历新姿势（Java 8+）</strong></p><ul><li><p>Java 8 引入 Stream API，使集合操作更函数式和声明式：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">startsWith</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;A&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(String</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">toUpperCase)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">println);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>并行流（parallelStream）可加速处理大数据量（注意线程安全）。</p></li></ul><h4 id="list-接口与实现类详解" tabindex="-1"><a class="header-anchor" href="#list-接口与实现类详解"><span>List 接口与实现类详解</span></a></h4><p>List 是最常用的集合类型，特点是：<strong>有序</strong>、<strong>可重复</strong>。</p><p><strong><code>ArrayList</code>（顺序数组）</strong></p><ul><li><strong>底层结构</strong>：动态数组（Object[]）</li><li><strong>扩容机制</strong>：初始容量为10，每次扩容为原容量的 1.5 倍</li><li><strong>优点</strong>： <ul><li>随机访问性能高（<code>O(1)</code>）</li><li>内存连续，缓存友好</li></ul></li><li><strong>缺点</strong>： <ul><li>插入/删除慢（涉及数组复制）</li></ul></li><li><strong>使用场景</strong>： <ul><li>读多写少的顺序数据</li></ul></li><li><em>进阶</em>： <ul><li><code>ensureCapacity()</code> 可提前扩容避免重复复制</li><li>可配合 <code>Collections.synchronizedList</code> 实现线程安全</li></ul></li></ul><p><strong><code>LinkedList</code>（链表实现）</strong></p><ul><li><strong>底层结构</strong>：双向链表</li><li><strong>优点</strong>： <ul><li>插入/删除效率高（不需位移）</li></ul></li><li><strong>缺点</strong>： <ul><li>随机访问慢（<code>O(n)</code>）</li></ul></li><li><strong>支持队列操作</strong>：可作为 <code>Deque</code> 使用（支持栈/队列）</li><li><strong>使用场景</strong>： <ul><li>数据频繁插入/删除</li></ul></li></ul><p><strong><code>Vector</code>（线程安全的 ArrayList）</strong></p><ul><li>与 <code>ArrayList</code> 类似，但所有方法都被 <code>synchronized</code> 修饰</li><li>几乎被淘汰，推荐使用 <code>Collections.synchronizedList(new ArrayList&lt;&gt;())</code></li></ul><h4 id="set-接口与实现类详解" tabindex="-1"><a class="header-anchor" href="#set-接口与实现类详解"><span>Set 接口与实现类详解</span></a></h4><p>Set 体现的是<strong>数学集合语义</strong>：无序、不可重复。</p><p><strong><code>HashSet</code>（最常用）</strong></p><ul><li><strong>底层结构</strong>：基于 <code>HashMap</code> 实现，元素作为键，值为常量 <code>PRESENT</code></li><li><strong>添加逻辑</strong>：依赖 <code>hashCode()</code> 与 <code>equals()</code> 保证唯一性</li><li><strong>JDK 8 优化</strong>：链表过长转为红黑树（链表长度 &gt; 8 且桶大小 &gt; 64）</li><li><strong>特点</strong>： <ul><li>查询/添加/删除时间复杂度为 <code>O(1)</code>（理想情况）</li></ul></li><li><strong>常见误区</strong>： <ul><li>忘记重写 <code>equals/hashCode</code> 导致“重复元素”失效</li></ul></li></ul><p><strong><code>LinkedHashSet</code></strong></p><ul><li><strong>底层结构</strong>：继承 <code>HashSet</code> + 双向链表</li><li><strong>保持元素插入顺序</strong></li><li>适合需要“去重 + 有序”场景</li></ul><p>** <code>TreeSet</code>**</p><ul><li><strong>底层结构</strong>：红黑树（<code>TreeMap</code> 支撑）</li><li><strong>自动排序</strong>：元素需实现 <code>Comparable</code> 或使用自定义 <code>Comparator</code></li><li><strong>时间复杂度</strong>：添加/删除/查询为 <code>O(log n)</code></li><li>适合对数据进行自动排序、范围查询</li></ul><h4 id="map-接口与实现类详解" tabindex="-1"><a class="header-anchor" href="#map-接口与实现类详解"><span>Map 接口与实现类详解</span></a></h4><p>Map 是 Java 中用于处理<strong>键值对映射</strong>的核心接口。</p><p><strong><code>HashMap</code>（最常用）</strong></p><ul><li><strong>底层结构</strong>： <ul><li>JDK 7：数组 + 链表</li><li>JDK 8：数组 + 链表 + 红黑树</li></ul></li><li><strong>容量/负载因子</strong>： <ul><li>初始容量默认 16，负载因子 0.75</li></ul></li><li><strong>扩容机制</strong>： <ul><li>超过阈值（容量 × 负载因子）后，容量翻倍</li></ul></li><li><strong>冲突处理</strong>： <ul><li>同 hash 值元素存储在链表或红黑树中（树化条件如上）</li></ul></li><li><strong>非线程安全</strong></li></ul><p><strong><em>进阶</em>：</strong></p><ul><li><strong>键的要求</strong>：必须实现 <code>hashCode()</code> 与 <code>equals()</code></li><li><strong>JDK 8 之后性能显著提升</strong>（链表转红黑树）</li><li><strong>Hash 冲突多时性能可能降为 O(n)</strong>，树化避免此问题</li></ul><p><strong><code>LinkedHashMap</code></strong></p><ul><li><strong>底层结构</strong>：继承 <code>HashMap</code>，同时维护插入顺序的双向链表</li><li><strong>保持元素插入顺序</strong>（也可以按访问顺序）</li><li><strong>LRU 实现方式</strong>： <ul><li>构造时指定 <code>accessOrder=true</code>，并重写 <code>removeEldestEntry()</code></li></ul></li></ul><p><strong><code>TreeMap</code></strong></p><ul><li><p><strong>基于红黑树</strong>，键需排序（<code>Comparable</code> 或 <code>Comparator</code>）</p></li><li><p><strong>适合范围查找、自动排序</strong>，如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">subMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 获取 key 在 10~20 之间的子映射</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p><strong><code>Hashtable</code>（线程安全但已淘汰）</strong></p><ul><li>所有方法都加了 <code>synchronized</code>，效率低</li><li>推荐使用 <code>ConcurrentHashMap</code></li></ul><h4 id="queue-接口与实现类详解" tabindex="-1"><a class="header-anchor" href="#queue-接口与实现类详解"><span>Queue 接口与实现类详解</span></a></h4><p>Queue 表现先进先出（FIFO）行为，广泛用于任务调度、缓存等。</p><p><strong><code>LinkedList</code> 实现 Queue</strong></p><ul><li>实现了 <code>Queue</code> 和 <code>Deque</code></li><li>支持头尾插入/删除（栈/队列双模式）</li></ul><p><strong><code>PriorityQueue</code></strong></p><ul><li>基于堆（最小堆），元素自动排序</li><li>默认使用 <code>Comparable</code>，也可传入 <code>Comparator</code></li><li>常用于任务调度、优先队列</li></ul><p><strong><code>ArrayDeque</code></strong></p><ul><li>双端队列，高效替代 <code>Stack</code> 和 <code>LinkedList</code></li><li>无容量限制，头尾操作 <code>O(1)</code></li><li>比 <code>LinkedList</code> 更轻量级，无链表指针开销</li></ul><h4 id="对比汇总" tabindex="-1"><a class="header-anchor" href="#对比汇总"><span><strong>对比汇总</strong></span></a></h4><table><thead><tr><th>接口</th><th>实现类</th><th>底层结构</th><th>有序性</th><th>线程安全</th><th>特点</th></tr></thead><tbody><tr><td>List</td><td>ArrayList</td><td>数组</td><td>有序</td><td>×</td><td>快速随机访问</td></tr><tr><td>List</td><td>LinkedList</td><td>双向链表</td><td>有序</td><td>×</td><td>快速增删</td></tr><tr><td>Set</td><td>HashSet</td><td>Hash 表</td><td>无序</td><td>×</td><td>快速查重</td></tr><tr><td>Set</td><td>TreeSet</td><td>红黑树</td><td>排序</td><td>×</td><td>自动排序</td></tr><tr><td>Map</td><td>HashMap</td><td>Hash 表</td><td>无序</td><td>×</td><td>快速 key-value 映射</td></tr><tr><td>Map</td><td>TreeMap</td><td>红黑树</td><td>排序</td><td>×</td><td>按 key 排序</td></tr><tr><td>Queue</td><td>PriorityQueue</td><td>堆</td><td>排序</td><td>×</td><td>优先处理</td></tr><tr><td>Queue</td><td>ArrayDeque</td><td>循环数组</td><td>有序</td><td>×</td><td>双端操作</td></tr></tbody></table><h2 id="_2-底层实现及原理" tabindex="-1"><a class="header-anchor" href="#_2-底层实现及原理"><span>2.底层实现及原理</span></a></h2><p>因为Java集合并没有太多理解困难的抽象知识，更多是在使用中的选择和应用，对于实现原理和源码分析已经有很多成熟的文章和视频，所以我不再重复赘述。</p><p><a href="https://javaguide.cn/java/collection/java-collection-questions-01.html" target="_blank" rel="noopener noreferrer">Java集合常见面试题总结(上) | JavaGuide</a></p><p><a href="https://github.com/CarpenterLee/JCFInternals" target="_blank" rel="noopener noreferrer">CarpenterLee/JCFInternals: 深入理解Java集合框架</a></p><p><a href="https://github.com/google/guava" target="_blank" rel="noopener noreferrer">google/guava: Google core libraries for Java</a></p><h2 id="_3-线程安全与并发场景" tabindex="-1"><a class="header-anchor" href="#_3-线程安全与并发场景"><span>3.线程安全与并发场景</span></a></h2><h4 id="_1-线程不安全集合的问题" tabindex="-1"><a class="header-anchor" href="#_1-线程不安全集合的问题"><span>1.<strong>线程不安全集合的问题</strong></span></a></h4><p>在多线程并发环境中，如果使用 Java 中默认的集合类（如 <code>ArrayList</code>、<code>HashMap</code>、<code>LinkedList</code> 等），很容易出现<strong>数据不一致</strong>、<strong>程序异常</strong>甚至<strong>死循环</strong>等问题。这是因为这些集合类本身<strong>没有线程安全保障</strong>，多个线程同时读写时会引发竞态条件。</p><p>示例一：ArrayList 的并发问题</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>java复制编辑List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Runnable task = () -&gt; {</span></span>
<span class="line"><span>    for (int i = 0; i &lt; 1000; i++) {</span></span>
<span class="line"><span>        list.add(i);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Thread t1 = new Thread(task);</span></span>
<span class="line"><span>Thread t2 = new Thread(task);</span></span>
<span class="line"><span>t1.start();</span></span>
<span class="line"><span>t2.start();</span></span>
<span class="line"><span>t1.join();</span></span>
<span class="line"><span>t2.join();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>System.out.println(&quot;Size: &quot; + list.size());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>预期结果</strong>：2000 <strong>实际可能结果</strong>：小于 2000，甚至抛出 <code>ConcurrentModificationException</code> 或 <code>ArrayIndexOutOfBoundsException</code>。</p><p><strong>原因</strong>：多个线程同时调用 <code>add()</code>，在扩容或修改内部数组时发生冲突，导致数据错乱或覆盖。</p><hr><p>示例二：HashMap 的并发死循环（JDK 1.7）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>java复制编辑Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Runnable task = () -&gt; {</span></span>
<span class="line"><span>    for (int i = 0; i &lt; 10000; i++) {</span></span>
<span class="line"><span>        map.put(i, i);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Thread t1 = new Thread(task);</span></span>
<span class="line"><span>Thread t2 = new Thread(task);</span></span>
<span class="line"><span>t1.start();</span></span>
<span class="line"><span>t2.start();</span></span>
<span class="line"><span>t1.join();</span></span>
<span class="line"><span>t2.join();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JDK 1.7 中，如果在多线程环境下频繁 <code>put</code>，可能会触发 <strong>rehash</strong> 时链表形成循环，导致 CPU 100% 卡死在遍历中（虽然 JDK 1.8 改进为红黑树后几率降低，但仍不安全）。</p><p>因此，在并发环境中使用这些集合类需要格外小心，不能直接使用，应使用线程安全版本或并发集合类替代。</p><h4 id="_2-线程安全的集合类" tabindex="-1"><a class="header-anchor" href="#_2-线程安全的集合类"><span>2.线程安全的集合类</span></a></h4><p>在多线程环境中，普通集合类（如 <code>ArrayList</code>、<code>HashMap</code>）由于缺乏内部同步机制，无法保障并发操作下的数据一致性，容易引发线程安全问题。为了解决这一问题，Java 提供了多种线程安全的集合实现方案，分别适用于不同的使用场景。</p><p><strong>1. 使用 Collections.synchronizedXXX 包装</strong></p><p>Java 的 <code>Collections</code> 工具类提供了若干静态方法，可以将原本非线程安全的集合包装成线程安全的版本，例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>java复制编辑List&lt;String&gt; syncList = Collections.synchronizedList(new ArrayList&lt;&gt;());</span></span>
<span class="line"><span>Map&lt;String, String&gt; syncMap = Collections.synchronizedMap(new HashMap&lt;&gt;());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这些包装方法的底层实现通过 <code>synchronized</code> 关键字为集合的每个操作加锁，从而保证线程安全。但需要注意：</p><ul><li>对集合的迭代仍需手动同步；</li><li>在高并发环境下性能较差，因为锁粒度粗，每次访问都串行化处理。</li></ul><p>这种方式简单直接，适合轻量级的并发需求场景，但并不推荐用于复杂或高频操作的系统中。</p><p><strong>2. Concurrent 包下的高性能集合类</strong></p><p>为了提供更优的并发性能，Java 5 引入了 <code>java.util.concurrent</code> 包，内置了多种基于分段锁或无锁机制的线程安全集合，它们在企业开发中广泛应用：</p><ul><li><strong><code>ConcurrentHashMap</code></strong> 是 <code>HashMap</code> 的线程安全替代品，JDK 7 使用分段锁（Segment），JDK 8 开始改为使用 CAS + synchronized 实现，具有更高的并发性能。适合高读写并发场景。</li><li><strong><code>CopyOnWriteArrayList</code></strong> 基于写时复制（Copy-On-Write）机制，每次修改（如添加、删除）时都会复制整个底层数组，写操作代价高，但读操作无需加锁，非常适合读多写少的场景。</li><li><strong><code>ConcurrentLinkedQueue</code></strong> 是一个基于非阻塞算法的无界线程安全队列，采用 CAS 操作保证并发安全，适用于高吞吐量的消息队列模型中。</li><li><strong><code>ConcurrentSkipListMap</code> / <code>ConcurrentSkipListSet</code></strong> 基于跳表结构的线程安全有序集合，支持并发访问的同时保持元素有序，适用于需要排序或范围查询的场景。</li></ul><p>这些集合的设计核心是降低锁粒度，避免全局锁，通过细粒度锁或乐观并发控制机制（如 CAS）来提升并发能力。</p><p><strong>3. 并发集合的使用建议</strong></p><ul><li>读多写少：优先考虑 <code>CopyOnWriteArrayList</code>。</li><li>高并发读写：使用 <code>ConcurrentHashMap</code>。</li><li>高性能队列：采用 <code>ConcurrentLinkedQueue</code>。</li><li>有序并发集合：考虑 <code>ConcurrentSkipListMap</code> 或 <code>ConcurrentSkipListSet</code>。</li></ul><h4 id="_3-concurrent-包下的并发集合原理" tabindex="-1"><a class="header-anchor" href="#_3-concurrent-包下的并发集合原理"><span>3.Concurrent 包下的并发集合原理</span></a></h4><p>为了提升集合在并发场景下的性能和可扩展性，Java 的 <code>java.util.concurrent</code> 包引入了多种并发集合，其设计核心在于<strong>降低锁粒度</strong>、<strong>分离读写操作</strong>和<strong>使用无锁算法</strong>，相比传统的同步集合性能更优。</p><p>以下是几种常见并发集合的底层原理简介：</p><hr><p><strong>1. ConcurrentHashMap</strong></p><p><code>ConcurrentHashMap</code> 是最常用的线程安全 <code>Map</code> 实现：</p><ul><li><strong>JDK 7：使用分段锁（Segment）</strong><ul><li>将整个 HashMap 拆分成多个 Segment，每个 Segment 维护一个独立的哈希表。</li><li>不同 Segment 之间互不干扰，提升并发访问性能。</li><li>缺点是默认只支持 16 个 Segment，扩展性有限。</li></ul></li><li><strong>JDK 8：使用 CAS + synchronized</strong><ul><li>取消了 Segment，使用<strong>数组 + 链表/红黑树</strong>的结构。</li><li>写操作使用 <code>synchronized</code> 锁定单个桶，读操作通过 <code>volatile</code> 保证可见性，避免加锁。</li><li>扩容时也采用分布式迁移，减少阻塞。</li></ul></li></ul><p><strong>优点：</strong> 高性能、高可扩展性、适合读写并发场景。 <strong>注意：</strong> 并不支持 null 键或 null 值。</p><hr><p><strong>2. CopyOnWriteArrayList</strong></p><p>适合读多写少的场景，其核心思想是<strong>写时复制</strong>：</p><ul><li>每次修改操作（如 <code>add()</code>、<code>remove()</code>）都会复制一份新数组。</li><li>读操作无需加锁，因为读的是旧数组副本，天然线程安全。</li><li>写操作通过 <code>ReentrantLock</code> 保证串行化。</li></ul><p><strong>优点：</strong> 读操作无锁，读性能极高。 <strong>缺点：</strong> 写操作开销大，不适合频繁修改的场景。</p><hr><p><strong>3. ConcurrentLinkedQueue</strong></p><p>是一个基于 <strong>非阻塞链表</strong> 的并发队列，实现了 <strong>无锁队列算法</strong>：</p><ul><li>使用 <strong>CAS（Compare-And-Swap）</strong> 操作保证原子性，避免传统加锁开销。</li><li>基于 Michael-Scott 非阻塞队列算法实现，入队和出队操作互不干扰。</li></ul><p><strong>优点：</strong> 高吞吐，适合生产者-消费者模型、任务调度等场景。 <strong>缺点：</strong> 在极高并发下可能存在 ABA 问题（JDK 已优化）。</p><hr><p><strong>4. ConcurrentSkipListMap / Set</strong></p><p>使用跳表（Skip List）实现的有序并发集合：</p><ul><li>支持并发访问的同时保持元素的<strong>自然顺序或指定顺序</strong>。</li><li>跳表是一种多层级链表，平均查找、插入、删除复杂度为 O(log n)。</li><li>内部采用 CAS 保证节点插入删除的原子性，同时使用 <code>ReentrantLock</code> 做局部加锁。</li></ul><p><strong>优点：</strong> 支持范围查询、有序遍历，是线程安全的 TreeMap 替代品。</p><p>Java 并发集合的底层实现都体现了对传统加锁方式的优化，通过合理的算法设计和内存模型控制，使得集合在多线程环境下既安全又高效。掌握它们的原理，对于设计线程安全的数据结构和排查并发 Bug 都非常重要。</p><h4 id="_4-使用建议与场景" tabindex="-1"><a class="header-anchor" href="#_4-使用建议与场景"><span>4.使用建议与场景</span></a></h4><p>在多线程环境下，选择正确的集合类至关重要。使用不当会导致数据竞争、性能瓶颈甚至严重的线程安全问题。以下是一些实用建议和典型场景，帮助开发者做出合理选择。</p><hr><p><strong>1. 明确读写比重</strong></p><ul><li><strong>读多写少：</strong><ul><li>使用 <code>CopyOnWriteArrayList</code> 或 <code>CopyOnWriteArraySet</code>。</li><li>避免加锁带来的读阻塞，适合缓存、配置列表等。</li></ul></li><li><strong>读写并发：</strong><ul><li>使用 <code>ConcurrentHashMap</code>、<code>ConcurrentSkipListMap</code> 等。</li><li>它们对读写进行了优化，适合共享数据频繁变动的业务逻辑。</li></ul></li><li><strong>写密集场景：</strong><ul><li>避免使用写时复制类（如 CopyOnWrite 系列）。</li><li>可以使用 <code>ConcurrentLinkedQueue</code>、<code>BlockingQueue</code> 等支持高并发写入的结构。</li></ul></li></ul><hr><p><strong>2. 是否需要顺序保证</strong></p><ul><li>若需要 <strong>有序遍历</strong> 或 <strong>范围查询</strong>，推荐使用： <ul><li><code>ConcurrentSkipListMap</code>（有序 Map）</li><li><code>ConcurrentSkipListSet</code>（有序 Set）</li></ul></li><li>若对顺序不敏感： <ul><li><code>ConcurrentHashMap</code> 更加高效，占用更少内存。</li></ul></li></ul><hr><p><strong>3. 是否涉及阻塞行为</strong></p><ul><li>若集合用于生产者-消费者模型，考虑使用： <ul><li><code>LinkedBlockingQueue</code></li><li><code>ArrayBlockingQueue</code></li><li><code>DelayQueue</code>、<code>PriorityBlockingQueue</code> 等</li></ul></li><li>这些阻塞队列内置 <code>take()</code> 和 <code>put()</code> 方法，可以自然地控制线程等待和唤醒，避免手动加锁。</li></ul><hr><p><strong>4. 不要误用线程不安全集合</strong></p><p>在并发场景中避免使用：</p><ul><li><code>ArrayList</code></li><li><code>HashMap</code></li><li><code>LinkedList</code></li><li><code>HashSet</code> 等</li></ul><p>这些集合在并发读写中没有任何线程安全机制，容易导致数据不一致、死循环（如旧版 <code>HashMap</code> 扩容）或程序崩溃。</p><hr><p><strong>5. 警惕性能陷阱</strong></p><ul><li><code>Collections.synchronizedXXX()</code> 虽然提供了线程安全包装，但性能差，锁粒度粗，容易成为瓶颈。</li><li><code>Hashtable</code> 是遗留类，已被 <code>ConcurrentHashMap</code> 取代，避免使用。</li></ul><table><thead><tr><th>场景描述</th><th>推荐集合</th></tr></thead><tbody><tr><td>读多写少</td><td>CopyOnWriteArrayList</td></tr><tr><td>高并发读写</td><td>ConcurrentHashMap</td></tr><tr><td>有序并发访问</td><td>ConcurrentSkipListMap / Set</td></tr><tr><td>阻塞队列 / 消费者模型</td><td>LinkedBlockingQueue, ArrayBlockingQueue</td></tr><tr><td>简单线程安全包装（低性能）</td><td>Collections.synchronizedList 等</td></tr></tbody></table><h2 id="_4-设计模式与源码设计思想" tabindex="-1"><a class="header-anchor" href="#_4-设计模式与源码设计思想"><span>4.设计模式与源码设计思想</span></a></h2><blockquote><p>这部分不太重要</p></blockquote><p>Java集合框架是基于许多经典设计模式和原则来实现的，它通过不同的集合类和接口，为开发者提供了高效、灵活的数据存储解决方案。在深入分析Java集合框架时，我们可以发现其中有大量设计模式的应用以及源码设计思想的体现。</p><hr><h4 id="一、集合框架中的常见设计模式" tabindex="-1"><a class="header-anchor" href="#一、集合框架中的常见设计模式"><span>一、集合框架中的常见设计模式</span></a></h4><ol><li><p><strong>工厂模式（Factory Pattern）</strong></p><ul><li><strong>概述</strong>：工厂模式用于创建对象的接口，但不暴露对象创建的具体实现。</li><li><strong>在集合框架中的应用</strong>：<code>Collections</code> 类和 <code>List</code>、<code>Set</code>、<code>Map</code> 等接口的实现都遵循了工厂模式。例如，<code>Collections</code> 类提供了静态工厂方法（如 <code>singletonList()</code>、<code>emptyList()</code> 等）来创建不可变集合对象。</li><li><strong>源码示例</strong>：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> singletonList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> o) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SingletonList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(o)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>singletonList</code> 就是工厂方法，通过封装集合的创建逻辑，提供特定类型的集合实例。</p></li><li><p><strong>单例模式（Singleton Pattern）</strong></p><ul><li><strong>概述</strong>：确保某个类只有一个实例，并提供全局访问点。</li><li><strong>在集合框架中的应用</strong>：<code>EnumSet</code> 是一个典型的单例模式应用。因为 <code>EnumSet</code> 只能处理枚举类型，所以它通过内部静态方法确保了集合的唯一性和单例模式。</li><li><strong>源码示例</strong>：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> extends </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Enum</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">E</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EnumSet</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">E</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> of</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> first</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> E</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> rest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> EnumSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">allOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">first</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeclaringClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>EnumSet</code> 确保了枚举集合的单一性，不会创建多余的实例。</p></li><li><p><strong>策略模式（Strategy Pattern）</strong></p><ul><li><strong>概述</strong>：通过封装算法，允许在运行时切换算法。</li><li><strong>在集合框架中的应用</strong>：在 <code>TreeSet</code> 和 <code>TreeMap</code> 中，元素的比较方式由 <code>Comparator</code> 接口策略化。<code>Comparator</code> 可以在运行时被替换，从而改变元素的排序方式。</li><li><strong>源码示例</strong>：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TreeSet</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Comparator</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> super</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> E</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> comparator) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">comparator</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> comparator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>TreeSet</code> 和 <code>TreeMap</code> 允许用户通过传入不同的 <code>Comparator</code> 来决定集合的排序策略。</p></li><li><p><strong>装饰者模式（Decorator Pattern）</strong></p><ul><li><strong>概述</strong>：允许动态地给对象添加额外的功能。</li><li><strong>在集合框架中的应用</strong>：<code>List</code>、<code>Set</code> 和 <code>Map</code> 等集合接口有多个装饰类，如 <code>Collections.unmodifiableList()</code>，它封装了一个集合对象，为集合提供只读功能。</li><li><strong>源码示例</strong>：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> unmodifiableList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> extends T</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> list) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UnmodifiableList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(list)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>UnmodifiableList</code> 是对原集合的装饰，使得外部无法修改该集合。</p></li><li><p><strong>代理模式（Proxy Pattern）</strong></p><ul><li><strong>概述</strong>：通过代理对象控制对原对象的访问。</li><li><strong>在集合框架中的应用</strong>：<code>CopyOnWriteArrayList</code> 类使用了代理模式，它的行为被“复制”到一个新的副本中，以避免直接修改原集合时的并发问题。</li><li><strong>源码示例</strong>：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">E</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> e) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ReentrantLock</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lock </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] elements </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getArray</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> length </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> elements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Create a new array for every modification.</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] newElements </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">copyOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(elements, length </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        newElements[length] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        setArray</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(newElements)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个设计通过复制原数组来避免在并发修改集合时出现问题，从而使得集合在多线程环境下保持线程安全。</p></li></ol><hr><h4 id="二、java集合中的源码设计思想" tabindex="-1"><a class="header-anchor" href="#二、java集合中的源码设计思想"><span>二、Java集合中的源码设计思想</span></a></h4><ol><li><strong>高内聚低耦合</strong><ul><li><strong>概述</strong>：集合类的设计遵循了高内聚低耦合的原则，意味着每个集合类仅负责实现集合的特定功能，而与其他类或组件的耦合度尽量保持在最低。</li><li><strong>体现</strong>：通过接口和抽象类，Java集合框架使得不同类型的集合可以灵活替换，并且实现了面向接口编程。例如，<code>List</code>、<code>Set</code>、<code>Map</code> 都是集合接口，具体的实现类如 <code>ArrayList</code>、<code>HashSet</code>、<code>HashMap</code> 等都有各自独立的实现。</li></ul></li><li><strong>接口与抽象类的运用</strong><ul><li><strong>概述</strong>：集合框架的设计采用了大量的接口和抽象类来解耦集合的实现与使用。</li><li><strong>体现</strong>：通过 <code>Collection</code>、<code>List</code>、<code>Set</code>、<code>Map</code> 等接口，集合框架能够灵活地支持不同类型的集合。在实现细节方面，诸如 <code>AbstractList</code> 和 <code>AbstractSet</code> 提供了基础的功能实现，让具体的实现类可以继承并加以拓展。</li></ul></li><li><strong>通用性与灵活性</strong><ul><li><strong>概述</strong>：Java集合框架强调通用性，几乎所有集合类都遵循了一种标准的接口规范，确保了不同集合类之间的通用操作。</li><li><strong>体现</strong>：通过一组统一的接口和方法，所有集合类（如 <code>add()</code>、<code>remove()</code>、<code>size()</code>）都遵循相同的约定，这使得开发者可以更轻松地切换不同类型的集合（如 <code>ArrayList</code> 与 <code>LinkedList</code>）而不改变代码逻辑。</li></ul></li><li><strong>延迟初始化与懒加载</strong><ul><li><strong>概述</strong>：在某些集合类中，采用延迟初始化和懒加载的策略来优化性能。</li><li><strong>体现</strong>：例如，在 <code>HashMap</code> 中，内部数组并不是在初始化时就创建，而是在需要时才进行扩容，确保内存的有效利用。<code>Lazy</code> 和 <code>synchronized</code> 在某些线程安全的集合类（如 <code>CopyOnWriteArrayList</code>）中发挥作用，减少不必要的计算和开销。</li></ul></li></ol><p>Java集合框架不仅仅提供了多种高效的数据结构和操作方法，它背后也体现了许多经典的设计模式和良好的源码设计思想。这些模式和思想的应用使得集合框架在不同的场景下都能提供灵活、高效、可扩展的解决方案。深入理解这些设计模式和源码实现，能够帮助开发者在使用集合框架时更加得心应手，同时也能够在设计自己的系统时，借鉴这些模式来提升代码的可维护性、可扩展性和性能。</p>`,162)]))}const p=i(l,[["render",t]]),k=JSON.parse('{"path":"/1.%E5%AD%A6%E4%B9%A0%E7%AF%87/1.Java%E5%9F%BA%E7%A1%80/2.%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.html","title":"2.集合框架","lang":"en-US","frontmatter":{"title":"2.集合框架"},"git":{"createdTime":1749044926000,"updatedTime":1749044926000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":18.82,"words":5647},"filePathRelative":"1.学习篇/1.Java基础/2.集合框架.md"}');export{p as comp,k as data};
