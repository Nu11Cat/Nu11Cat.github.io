import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-DEWiYK4r.js";const h={};function e(t,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h2 id="一、spring-security-概述" tabindex="-1"><a class="header-anchor" href="#一、spring-security-概述"><span>一、Spring Security 概述</span></a></h2><ul><li>什么是 Spring Security？</li><li>核心理念与安全架构（身份认证、授权、攻击防范）</li><li>Java 后端系统中的安全需求与挑战</li><li>Spring Security 在 Spring 生态中的定位与整合</li></ul><h2 id="二、身份认证-authentication" tabindex="-1"><a class="header-anchor" href="#二、身份认证-authentication"><span>二、身份认证 (Authentication)</span></a></h2><ul><li>HTTP Basic 与 Digest 认证机制</li><li>表单登录：自定义登录页面、成功与失败处理</li><li>自定义 UserDetailsService 与 AuthenticationProvider 实现细节</li><li>Remember-Me 机制：持久化登录与 cookie 管理</li><li>单点登录（SSO）基础概念与实现思路</li></ul><h2 id="三、授权-authorization" tabindex="-1"><a class="header-anchor" href="#三、授权-authorization"><span>三、授权 (Authorization)</span></a></h2><ul><li>基于角色的授权（Role-Based Access Control, RBAC）</li><li>方法级安全：<code>@PreAuthorize</code>、<code>@Secured</code>、<code>@PostAuthorize</code> 的使用</li><li>URL 权限控制：安全拦截与访问规则配置</li><li>数据层授权与资源保护策略</li></ul><h2 id="四、安全配置与自定义扩展" tabindex="-1"><a class="header-anchor" href="#四、安全配置与自定义扩展"><span>四、安全配置与自定义扩展</span></a></h2><ul><li>启动 Spring Security：<code>@EnableWebSecurity</code> 与 WebSecurityConfigurerAdapter</li><li>自定义认证、授权过滤器（FilterChain）的实现</li><li>自定义登录与注销流程</li><li>安全上下文（SecurityContextHolder）的管理与线程安全</li><li>多环境和模块化安全配置实践</li></ul><h2 id="五、高级安全功能" tabindex="-1"><a class="header-anchor" href="#五、高级安全功能"><span>五、高级安全功能</span></a></h2><ul><li>CSRF 防护机制原理与配置</li><li>跨域资源共享（CORS）的安全配置</li><li>Session 管理与并发控制：防止会话劫持和重复登录</li><li>防止 XSS、点击劫持等常见攻击</li><li>安全日志记录与审计机制（监控与告警）</li></ul><h2 id="六、与-oauth2-jwt-的整合实践" tabindex="-1"><a class="header-anchor" href="#六、与-oauth2-jwt-的整合实践"><span>六、与 OAuth2 / JWT 的整合实践</span></a></h2><ul><li>OAuth2 基础概念与授权模式（授权码、密码模式、客户端凭证等）</li><li>Spring Security OAuth2 集成与配置详解</li><li>无状态认证：JWT（JSON Web Token）应用与优势</li><li>授权服务器与资源服务器的协同配置</li></ul><h2 id="七、性能优化与调试技巧" tabindex="-1"><a class="header-anchor" href="#七、性能优化与调试技巧"><span>七、性能优化与调试技巧</span></a></h2><ul><li>安全组件对整体性能的影响分析</li><li>异常处理与安全日志调试技巧</li><li>常见安全性能问题的诊断和优化策略</li><li>高并发环境下的安全配置及线程优化</li></ul><h2 id="八、实际案例与最佳实践" tabindex="-1"><a class="header-anchor" href="#八、实际案例与最佳实践"><span>八、实际案例与最佳实践</span></a></h2><ul><li>企业级后端安全架构设计方案</li><li>与微服务集成的安全策略（Spring Cloud Security 等）</li><li>安全配置在项目中的模块化管理与环境切换</li><li>实际案例分析：如何解决常见安全漏洞和性能瓶颈</li></ul><h2 id="九、常见问题与面试题精选" tabindex="-1"><a class="header-anchor" href="#九、常见问题与面试题精选"><span>九、常见问题与面试题精选</span></a></h2><ul><li>Spring Security 整体工作原理及流程详解</li><li>如何实现自定义用户认证与授权？</li><li>CSRF、CORS 安全防护的配置与实践</li><li>Spring Security 与 MyBatis、Spring Data 的异同与权衡</li><li>面试中常问的安全场景题解析</li></ul><h1 id="一、spring-security-概述-1" tabindex="-1"><a class="header-anchor" href="#一、spring-security-概述-1"><span>一、Spring Security 概述</span></a></h1><p>Spring Security 是专门为 Java 后端应用设计的一套强大且高度可定制的安全框架，它能够提供全面的认证、授权与防护功能，满足各种 Web 和微服务架构的安全需求。下面我们从几个方面来全面了解 Spring Security 的基本概念与定位。</p><hr><h2 id="_1-什么是-spring-security" tabindex="-1"><a class="header-anchor" href="#_1-什么是-spring-security"><span>1. 什么是 Spring Security？</span></a></h2><p>Spring Security 是基于 Spring 框架的一个安全模块，旨在为 Java 应用提供认证（Authentication）和授权（Authorization）的解决方案，同时也内置了防范常见攻击（如 CSRF、XSS、点击劫持等）的机制。作为一个开源框架，它可以与 Spring MVC、Spring Boot 以及 Spring Cloud 等无缝集成，使得构建安全的后端应用变得简单而高效。</p><hr><h2 id="_2-核心理念与安全架构" tabindex="-1"><a class="header-anchor" href="#_2-核心理念与安全架构"><span>2. 核心理念与安全架构</span></a></h2><p>Spring Security 的核心理念包括以下三个方面：</p><ul><li><strong>身份认证（Authentication）</strong>：验证用户身份，确保用户是系统中合法存在的。例如，通过表单登录、OAuth2 等方式进行用户认证。</li><li><strong>授权（Authorization）</strong>：基于用户角色和权限控制访问资源，确保不同用户拥有不同的访问权限。</li><li><strong>攻击防范</strong>：通过内置机制保护应用免受各种网络攻击，如跨站请求伪造（CSRF）、跨站脚本攻击（XSS）、点击劫持等。</li></ul><p>安全架构方面，Spring Security 采用过滤器链（Filter Chain）的形式，结合核心组件（如 <code>AuthenticationManager</code>、<code>UserDetailsService</code>、<code>SecurityContextHolder</code> 等）构建出一个高度灵活且模块化的安全体系。</p><hr><h2 id="_3-java-后端系统中的安全需求与挑战" tabindex="-1"><a class="header-anchor" href="#_3-java-后端系统中的安全需求与挑战"><span>3. Java 后端系统中的安全需求与挑战</span></a></h2><p>在 Java 后端系统中，安全问题通常涉及以下几个方面：</p><ul><li><strong>用户认证与授权</strong>：确保每个请求都能够经过身份验证，并依据用户角色和权限限制访问。</li><li><strong>数据保护</strong>：防止敏感数据泄露，保证传输过程和存储过程中的数据加密与完整性。</li><li><strong>网络攻击防护</strong>：抵御 CSRF、XSS、SQL 注入和其他针对 Web 应用的攻击。</li><li><strong>分布式安全问题</strong>：在微服务架构中，安全策略需要在跨服务、跨域请求时统一管理和验证。</li></ul><p>这些需求对一个后端系统提出了挑战，尤其在面临高并发、分布式部署时，如何保证安全而不牺牲性能，是每个 Java 后端开发者必须面对的问题。</p><hr><h2 id="_4-spring-security-在-spring-生态中的定位与整合" tabindex="-1"><a class="header-anchor" href="#_4-spring-security-在-spring-生态中的定位与整合"><span>4. Spring Security 在 Spring 生态中的定位与整合</span></a></h2><p>Spring Security 作为 Spring 生态中最重要的安全组件之一，与其他模块的协同工作是其一大亮点：</p><ul><li><strong>与 Spring MVC 集成</strong>：作为 Web 层安全网关，通过过滤器链、拦截器等机制保护控制器逻辑。</li><li><strong>与 Spring Boot 集成</strong>：Spring Boot 提供自动配置，开箱即用地整合 Spring Security，大大简化了安全配置。</li><li><strong>与 Spring Cloud 整合</strong>：在微服务架构中，Spring Security 为各个微服务提供统一的认证与授权方案，与 Eureka、Gateway、Sleuth 等组件无缝对接。</li><li><strong>与其他安全标准整合</strong>：支持 OAuth2、JWT、SSO 等现代安全协议，为企业级应用提供多层次安全保障。</li></ul><blockquote><p>🎯 <strong>总结：</strong> Spring Security 不仅仅是一个安全框架，它是 Java 后端应用安全架构的基石。了解其核心理念、应对真实安全挑战的能力以及与 Spring 生态中其他组件的整合，能帮助开发者构建出高质量、可扩展、可维护的安全系统。</p></blockquote><hr><h1 id="二、身份认证-authentication-1" tabindex="-1"><a class="header-anchor" href="#二、身份认证-authentication-1"><span>二、身份认证 (Authentication)</span></a></h1><p>身份认证是 Spring Security 的核心部分之一，旨在确认用户的身份是否合法。在 Java 后端开发中，身份认证涉及不同的实现机制，从最简单的 HTTP Basic 到复杂的单点登录（SSO）方案，各种方案有不同的应用场景和实现细节。下面我们详细介绍几种常见的认证机制及关键实现细节。</p><hr><h2 id="_1-http-basic-与-digest-认证机制" tabindex="-1"><a class="header-anchor" href="#_1-http-basic-与-digest-认证机制"><span>1. HTTP Basic 与 Digest 认证机制</span></a></h2><h3 id="http-basic-认证" tabindex="-1"><a class="header-anchor" href="#http-basic-认证"><span>HTTP Basic 认证</span></a></h3><ul><li><strong>原理</strong>：客户端在请求时使用 HTTP 头部发送 Base64 编码的用户名和密码，服务器对其进行解码验证。</li><li><strong>优点</strong>：实现简单，无需额外配置，适用于内部系统和简单 API。</li><li><strong>缺点</strong>：安全性较低，除非配合 HTTPS 使用，否则凭据容易泄露；用户体验较差，每次请求都要发送凭据。</li></ul><h3 id="http-digest-认证" tabindex="-1"><a class="header-anchor" href="#http-digest-认证"><span>HTTP Digest 认证</span></a></h3><ul><li><strong>原理</strong>：比 Basic 多了一层摘要加密，通过挑战-应答机制传递加密的摘要值，避免明文传输密码。</li><li><strong>优点</strong>：比 Basic 更安全，不会直接发送密码，防止中间人攻击。</li><li><strong>缺点</strong>：配置更复杂，支持度较低，实际应用中使用不多，建议配合 HTTPS 使用更佳。</li></ul><blockquote><p>实践建议：在生产环境中，如果追求简单实用，通常使用 Basic 认证并配合 HTTPS；Digest 认证由于复杂度较高，应用较少。</p></blockquote><hr><h2 id="_2-表单登录-自定义登录页面、成功与失败处理" tabindex="-1"><a class="header-anchor" href="#_2-表单登录-自定义登录页面、成功与失败处理"><span>2. 表单登录：自定义登录页面、成功与失败处理</span></a></h2><p>表单登录是企业应用中最常用的认证方式，它允许开发者根据业务需求自定义登录页面和认证流程：</p><ul><li><p><strong>自定义登录页面</strong>：通过配置安全过滤器或自定义 Security 配置类，指定登录 URL 和登录页面视图。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableWebSecurity</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SecurityConfig</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebSecurityConfigurerAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">formLogin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loginPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/login&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 自定义登录页面</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">defaultSuccessUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/dashboard&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 成功后跳转页面</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">failureUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/login?error=true&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 认证失败跳转页面</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">permitAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>成功与失败处理</strong>：</p><ul><li><strong>成功处理</strong>：可通过自定义 AuthenticationSuccessHandler 进行处理，如记录日志、生成 Token 等。</li><li><strong>失败处理</strong>：自定义 AuthenticationFailureHandler，捕获认证异常，统一返回错误信息或跳转错误页面。</li></ul></li></ul><blockquote><p>实践建议：尽可能提供用户友好、可定制的登录界面，并合理处理登录失败的信息反馈。</p></blockquote><hr><h2 id="_3-自定义-userdetailsservice-与-authenticationprovider-实现细节" tabindex="-1"><a class="header-anchor" href="#_3-自定义-userdetailsservice-与-authenticationprovider-实现细节"><span>3. 自定义 UserDetailsService 与 AuthenticationProvider 实现细节</span></a></h2><p>Spring Security 默认通过 <code>UserDetailsService</code> 获取用户信息，但在实际业务中，通常需要自定义实现来适应业务需求。</p><h3 id="自定义-userdetailsservice" tabindex="-1"><a class="header-anchor" href="#自定义-userdetailsservice"><span>自定义 UserDetailsService</span></a></h3><ul><li><p><strong>作用</strong>：从数据库或其他数据源加载用户数据，并构造 <code>UserDetails</code> 对象，包含用户名、密码、权限等信息。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Service</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CustomUserDetailsService</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDetailsService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserRepository</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDetails</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadUserByUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UsernameNotFoundException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        User</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">findByUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(username);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (user </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UsernameNotFoundException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;User not found&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> org.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">springframework</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">security</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">core</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">userdetails</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPassword</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            AuthorityUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createAuthorityList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ROLE_USER&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="自定义-authenticationprovider" tabindex="-1"><a class="header-anchor" href="#自定义-authenticationprovider"><span>自定义 AuthenticationProvider</span></a></h3><ul><li><p><strong>作用</strong>：扩展默认认证逻辑，在验证用户身份时提供更细粒度的控制，例如结合验证码、短信验证码、二次认证等多因素认证。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CustomAuthenticationProvider</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AuthenticationProvider</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CustomUserDetailsService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userDetailsService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Authentication</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> authenticate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Authentication</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> authentication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AuthenticationException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> username</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> authentication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> password</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (String) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">authentication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getCredentials</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        UserDetails</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userDetails</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> userDetailsService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loadUserByUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(username);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BCryptPasswordEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">matches</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(password, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">userDetails</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPassword</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BadCredentialsException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Password is incorrect&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UsernamePasswordAuthenticationToken</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(username, password, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">userDetails</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAuthorities</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> supports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">authentication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> UsernamePasswordAuthenticationToken</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isAssignableFrom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(authentication);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>实践建议：自定义的 <code>UserDetailsService</code> 和 <code>AuthenticationProvider</code> 应与具体业务数据源紧密结合，确保认证逻辑满足业务需求。同时注意密码加密和异常处理。</p></blockquote><hr><h2 id="_4-remember-me-机制-持久化登录与-cookie-管理" tabindex="-1"><a class="header-anchor" href="#_4-remember-me-机制-持久化登录与-cookie-管理"><span>4. Remember-Me 机制：持久化登录与 Cookie 管理</span></a></h2><p>Remember-Me 功能允许用户在登录后关闭浏览器依然保持登录状态，常用于提升用户体验。</p><ul><li><p><strong>实现原理</strong>：</p><ul><li>通过在 Cookie 中存储持久化的 Token（通常是用户名、密码散列、过期时间等）。</li><li>服务器端采用 <code>PersistentTokenRepository</code> 管理 Token 的生成、验证和清理。</li></ul></li><li><p><strong>配置示例</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    http</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 其他配置...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rememberMe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rememberMeParameter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;remember-me&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tokenRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tokenRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tokenValiditySeconds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1209600</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 14 天有效期</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PersistentTokenRepository</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tokenRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    JdbcTokenRepositoryImpl</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> repo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> JdbcTokenRepositoryImpl</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    repo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setDataSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dataSource);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> repo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>实践建议：合理设计 Remember-Me 功能，确保 Token 存储安全。特别是在分布式环境下，需要考虑 Session 与 Token 的一致性管理。</p></blockquote><hr><h2 id="_5-单点登录-sso-基础概念与实现思路" tabindex="-1"><a class="header-anchor" href="#_5-单点登录-sso-基础概念与实现思路"><span>5. 单点登录（SSO）基础概念与实现思路</span></a></h2><p>单点登录（Single Sign-On, SSO）允许用户在一个系统中一次登录后，跨多个相关系统无缝访问。SSO 是分布式系统安全架构中的重要组件。</p><h3 id="核心思路" tabindex="-1"><a class="header-anchor" href="#核心思路"><span>核心思路：</span></a></h3><ul><li><strong>统一认证中心</strong>：所有应用通过同一认证服务进行身份验证，认证成功后返回认证令牌（Token）。</li><li><strong>共享 Token 机制</strong>：各个子系统通过验证该 Token 来判断用户身份，而不需要重复登录。</li><li><strong>会话管理</strong>：需要在分布式系统中保持会话数据一致，常用方案包括 JWT、OAuth2 等。</li></ul><h3 id="常见实现方式" tabindex="-1"><a class="header-anchor" href="#常见实现方式"><span>常见实现方式：</span></a></h3><ul><li><strong>OAuth2 实现 SSO</strong>：作为认证服务器和资源服务器协同工作，实现跨域单点登录。</li><li><strong>JWT</strong>：通过无状态的令牌机制，保证在分布式环境中的安全性和可伸缩性。</li></ul><blockquote><p>实践建议：</p><ul><li>SSO 的实施非常复杂，适用于大型系统。对于中小型系统，可以采用传统的多应用共享 Session 或者使用 Spring Cloud Security 体系中的 OAuth2 实现。</li></ul></blockquote><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本章节全面介绍了身份认证的各个核心环节，从基本的 HTTP 认证、表单登录，到自定义用户认证、Remember-Me 功能，再到分布式环境下的 SSO 实现思路。每一个部分都设计到 Java 后端开发中最关键的安全需求，同时也体现出 Spring Security 提供的高度模块化和灵活可扩展的特性。通过实践建议与示例代码，开发者可以根据项目需求选择合适的身份认证方案。</p><h1 id="三、授权-authorization-1" tabindex="-1"><a class="header-anchor" href="#三、授权-authorization-1"><span>三、授权 (Authorization)</span></a></h1><p>授权是 Spring Security 的关键功能之一，用于控制用户对系统资源的访问权限。它确保只有具备适当权限的用户才能访问特定资源。下面我们从基于角色的授权、方法级安全、URL 访问控制和数据层授权四个方面详细讨论授权的实现与策略。</p><hr><h2 id="_1-基于角色的授权-role-based-access-control-rbac" tabindex="-1"><a class="header-anchor" href="#_1-基于角色的授权-role-based-access-control-rbac"><span>1. 基于角色的授权（Role-Based Access Control, RBAC）</span></a></h2><p>基于角色的授权（RBAC）是最常见的权限控制机制，其核心思想是通过将权限分配给特定角色，然后将角色分配给用户，进而控制对资源的访问。</p><ul><li><p><strong>定义角色与权限</strong>： 角色通常表示用户的身份，如 ADMIN、USER 等；权限则定义该角色可以执行哪些操作。</p></li><li><p><strong>配置角色授权</strong>： Spring Security 支持在安全配置中为 URL 或方法定义角色访问规则。例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableWebSecurity</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SecurityConfig</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebSecurityConfigurerAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">authorizeRequests</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">antMatchers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/admin/**&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasRole</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ADMIN&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">antMatchers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/user/**&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasAnyRole</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;USER&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ADMIN&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">anyRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">authenticated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">formLogin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>🎯 实践建议：确保角色与权限设计合理，避免权限过于宽泛或过于细致造成管理复杂性。</p></blockquote><hr><h2 id="_2-方法级安全-preauthorize、-secured、-postauthorize-的使用" tabindex="-1"><a class="header-anchor" href="#_2-方法级安全-preauthorize、-secured、-postauthorize-的使用"><span>2. 方法级安全：<code>@PreAuthorize</code>、<code>@Secured</code>、<code>@PostAuthorize</code> 的使用</span></a></h2><p>在 Spring Security 中，方法级安全可以通过注解直接在服务层进行细粒度的安全控制，避免将安全逻辑分散在控制器层。</p><ul><li><p><strong>@PreAuthorize</strong> 在方法执行之前进行权限判断。支持 SpEL 表达式。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PreAuthorize</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hasRole(&#39;ADMIN&#39;)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> deleteUser</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> id) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 删除用户操作</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>@Secured</strong> 指定允许访问该方法的角色，语法较简单但不支持复杂表达式。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Secured</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ROLE_ADMIN&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> updateUser</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> user) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 更新用户操作</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>@PostAuthorize</strong> 在方法执行后进行权限检查，常用于需要根据方法执行结果判断权限的场景。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostAuthorize</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;returnObject.owner == authentication.name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Document</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getDocument</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> id) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> documentRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">findById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(id).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">orElse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>💡 建议：</p><ul><li>优先使用 <code>@PreAuthorize</code>，它通常能在方法执行前阻止无权限请求，从而降低系统负担。</li><li>根据业务需求选择合适的注解进行权限细化。</li></ul></blockquote><hr><h2 id="_3-url-权限控制-安全拦截与访问规则配置" tabindex="-1"><a class="header-anchor" href="#_3-url-权限控制-安全拦截与访问规则配置"><span>3. URL 权限控制：安全拦截与访问规则配置</span></a></h2><p>对于基于 Web 的资源访问，除了方法级安全外，通过 URL 访问控制也是常用的授权手段。Spring Security 能通过配置 HTTP 请求路径与权限规则来实现这一目标。</p><ul><li><p><strong>配置方式</strong>： 在 <code>HttpSecurity</code> 的 <code>authorizeRequests()</code> 方法中配置 URL 与角色对应关系。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableWebSecurity</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SecurityConfig</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebSecurityConfigurerAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">authorizeRequests</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">antMatchers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/admin/**&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasRole</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ADMIN&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">antMatchers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/public/**&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">permitAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">anyRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">authenticated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">formLogin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>拦截器与安全过滤链</strong>： Spring Security 基于过滤器链来实现 URL 权限控制，所有 HTTP 请求都会经过该链条，根据设定的规则进行匹配与验证。</p></li></ul><blockquote><p>🎯 实践建议：</p><ul><li>根据业务需求细粒度地划分 URL 规则，确保用户只能访问其有权访问的资源。</li><li>在设计访问规则时，注意路径排序和优先级，防止不必要的权限覆盖。</li></ul></blockquote><hr><h2 id="_4-数据层授权与资源保护策略" tabindex="-1"><a class="header-anchor" href="#_4-数据层授权与资源保护策略"><span>4. 数据层授权与资源保护策略</span></a></h2><p>除了 Web 层的访问控制，数据层授权同样重要。确保用户只能访问其有权限的数据，防止敏感信息泄露，是企业级系统常见的需求。</p><ul><li><p><strong>数据库级别控制</strong>：</p><ul><li>使用 SQL 权限、视图等手段，从数据库角度限制数据访问。</li><li>应用层应通过 Repository 层或 Service 层，对数据进行进一步过滤和授权。</li></ul></li><li><p><strong>应用层数据授权</strong>：</p><ul><li>在 Service 层根据用户身份动态过滤查询结果，例如通过 SpEL 结合方法级安全。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PreAuthorize</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hasRole(&#39;ADMIN&#39;) or #userId == principal.id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Order</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getUserOrders</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> userId) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> orderRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">findByUserId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(userId);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>资源保护策略</strong>：</p><ul><li>对敏感数据进行脱敏处理。</li><li>在返回 API 时，只暴露必要字段，使用 DTO 层进一步隔离 Entity。</li></ul></li></ul><blockquote><p>⚠️ 边界提示：数据层权限控制需要在多个层面协同工作，既依赖于数据库配置，也依赖于应用逻辑，整体策略必须贯穿于系统设计，避免单一依赖某一种手段。</p></blockquote><hr><h2 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h2><p>授权是 Spring Security 的核心功能，确保系统资源只能被合法用户访问。通过基于角色、方法级安全和 URL 权限控制，可以实现精细化的授权策略；同时，对数据层的授权和资源保护也非常重要。合理的授权体系不仅提高了系统安全性，也使得业务逻辑更加清晰与模块化，是构建企业级应用必不可少的一环。</p><hr><h1 id="四、安全配置与自定义扩展-1" tabindex="-1"><a class="header-anchor" href="#四、安全配置与自定义扩展-1"><span>四、安全配置与自定义扩展</span></a></h1><p>在 Spring Security 中，除了内置的默认配置外，开发者还可以通过自定义安全配置和扩展点来满足复杂业务需求。本章将详细介绍如何启用 Spring Security、构建自定义过滤器链、自定义登录注销流程，管理安全上下文，及在多环境与模块化项目中进行安全配置。</p><hr><h2 id="_1-启动-spring-security-enablewebsecurity-与-websecurityconfigureradapter" tabindex="-1"><a class="header-anchor" href="#_1-启动-spring-security-enablewebsecurity-与-websecurityconfigureradapter"><span>1. 启动 Spring Security：<code>@EnableWebSecurity</code> 与 WebSecurityConfigurerAdapter</span></a></h2><h3 id="启用安全机制" tabindex="-1"><a class="header-anchor" href="#启用安全机制"><span>- 启用安全机制</span></a></h3><ul><li>使用 <code>@EnableWebSecurity</code> 注解开启 Spring Security 功能，这是所有安全配置的入口。</li><li>通常在配置类上加上 <code>@Configuration</code> 与 <code>@EnableWebSecurity</code>，并继承 <code>WebSecurityConfigurerAdapter</code> 来定制安全策略。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableWebSecurity</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SecurityConfig</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebSecurityConfigurerAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        http</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 允许所有用户访问登录页面</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">authorizeRequests</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">antMatchers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/login&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/public/**&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">permitAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">anyRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">authenticated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 配置表单登录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">formLogin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loginPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/login&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">defaultSuccessUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/home&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">failureUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/login?error=true&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">permitAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 配置注销</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">logout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">logoutUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/logout&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">logoutSuccessUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/login?logout&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">permitAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>🎯 提示：<code>WebSecurityConfigurerAdapter</code> 允许你覆盖默认的安全配置，方便添加自定义逻辑。</p></blockquote><hr><h2 id="_2-自定义认证、授权过滤器-filterchain-的实现" tabindex="-1"><a class="header-anchor" href="#_2-自定义认证、授权过滤器-filterchain-的实现"><span>2. 自定义认证、授权过滤器（FilterChain）的实现</span></a></h2><h3 id="自定义-filterchain-组件" tabindex="-1"><a class="header-anchor" href="#自定义-filterchain-组件"><span>- 自定义 FilterChain 组件</span></a></h3><ul><li>Spring Security 的核心机制基于过滤器链（FilterChain），每个过滤器处理一部分安全逻辑，如认证、授权、异常处理等。</li><li>开发者可以通过扩展 <code>OncePerRequestFilter</code> 或实现其他 Filter 接口来自定义认证或授权逻辑。</li></ul><h3 id="示例-自定义认证过滤器" tabindex="-1"><a class="header-anchor" href="#示例-自定义认证过滤器"><span>示例：自定义认证过滤器</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CustomAuthenticationFilter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OncePerRequestFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doFilterInternal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                                    HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                                    FilterChain</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> filterChain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                                    throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 自定义认证逻辑，例如校验 Token 或签名</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> token</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getHeader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;X-Custom-Token&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (token </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> validateToken</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(token)) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 将认证信息存入 SecurityContextHolder</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            SecurityContextHolder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAuthentication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UsernamePasswordAuthenticationToken</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;user&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">AuthorityUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createAuthorityList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ROLE_USER&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        filterChain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">doFilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request, response);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> validateToken</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> token</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 实际验证逻辑，例如解密、校验签名</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;valid-token&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(token);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>实践建议：自定义过滤器要注意放置在合适的顺序中，可通过 Security 配置中的 <code>addFilterBefore</code> 或 <code>addFilterAfter</code> 方法进行定位。</p></blockquote><hr><h2 id="_3-自定义登录与注销流程" tabindex="-1"><a class="header-anchor" href="#_3-自定义登录与注销流程"><span>3. 自定义登录与注销流程</span></a></h2><h3 id="自定义登录流程" tabindex="-1"><a class="header-anchor" href="#自定义登录流程"><span>- 自定义登录流程</span></a></h3><ul><li>通过配置表单登录，可以自定义登录页面、登录成功和失败的处理逻辑。</li><li>可实现自定义 <code>AuthenticationSuccessHandler</code> 与 <code>AuthenticationFailureHandler</code>。</li></ul><h4 id="示例-自定义登录成功处理" tabindex="-1"><a class="header-anchor" href="#示例-自定义登录成功处理"><span>示例：自定义登录成功处理</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CustomAuthenticationSuccessHandler</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AuthenticationSuccessHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onAuthenticationSuccess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletRequest</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                                        HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">                                        Authentication</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> authentication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServletException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 日志记录、生成 JWT、重定向</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sendRedirect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/home&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在安全配置中引入自定义处理器：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">formLogin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loginPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/login&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">successHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(customAuthenticationSuccessHandler)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 指定自定义成功处理器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">failureUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/login?error=true&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">permitAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义注销流程" tabindex="-1"><a class="header-anchor" href="#自定义注销流程"><span>- 自定义注销流程</span></a></h3><ul><li>可以自定义注销 URL、注销成功处理逻辑，并清除相关安全上下文数据。</li></ul><h4 id="示例-自定义注销处理" tabindex="-1"><a class="header-anchor" href="#示例-自定义注销处理"><span>示例：自定义注销处理</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">logout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">logoutUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/logout&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">logoutSuccessHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((request, response, authentication) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sendRedirect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/login?logout&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">permitAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4-安全上下文-securitycontextholder-的管理与线程安全" tabindex="-1"><a class="header-anchor" href="#_4-安全上下文-securitycontextholder-的管理与线程安全"><span>4. 安全上下文（SecurityContextHolder）的管理与线程安全</span></a></h2><h3 id="安全上下文的重要性" tabindex="-1"><a class="header-anchor" href="#安全上下文的重要性"><span>- 安全上下文的重要性</span></a></h3><ul><li><code>SecurityContextHolder</code> 存储了当前线程中的安全信息，包括已认证用户的信息。</li><li>在进行异步处理或多线程操作时，安全上下文需要特别管理，确保认证信息正确传递。</li></ul><h3 id="线程安全策略" tabindex="-1"><a class="header-anchor" href="#线程安全策略"><span>- 线程安全策略</span></a></h3><ul><li>默认模式是使用线程局部存储（ThreadLocal）。</li><li>在异步任务中可使用 <code>SecurityContextCallable</code> 或 <code>SecurityContextRunnable</code> 包装器，确保安全上下文转移。</li></ul><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例：</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Callable</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> task </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SecurityContextCallable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Authentication</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> auth</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SecurityContextHolder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAuthentication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> auth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>实践建议：在多线程环境中，始终确认安全上下文传递，以避免认证信息丢失或越权风险。</p></blockquote><hr><h2 id="_5-多环境和模块化安全配置实践" tabindex="-1"><a class="header-anchor" href="#_5-多环境和模块化安全配置实践"><span>5. 多环境和模块化安全配置实践</span></a></h2><p>针对不同环境和项目模块，安全配置需要灵活调整：</p><h3 id="多环境安全配置" tabindex="-1"><a class="header-anchor" href="#多环境安全配置"><span>- 多环境安全配置</span></a></h3><ul><li><p>使用 Spring Profiles 区分不同环境的安全策略（例如开发环境与生产环境）。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Profile</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dev&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DevSecurityConfig</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebSecurityConfigurerAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Profile</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;prod&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ProdSecurityConfig</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebSecurityConfigurerAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="模块化安全配置" tabindex="-1"><a class="header-anchor" href="#模块化安全配置"><span>- 模块化安全配置</span></a></h3><ul><li>对于大型项目，可按模块划分不同的安全配置，通过 <code>@ControllerAdvice</code> 和安全过滤器进行局部分离。</li><li>利用 <code>@Order</code> 注解控制多个安全配置的优先级，确保模块间互不干扰。</li></ul><blockquote><p>⚠️ 注意：跨模块安全配置需要考虑系统整体验证和资源共享问题，确保没有安全漏洞被遗漏。</p></blockquote><hr><h2 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h2><p>通过自定义扩展，Spring Security 可以完美适应不同的业务场景。无论是基本的安全配置还是高级自定义需求，都可以通过 <code>@EnableWebSecurity</code>、自定义过滤器、登录注销处理器以及对安全上下文的精细管理来实现。对于多环境和模块化系统，利用 Spring Profiles 和优先级顺序配置，可以确保安全策略的灵活性和鲁棒性。</p><hr><p>当然，这里是第五章《高级安全功能》的完整内容设计，专为 Java 后端开发者量身打造，强调实战与架构认知：</p><hr><h1 id="五、高级安全功能-1" tabindex="-1"><a class="header-anchor" href="#五、高级安全功能-1"><span>五、高级安全功能</span></a></h1><p>Spring Security 不仅仅是认证和授权工具，它也提供了一整套防御常见 Web 安全攻击的机制。本章将深入讲解 CSRF、CORS、XSS、防点击劫持、Session 管理及安全审计等高级安全特性，帮助你构建更强壮的后端系统。</p><hr><h2 id="_1-csrf-防护机制原理与配置" tabindex="-1"><a class="header-anchor" href="#_1-csrf-防护机制原理与配置"><span>1. CSRF 防护机制原理与配置</span></a></h2><h3 id="什么是-csrf" tabindex="-1"><a class="header-anchor" href="#什么是-csrf"><span>- 什么是 CSRF？</span></a></h3><p>跨站请求伪造（Cross-Site Request Forgery）是一种攻击形式，诱导用户在登录状态下访问恶意请求。例如在用户不知情的情况下向 <code>/transfer</code> 接口发送资金操作。</p><h3 id="spring-security-的默认保护" tabindex="-1"><a class="header-anchor" href="#spring-security-的默认保护"><span>- Spring Security 的默认保护</span></a></h3><p>Spring Security 默认开启 CSRF 防护机制，要求对除 GET 之外的请求必须携带有效的 CSRF token。</p><h3 id="常见配置方式" tabindex="-1"><a class="header-anchor" href="#常见配置方式"><span>- 常见配置方式：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    http</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">csrf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">csrfTokenRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CookieCsrfTokenRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">withHttpOnlyFalse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>CookieCsrfTokenRepository</code> 可在前端框架（如 Vue/React）中读取 CSRF token。</li></ul><h3 id="关闭场景" tabindex="-1"><a class="header-anchor" href="#关闭场景"><span>- 关闭场景：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">csrf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">disable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 不建议生产环境关闭</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>🚨 <strong>实践建议</strong>：仅在前后端完全分离、使用 JWT 的无状态架构中可关闭 CSRF，需结合 CORS 严格限制来源。</p></blockquote><hr><h2 id="_2-跨域资源共享-cors-的安全配置" tabindex="-1"><a class="header-anchor" href="#_2-跨域资源共享-cors-的安全配置"><span>2. 跨域资源共享（CORS）的安全配置</span></a></h2><h3 id="cors-背景" tabindex="-1"><a class="header-anchor" href="#cors-背景"><span>- CORS 背景</span></a></h3><p>跨域请求是当前前后端分离架构的常态，但默认浏览器出于安全限制会阻止跨域访问。需要通过 CORS 显式授权。</p><h3 id="spring-security-中配置方式" tabindex="-1"><a class="header-anchor" href="#spring-security-中配置方式"><span>- Spring Security 中配置方式</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 开启 Spring Security 层的 CORS 支持</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CorsConfigurationSource</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> corsConfigurationSource</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    CorsConfiguration</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> config </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CorsConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAllowedOrigins</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://trusted.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAllowedMethods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;GET&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;POST&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;PUT&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;DELETE&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAllowCredentials</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAllowedHeaders</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    UrlBasedCorsConfigurationSource</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> source </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UrlBasedCorsConfigurationSource</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">registerCorsConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/**&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, config);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>⚠️ 不建议设置为 <code>*</code>，需精确控制来源与方法，避免被恶意调用。</p></blockquote><hr><h2 id="_3-session-管理与并发控制" tabindex="-1"><a class="header-anchor" href="#_3-session-管理与并发控制"><span>3. Session 管理与并发控制</span></a></h2><h3 id="会话劫持与重复登录风险" tabindex="-1"><a class="header-anchor" href="#会话劫持与重复登录风险"><span>- 会话劫持与重复登录风险</span></a></h3><p>攻击者可能通过 Cookie 窃取会话，或一个账号在多个地方反复登录，带来业务风险。</p><h3 id="spring-security-提供的控制方式" tabindex="-1"><a class="header-anchor" href="#spring-security-提供的控制方式"><span>- Spring Security 提供的控制方式</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sessionManagement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maximumSessions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                       // 限制同一账号同时登录数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">maxSessionsPreventsLogin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         // 禁止新会话登录（也可以踢掉旧会话）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="防止会话固定攻击-session-fixation" tabindex="-1"><a class="header-anchor" href="#防止会话固定攻击-session-fixation"><span>- 防止会话固定攻击（Session Fixation）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sessionManagement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sessionFixation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">migrateSession</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 登录后创建新 session，防止攻击</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>🔐 提示：使用 <code>migrateSession()</code> 可以避免攻击者提前植入 session。</p></blockquote><hr><h2 id="_4-防止-xss、点击劫持等常见攻击" tabindex="-1"><a class="header-anchor" href="#_4-防止-xss、点击劫持等常见攻击"><span>4. 防止 XSS、点击劫持等常见攻击</span></a></h2><h3 id="xss-跨站脚本攻击" tabindex="-1"><a class="header-anchor" href="#xss-跨站脚本攻击"><span>- XSS（跨站脚本攻击）</span></a></h3><ul><li><p>Spring Security 默认会通过 HTTP 响应头设置防御：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Content-Security-Policy</span></span>
<span class="line"><span>X-XSS-Protection</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>推荐前端配合使用模板自动转义或设置严格 CSP（Content Security Policy）。</p></li></ul><h3 id="防点击劫持-clickjacking" tabindex="-1"><a class="header-anchor" href="#防点击劫持-clickjacking"><span>- 防点击劫持（Clickjacking）</span></a></h3><ul><li>通过 HTTP 响应头控制页面不能被 iframe 引用：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">headers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">frameOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">deny</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 或 .sameOrigin()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>推荐配置为 <code>DENY</code>，除非业务有嵌入需求。</li></ul><hr><h2 id="_5-安全日志记录与审计机制-监控与告警" tabindex="-1"><a class="header-anchor" href="#_5-安全日志记录与审计机制-监控与告警"><span>5. 安全日志记录与审计机制（监控与告警）</span></a></h2><h3 id="安全日志的重要性" tabindex="-1"><a class="header-anchor" href="#安全日志的重要性"><span>- 安全日志的重要性</span></a></h3><ul><li>登录成功 / 失败</li><li>异常请求 / 拒绝访问</li><li>权限变更、会话异常、中间人攻击等痕迹</li></ul><h3 id="实践方式" tabindex="-1"><a class="header-anchor" href="#实践方式"><span>- 实践方式</span></a></h3><h4 id="使用-spring-的事件监听机制" tabindex="-1"><a class="header-anchor" href="#使用-spring-的事件监听机制"><span>- 使用 Spring 的事件监听机制：</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SecurityEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EventListener</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onAuthenticationSuccess</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AuthenticationSuccessEvent</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;登录成功用户：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAuthentication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EventListener</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onAuthenticationFailure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AbstractAuthenticationFailureEvent</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;登录失败：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接入日志系统-如-elk、sentry、skywalking" tabindex="-1"><a class="header-anchor" href="#接入日志系统-如-elk、sentry、skywalking"><span>- 接入日志系统（如 ELK、Sentry、SkyWalking）</span></a></h4><ul><li>日志需分类归档、配合 traceId 追踪请求。</li><li>配置告警规则：如暴力破解、异常流量、越权访问等。</li></ul><blockquote><p>🎯 建议开发环境也保留基本安全日志，便于早期发现潜在风险。</p></blockquote><hr><h2 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3"><span>总结</span></a></h2><p>Spring Security 提供了完整的高级安全防护机制，从 CSRF、CORS 到 XSS、Session 控制，再到审计与日志。这些不是“可选项”，而是线上系统的“基本功”，尤其是涉及金融、电商、数据管理等敏感场景时，必须构建这一层深度防御体系。</p><hr><h1 id="六、与-oauth2-jwt-的整合实践-1" tabindex="-1"><a class="header-anchor" href="#六、与-oauth2-jwt-的整合实践-1"><span>六、与 OAuth2 / JWT 的整合实践</span></a></h1><p>现代应用中，尤其是前后端分离架构、微服务系统、移动端接入场景下，传统的 Session/ Cookie 模式逐渐被 OAuth2 和 JWT 替代。本章旨在拆解 OAuth2 授权流程、JWT 的核心机制及其与 Spring Security 的整合方式。</p><hr><h2 id="_1-oauth2-基础概念与授权模式" tabindex="-1"><a class="header-anchor" href="#_1-oauth2-基础概念与授权模式"><span>1. OAuth2 基础概念与授权模式</span></a></h2><h3 id="oauth2-是什么" tabindex="-1"><a class="header-anchor" href="#oauth2-是什么"><span>- OAuth2 是什么？</span></a></h3><p>OAuth2 是一种授权协议，允许用户授权第三方访问资源而不暴露密码。它广泛应用于系统间安全授权、用户身份统一认证（如 GitHub 登录）等场景。</p><h3 id="核心角色" tabindex="-1"><a class="header-anchor" href="#核心角色"><span>- 核心角色：</span></a></h3><ul><li><strong>Resource Owner（资源拥有者）</strong></li><li><strong>Client（客户端，如 Web 应用、移动 App）</strong></li><li><strong>Authorization Server（授权服务器）</strong></li><li><strong>Resource Server（资源服务器）</strong></li></ul><h3 id="常见授权模式" tabindex="-1"><a class="header-anchor" href="#常见授权模式"><span>- 常见授权模式：</span></a></h3><table><thead><tr><th>授权模式</th><th>应用场景</th><th>是否推荐</th></tr></thead><tbody><tr><td>授权码模式</td><td>浏览器 + 服务器端（标准推荐）</td><td>✅ 强烈推荐</td></tr><tr><td>简化模式</td><td>纯前端应用（已被废弃）</td><td>❌ 不再推荐</td></tr><tr><td>密码模式</td><td>自有 App 快速接入</td><td>⚠️ 不推荐生产</td></tr><tr><td>客户端模式</td><td>服务间通信（如微服务调用）</td><td>✅ 合理使用</td></tr></tbody></table><hr><h2 id="_2-spring-security-oauth2-集成与配置详解" tabindex="-1"><a class="header-anchor" href="#_2-spring-security-oauth2-集成与配置详解"><span>2. Spring Security OAuth2 集成与配置详解</span></a></h2><blockquote><p>⚠️ 注意：Spring 官方已不再推荐使用 <code>spring-security-oauth2</code> 老库，建议使用 Spring Authorization Server（后面会提及）。</p></blockquote><h3 id="快速整合授权服务器-旧方式" tabindex="-1"><a class="header-anchor" href="#快速整合授权服务器-旧方式"><span>- 快速整合授权服务器（旧方式）</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 旧版依赖（现在不推荐） --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.security.oauth&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-security-oauth2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置授权服务、令牌生成与存储方式（内存 / Redis / JWT）</li><li>自定义 <code>ClientDetailsService</code> 管理第三方应用权限</li></ul><h3 id="更现代的做法-使用-spring-authorization-server" tabindex="-1"><a class="header-anchor" href="#更现代的做法-使用-spring-authorization-server"><span>- 更现代的做法：使用 Spring Authorization Server</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-oauth2-authorization-server&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>支持 OAuth2、OpenID Connect、PKCE 等协议</li><li>更加模块化、适应未来版本变迁</li></ul><hr><h2 id="_3-无状态认证-jwt-json-web-token-应用与优势" tabindex="-1"><a class="header-anchor" href="#_3-无状态认证-jwt-json-web-token-应用与优势"><span>3. 无状态认证：JWT（JSON Web Token）应用与优势</span></a></h2><h3 id="jwt-核心机制" tabindex="-1"><a class="header-anchor" href="#jwt-核心机制"><span>- JWT 核心机制：</span></a></h3><p>JWT = 头部（Header）+ 载荷（Payload）+ 签名（Signature）</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">eyJhbGciOiJIUzI</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">NiIsInR</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cCI</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">IkpXVCJ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">eyJzdWIiOiJ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">VyMSIsInJvbGVzIjpbIlJPTEVfQURNSU</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">iXX</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hR</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">VKx_</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">xZ</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dWOlBd</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gY</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mGiwpA</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">BnV_</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">52</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Ph</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">MeyYHc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>- 优势：</span></a></h3><ul><li>无需 Session，适用于分布式架构</li><li>前后端分离、移动端访问友好</li><li>可扩展字段，自定义载荷信息（如角色、用户 ID）</li></ul><h3 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式"><span>- 使用方式：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UsernamePasswordAuthenticationToken</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> token </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UsernamePasswordAuthenticationToken</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> authorities)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SecurityContextHolder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAuthentication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(token);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>✨ 建议结合 <code>Filter</code> 完成 Token 拦截与验证逻辑，解耦登录逻辑。</p></blockquote><hr><h2 id="_4-授权服务器与资源服务器的协同配置" tabindex="-1"><a class="header-anchor" href="#_4-授权服务器与资源服务器的协同配置"><span>4. 授权服务器与资源服务器的协同配置</span></a></h2><h3 id="授权服务器配置关键点" tabindex="-1"><a class="header-anchor" href="#授权服务器配置关键点"><span>- 授权服务器配置关键点</span></a></h3><ul><li>客户端管理：<code>ClientRegistrationRepository</code></li><li>令牌签发机制：JWT / Opaque（不透明令牌）</li><li>登录认证流程自定义（支持用户名密码、扫码、短信验证码等）</li></ul><h3 id="资源服务器配置关键点" tabindex="-1"><a class="header-anchor" href="#资源服务器配置关键点"><span>- 资源服务器配置关键点</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableResourceServer</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ResourceServerConfig</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ResourceServerConfigurerAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        http</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">authorizeRequests</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">antMatchers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/api/public&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">permitAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">anyRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">authenticated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Token 校验器配置（JWT 解码器）</li><li>Token 解析后的用户信息注入到 <code>SecurityContext</code></li></ul><h3 id="架构演进建议" tabindex="-1"><a class="header-anchor" href="#架构演进建议"><span>- 架构演进建议</span></a></h3><table><thead><tr><th>架构阶段</th><th>授权逻辑</th><th>Token 类型</th><th>会话依赖性</th></tr></thead><tbody><tr><td>单体系统</td><td>本地 Session</td><td>无</td><td>有状态</td></tr><tr><td>前后端分离</td><td>OAuth2 + JWT</td><td>JWT</td><td>无状态</td></tr><tr><td>微服务系统</td><td>OAuth2 + 网关</td><td>JWT</td><td>无状态</td></tr></tbody></table><hr><h2 id="总结-4" tabindex="-1"><a class="header-anchor" href="#总结-4"><span>总结</span></a></h2><p>Spring Security 与 OAuth2 / JWT 的整合是构建现代 Java 安全系统的核心能力。建议后端开发者重点掌握：</p><ul><li>OAuth2 的授权流程与模式适配</li><li>如何通过 Spring Security 构建 JWT 的签发与解析逻辑</li><li>授权服务器与资源服务器的职责划分</li><li>面向未来：向 Spring Authorization Server 平滑过渡</li></ul><hr><p>当然，下面是《七、性能优化与调试技巧》章节的内容，聚焦于 Spring Security 在高负载场景下的优化、常见调试问题的解决策略和性能瓶颈的排查。</p><hr><h1 id="七、性能优化与调试技巧-1" tabindex="-1"><a class="header-anchor" href="#七、性能优化与调试技巧-1"><span>七、性能优化与调试技巧</span></a></h1><p>Spring Security 是 Web 应用中至关重要的安全层，但其本身可能成为系统性能的瓶颈，特别是在高并发、大流量的场景中。优化 Spring Security 的性能、有效地调试安全问题是构建高效安全系统的关键。</p><hr><h2 id="_1-安全组件对整体性能的影响分析" tabindex="-1"><a class="header-anchor" href="#_1-安全组件对整体性能的影响分析"><span>1. 安全组件对整体性能的影响分析</span></a></h2><h3 id="安全过滤器链-filter-chain-性能瓶颈" tabindex="-1"><a class="header-anchor" href="#安全过滤器链-filter-chain-性能瓶颈"><span>- 安全过滤器链（Filter Chain）性能瓶颈</span></a></h3><p>Spring Security 的所有请求都会通过过滤器链进行安全验证。这些过滤器的执行顺序、复杂度、是否过多的认证与授权判断都会影响请求的响应时间。</p><ul><li><strong>性能开销</strong>：包括 Session 验证、JWT 解码、权限校验等</li><li><strong>优化建议</strong>：按需定制过滤器链，避免不必要的过滤器</li><li><strong>缓存机制</strong>：例如权限信息的缓存，避免每次都从数据库加载</li></ul><h3 id="数据库查询优化" tabindex="-1"><a class="header-anchor" href="#数据库查询优化"><span>- 数据库查询优化</span></a></h3><p>许多 Spring Security 配置（如用户认证、角色查询）需要与数据库交互，尤其是使用基于数据库的认证机制时。数据库查询效率对性能的影响不可忽视。</p><ul><li><strong>缓存认证数据</strong>：可以通过缓存用户角色、权限等信息减少数据库访问</li><li><strong>连接池管理</strong>：优化数据库连接池，减少连接建立的开销</li></ul><hr><h2 id="_2-异常处理与安全日志调试技巧" tabindex="-1"><a class="header-anchor" href="#_2-异常处理与安全日志调试技巧"><span>2. 异常处理与安全日志调试技巧</span></a></h2><h3 id="安全相关异常的捕获与处理" tabindex="-1"><a class="header-anchor" href="#安全相关异常的捕获与处理"><span>- 安全相关异常的捕获与处理</span></a></h3><p>在 Spring Security 中，登录失败、权限不足等异常会触发安全相关的异常。合理配置异常处理机制，不仅能提升用户体验，还能帮助开发者快速定位问题。</p><ul><li><strong>自定义异常处理</strong>：使用 <code>@ExceptionHandler</code> 处理特定安全异常</li><li><strong>异常日志输出</strong>：记录详细的异常堆栈、异常类型、用户信息等</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ControllerAdvice</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SecurityExceptionHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ExceptionHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">UsernameNotFoundException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> handleUsernameNotFound</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UsernameNotFoundException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> ex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 记录异常日志，跳转到登录失败页面</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;redirect:/login?error&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安全日志调试技巧" tabindex="-1"><a class="header-anchor" href="#安全日志调试技巧"><span>- 安全日志调试技巧</span></a></h3><ul><li><strong>启用详细日志</strong>：通过 <code>application.properties</code> 设置日志级别，方便跟踪安全操作</li></ul><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">logging.level.org.springframework.security</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">DEBUG</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">logging.level.org.hibernate.SQL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">DEBUG</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>审计日志</strong>：记录重要的安全事件，如登录、登出、权限更改等</li></ul><hr><h2 id="_3-常见安全性能问题的诊断和优化策略" tabindex="-1"><a class="header-anchor" href="#_3-常见安全性能问题的诊断和优化策略"><span>3. 常见安全性能问题的诊断和优化策略</span></a></h2><h3 id="性能瓶颈诊断-cpu-与内存占用" tabindex="-1"><a class="header-anchor" href="#性能瓶颈诊断-cpu-与内存占用"><span>- 性能瓶颈诊断：CPU 与内存占用</span></a></h3><ul><li><strong>监控系统性能</strong>：使用 <code>Spring Boot Actuator</code> 或 <code>Prometheus</code> 等工具监控系统的 CPU、内存占用，尤其是在安全相关操作时（如认证过程）。</li><li><strong>调优认证流程</strong>：例如，对数据库认证可以通过懒加载技术或异步认证机制来减少同步阻塞。</li></ul><h3 id="缓存优化-减轻认证与授权压力" tabindex="-1"><a class="header-anchor" href="#缓存优化-减轻认证与授权压力"><span>- 缓存优化：减轻认证与授权压力</span></a></h3><ul><li><strong>用户信息缓存</strong>：对于不常变动的用户信息（如角色、权限），可以使用 <code>Spring Cache</code> 或外部缓存系统（如 Redis）来缓存。</li><li><strong>认证缓存</strong>：使用缓存机制存储认证令牌，避免重复的身份认证查询。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Cacheable</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;users&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;#username&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDetails</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadUserByUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> username) throws UsernameNotFoundException {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">findByUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(username);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-jwt-减少数据库访问" tabindex="-1"><a class="header-anchor" href="#使用-jwt-减少数据库访问"><span>- 使用 JWT 减少数据库访问</span></a></h3><ul><li>使用 JWT 令牌认证方式，避免每次请求都访问数据库，直接从令牌中获取用户信息，降低性能压力。</li></ul><hr><h2 id="_4-高并发环境下的安全配置及线程优化" tabindex="-1"><a class="header-anchor" href="#_4-高并发环境下的安全配置及线程优化"><span>4. 高并发环境下的安全配置及线程优化</span></a></h2><h3 id="会话管理优化-防止会话过度创建" tabindex="-1"><a class="header-anchor" href="#会话管理优化-防止会话过度创建"><span>- 会话管理优化：防止会话过度创建</span></a></h3><p>在高并发的环境下，大量并发用户请求可能会导致 Session 的创建压力，进而影响性能。</p><ul><li><strong>最大会话数限制</strong>：配置单个用户的最大会话数，避免多重登录的性能压力。</li><li><strong>会话持久化</strong>：合理使用 <code>HttpSession</code> 配置，避免不必要的会话存储。</li></ul><h3 id="异步请求处理-提升安全处理效率" tabindex="-1"><a class="header-anchor" href="#异步请求处理-提升安全处理效率"><span>- 异步请求处理：提升安全处理效率</span></a></h3><p>在处理高并发请求时，异步处理是一种提升性能的有效手段。Spring Security 可以与异步请求（如 <code>@Async</code>）结合，避免阻塞请求的流程。</p><ul><li>使用 <code>DeferredResult</code> 或 <code>WebAsyncTask</code> 处理异步登录和认证操作，提升响应性能。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/async-login&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DeferredResult</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> asyncLogin</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestParam</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> username) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    DeferredResult</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DeferredResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    taskExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">execute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 执行认证过程</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setResult</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Success&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线程池管理与优化" tabindex="-1"><a class="header-anchor" href="#线程池管理与优化"><span>- 线程池管理与优化</span></a></h3><p>使用线程池优化请求的处理，并合理分配计算资源。Spring Boot 提供了线程池的支持，可以根据业务需求定制线程池配置。</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.task.execution.pool.core-size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">10</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.task.execution.pool.max-size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">100</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.task.execution.pool.queue-capacity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">500</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="总结-5" tabindex="-1"><a class="header-anchor" href="#总结-5"><span>总结</span></a></h2><p>Spring Security 作为核心安全框架，其性能优化对整体系统的流畅性至关重要。通过合理的配置与调试，开发者可以有效地解决安全功能带来的性能瓶颈，并为高并发、高流量场景提供优化方案。重点关注以下几个方面：</p><ul><li><strong>性能优化</strong>：通过缓存、JWT 认证减少数据库压力</li><li><strong>安全日志</strong>：合理配置日志以便追踪安全事件</li><li><strong>高并发优化</strong>：合理使用异步机制和线程池，提升系统响应速度</li></ul><h1 id="八、实际案例与最佳实践-1" tabindex="-1"><a class="header-anchor" href="#八、实际案例与最佳实践-1"><span>八、实际案例与最佳实践</span></a></h1><p>在实际开发中，Spring Security 的应用不仅仅是简单的权限控制，它涉及到如何在复杂的企业系统、微服务架构和高并发场景中进行安全设计与实现。以下内容总结了一些典型的安全架构设计方案、与微服务的安全策略、项目中常见的安全漏洞以及性能瓶颈解决方案，帮助开发者在实践中有效地应对这些问题。</p><hr><h2 id="_1-企业级后端安全架构设计方案" tabindex="-1"><a class="header-anchor" href="#_1-企业级后端安全架构设计方案"><span>1. 企业级后端安全架构设计方案</span></a></h2><p>企业级后端系统通常需要支持复杂的安全策略，涵盖身份认证、权限控制、审计日志、安全审计、数据加密等。Spring Security 为此提供了灵活的配置与扩展能力。</p><h4 id="设计要点" tabindex="-1"><a class="header-anchor" href="#设计要点"><span>设计要点：</span></a></h4><ul><li><strong>集中式认证与授权</strong>：可以使用单点登录（SSO）来简化多个应用之间的身份认证，确保用户登录信息在多个服务间共享。</li><li><strong>细粒度权限控制</strong>：根据角色、权限、资源来控制用户对系统的访问。结合方法级注解（如 <code>@PreAuthorize</code>）进行精细的授权控制。</li><li><strong>审计与日志记录</strong>：通过配置 <code>AuditEventRepository</code> 实现安全事件的审计记录，确保合规性和追踪。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableWebSecurity</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SecurityConfig</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebSecurityConfigurerAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        http</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">authorizeRequests</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">antMatchers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/admin/**&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasRole</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ADMIN&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">antMatchers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/user/**&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasRole</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;USER&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">anyRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">authenticated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实践建议" tabindex="-1"><a class="header-anchor" href="#实践建议"><span>实践建议：</span></a></h4><ul><li>使用 <strong>JWT</strong> 进行无状态认证，减少会话管理的复杂度</li><li>安全与业务分离，权限逻辑放在单独的服务或模块中</li><li>启用强密码策略，并结合 CAPTCHA 防止暴力破解</li></ul><hr><h2 id="_2-与微服务集成的安全策略-spring-cloud-security-等" tabindex="-1"><a class="header-anchor" href="#_2-与微服务集成的安全策略-spring-cloud-security-等"><span>2. 与微服务集成的安全策略（Spring Cloud Security 等）</span></a></h2><p>在微服务架构中，Spring Security 通常会与 Spring Cloud Security 一起使用，以确保服务之间的安全通信、身份验证、授权和数据保护。</p><h4 id="设计要点-1" tabindex="-1"><a class="header-anchor" href="#设计要点-1"><span>设计要点：</span></a></h4><ul><li><strong>OAuth2 与 JWT</strong>：微服务架构中的认证通常依赖于 OAuth2 协议和 JWT（JSON Web Token）。OAuth2 提供了灵活的授权机制，JWT 用于无状态认证。</li><li><strong>服务间安全通信</strong>：微服务之间的调用可以通过 <strong>Spring Security OAuth2</strong> 来进行保护，确保服务间的身份验证与授权。</li><li><strong>API 网关安全</strong>：使用 API 网关（如 Spring Cloud Gateway）来统一处理认证与授权，避免在每个微服务中重复配置。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableAuthorizationServer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OAuth2Config</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AuthorizationServerConfigurerAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ClientDetailsServiceConfigurer</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> clients</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        clients</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">inMemory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">withClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;my-client&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">secret</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">passwordEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">encode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;secret&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">authorizedGrantTypes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;password&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;refresh_token&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">scopes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;read&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;write&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实践建议-1" tabindex="-1"><a class="header-anchor" href="#实践建议-1"><span>实践建议：</span></a></h4><ul><li>对于微服务应用，优先考虑 <strong>OAuth2 + JWT</strong> 组合，确保可扩展性与安全性</li><li>将服务间调用的安全控制通过 API 网关集中处理，简化微服务间的安全管理</li><li>利用 Spring Cloud Config 实现集中式配置管理，确保统一安全策略</li></ul><hr><h2 id="_3-安全配置在项目中的模块化管理与环境切换" tabindex="-1"><a class="header-anchor" href="#_3-安全配置在项目中的模块化管理与环境切换"><span>3. 安全配置在项目中的模块化管理与环境切换</span></a></h2><p>在实际项目中，随着不同环境（开发、测试、生产）的切换，安全配置的管理可能会变得复杂。合理的模块化与配置切换可以有效地提升安全配置的灵活性与可维护性。</p><h4 id="设计要点-2" tabindex="-1"><a class="header-anchor" href="#设计要点-2"><span>设计要点：</span></a></h4><ul><li><strong>配置分离</strong>：使用 Spring 的配置文件（如 <code>application.properties</code> 或 <code>application.yml</code>）管理不同环境下的安全配置，确保开发、测试与生产环境的配置独立。</li><li><strong>Profile 切换</strong>：通过 Spring Profile 机制，在不同的环境中加载不同的安全配置。例如，在开发环境中可以关闭 CSRF 防护，在生产环境中启用强的密码策略。</li></ul><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># application-dev.yml</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.security.csrf.enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># application-prod.yml</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">spring.security.csrf.enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实践建议-2" tabindex="-1"><a class="header-anchor" href="#实践建议-2"><span>实践建议：</span></a></h4><ul><li>使用 <strong>Spring Profiles</strong> 切换环境配置，确保安全配置的灵活性与适应性</li><li>将安全相关配置提取到独立模块中，通过环境变量、配置中心统一管理</li></ul><hr><h2 id="_4-实际案例分析-如何解决常见安全漏洞和性能瓶颈" tabindex="-1"><a class="header-anchor" href="#_4-实际案例分析-如何解决常见安全漏洞和性能瓶颈"><span>4. 实际案例分析：如何解决常见安全漏洞和性能瓶颈</span></a></h2><h4 id="常见安全漏洞分析" tabindex="-1"><a class="header-anchor" href="#常见安全漏洞分析"><span>常见安全漏洞分析</span></a></h4><ol><li><strong>SQL 注入</strong>： <ul><li><strong>问题</strong>：不当的输入验证和拼接 SQL 语句导致的注入漏洞。</li><li><strong>解决方案</strong>：使用 JPA 的命名参数或 Spring Data 的 <code>@Query</code> 注解，避免使用动态拼接的 SQL。</li></ul></li><li><strong>会话固定攻击</strong>： <ul><li><strong>问题</strong>：攻击者利用合法用户的会话 ID 进行恶意操作。</li><li><strong>解决方案</strong>：启用 <strong>session-fixation</strong> 防护，自动重新生成 Session ID。</li></ul></li><li><strong>暴力破解</strong>： <ul><li><strong>问题</strong>：简单的密码策略或无登录保护措施导致暴力破解攻击。</li><li><strong>解决方案</strong>：使用 Spring Security 的 <strong>密码加密</strong>机制，并结合 <strong>验证码</strong>（CAPTCHA）防止暴力破解。</li></ul></li></ol><h4 id="性能瓶颈分析" tabindex="-1"><a class="header-anchor" href="#性能瓶颈分析"><span>性能瓶颈分析</span></a></h4><ol><li><strong>安全过滤器链性能问题</strong>： <ul><li><strong>问题</strong>：多个过滤器逐个处理请求，导致响应时间变长。</li><li><strong>解决方案</strong>：合理配置过滤器链，尽量减少每个请求的过滤器数量，合并常用逻辑到同一过滤器中。</li></ul></li><li><strong>权限查询性能问题</strong>： <ul><li><strong>问题</strong>：每次请求都要查询权限数据，造成数据库压力。</li><li><strong>解决方案</strong>：利用 <strong>缓存</strong> 技术（如 Redis）缓存角色与权限数据，减少数据库访问次数。</li></ul></li><li><strong>会话管理问题</strong>： <ul><li><strong>问题</strong>：会话管理过度，导致系统负担。</li><li><strong>解决方案</strong>：使用 <strong>无状态认证</strong>（如 JWT），避免会话存储，并使用 <strong>Token</strong> 进行认证。</li></ul></li></ol><h4 id="实践建议-3" tabindex="-1"><a class="header-anchor" href="#实践建议-3"><span>实践建议：</span></a></h4><ul><li>关注 <strong>SQL 注入防护</strong>，避免动态 SQL 拼接</li><li>在 <strong>高并发场景</strong>中，避免过度的会话管理与过滤器使用，使用 <strong>JWT</strong> 减少性能负担</li><li>采用 <strong>API 网关</strong> 管理微服务架构中的认证与授权，简化多服务间的安全配置</li></ul><hr><h2 id="总结-6" tabindex="-1"><a class="header-anchor" href="#总结-6"><span>总结</span></a></h2><p>Spring Security 在企业级应用与微服务架构中的安全设计与实施至关重要。通过合理的架构设计、模块化配置、与微服务的集成、性能优化和安全漏洞的解决，开发者能够高效地构建出既安全又高效的系统。无论是简单的 Web 应用还是复杂的分布式系统，Spring Security 都能为开发者提供强有力的安全支持。</p><h1 id="九、常见问题与面试题精选-1" tabindex="-1"><a class="header-anchor" href="#九、常见问题与面试题精选-1"><span>九、常见问题与面试题精选</span></a></h1><p>Spring Security 作为一个强大的安全框架，涉及到的知识点广泛，涵盖了身份认证、授权管理、防护机制、以及与其他框架的集成等方面。在面试中，面试官通常会通过具体的安全场景问题来考察求职者的安全设计与实现能力。以下是一些常见的 Spring Security 问题及面试题解析。</p><hr><h2 id="_1-spring-security-整体工作原理及流程详解" tabindex="-1"><a class="header-anchor" href="#_1-spring-security-整体工作原理及流程详解"><span>1. Spring Security 整体工作原理及流程详解</span></a></h2><p><strong>问题</strong>：Spring Security 是如何在 Web 应用中实现身份认证和授权的？</p><p><strong>解析</strong>： Spring Security 的工作流程通常分为以下几个步骤：</p><ul><li><strong>请求拦截</strong>：当用户发起请求时，Spring Security 会首先拦截请求，判断用户是否已登录或已通过身份验证。</li><li><strong>认证与授权</strong>：认证过程通过 <code>AuthenticationManager</code> 完成，默认情况下使用 <code>UsernamePasswordAuthenticationFilter</code> 来进行表单登录。授权过程则是通过 <code>AccessDecisionManager</code> 来判断用户是否有权限访问指定资源。</li><li><strong>安全上下文</strong>：一旦用户认证成功，用户信息会存储在 <code>SecurityContextHolder</code> 中，便于后续的授权校验。</li></ul><p><strong>面试要点</strong>：</p><ul><li>了解 Spring Security 中的核心组件：<code>AuthenticationManager</code>、<code>SecurityContextHolder</code>、<code>AccessDecisionManager</code> 等</li><li>熟悉认证与授权过程中的默认过滤器（如 <code>UsernamePasswordAuthenticationFilter</code>）</li></ul><hr><h2 id="_2-如何实现自定义用户认证与授权" tabindex="-1"><a class="header-anchor" href="#_2-如何实现自定义用户认证与授权"><span>2. 如何实现自定义用户认证与授权？</span></a></h2><p><strong>问题</strong>：如果需要自定义用户认证与授权逻辑，应该怎么做？</p><p><strong>解析</strong>： Spring Security 提供了多种自定义方式：</p><ul><li><strong>自定义 <code>UserDetailsService</code></strong>：通过实现 <code>UserDetailsService</code> 接口，自定义用户的加载逻辑，将用户信息（如用户名、密码、角色等）从数据库或其他存储中加载。</li><li><strong>自定义 <code>AuthenticationProvider</code></strong>：可以自定义认证逻辑，例如根据特殊的业务规则来验证用户身份。</li><li><strong>自定义 <code>GrantedAuthority</code></strong>：如果需要特殊的权限控制，可以实现自定义的 <code>GrantedAuthority</code>，并通过 <code>UserDetails</code> 返回给 Spring Security。</li></ul><p><strong>示例代码</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Service</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CustomUserDetailsService</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDetailsService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserDetails</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadUserByUsername</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> username</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UsernameNotFoundException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 从数据库中加载用户信息</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(username, password, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Collections</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">singletonList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SimpleGrantedAuthority</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ROLE_USER&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>面试要点</strong>：</p><ul><li>了解 <code>UserDetailsService</code> 和 <code>AuthenticationProvider</code> 的实现原理</li><li>理解 <code>GrantedAuthority</code> 和 <code>Role</code> 的关系</li></ul><hr><h2 id="_3-csrf、cors-安全防护的配置与实践" tabindex="-1"><a class="header-anchor" href="#_3-csrf、cors-安全防护的配置与实践"><span>3. CSRF、CORS 安全防护的配置与实践</span></a></h2><p><strong>问题</strong>：什么是 CSRF，如何配置防护？如何配置跨域资源共享（CORS）？</p><p><strong>解析</strong>：</p><ul><li><p><strong>CSRF（Cross-Site Request Forgery）</strong> 是一种通过伪造用户请求，诱使用户执行恶意操作的攻击方式。Spring Security 默认启用了 CSRF 防护，但在某些场景下（如 REST API 或前后端分离应用）可能需要禁用。</p><p>配置禁用 CSRF：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> http) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">csrf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">disable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 禁用 CSRF 防护</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>CORS（Cross-Origin Resource Sharing）</strong> 用于解决浏览器的同源策略，允许不同源的请求访问资源。Spring Security 提供了对 CORS 的配置支持，可以通过 <code>CorsConfigurationSource</code> 配置跨域策略。</p><p>配置 CORS：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebSecurityConfig</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebSecurityConfigurerAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> configure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpSecurity</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        http</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">csrf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">disable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CorsConfigurationSource</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> corsConfigurationSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        CorsConfiguration</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CorsConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addAllowedOrigin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addAllowedMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addAllowedHeader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;*&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        UrlBasedCorsConfigurationSource</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> source</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UrlBasedCorsConfigurationSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">registerCorsConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/**&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, configuration);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> source;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>面试要点</strong>：</p><ul><li>了解 CSRF 防护机制与禁用场景</li><li>理解 CORS 的工作原理以及如何配置</li></ul><hr><h2 id="_4-spring-security-与-mybatis、spring-data-的异同与权衡" tabindex="-1"><a class="header-anchor" href="#_4-spring-security-与-mybatis、spring-data-的异同与权衡"><span>4. Spring Security 与 MyBatis、Spring Data 的异同与权衡</span></a></h2><p><strong>问题</strong>：Spring Security 与 MyBatis、Spring Data JPA 的集成有何不同？如何权衡它们的使用？</p><p><strong>解析</strong>：</p><ul><li><strong>Spring Security</strong> 主要负责应用的安全管理，包括身份认证、授权、防护机制等。它与数据访问层（如 MyBatis 和 Spring Data JPA）并无直接关系。</li><li><strong>MyBatis</strong>：作为一个 SQL 显式控制框架，MyBatis 允许开发者编写原生 SQL 查询，适用于需要高度自定义 SQL 的场景。与 Spring Security 的结合通常是通过授权逻辑控制数据的访问权限。</li><li><strong>Spring Data JPA</strong>：作为一个 ORM 框架，它通过实体类与数据库表的映射，简化了数据库操作的代码量，适合处理关系数据库中的常规数据操作。在 Spring Security 中，通常使用 JPA 实现基于角色的授权控制（如 <code>@PreAuthorize</code> 注解）。</li></ul><p><strong>面试要点</strong>：</p><ul><li>掌握 Spring Security 与数据访问层框架的集成方式</li><li>理解何时选择 Spring Data JPA，何时选择 MyBatis，以及它们在安全设计中的应用</li></ul><hr><h2 id="_5-面试中常问的安全场景题解析" tabindex="-1"><a class="header-anchor" href="#_5-面试中常问的安全场景题解析"><span>5. 面试中常问的安全场景题解析</span></a></h2><p><strong>问题</strong>：面试中常见的安全场景题有哪些？如何解答？</p><p><strong>解析</strong>：</p><ol><li><strong>如何防止 XSS 攻击？</strong><ul><li>通过 HTML 编码对用户输入进行过滤，避免恶意脚本执行。</li><li>使用 Content Security Policy（CSP）来限制可执行的 JavaScript 代码源。</li></ul></li><li><strong>如何防止 SQL 注入？</strong><ul><li>使用 <code>PreparedStatement</code> 或 <code>NamedParameterJdbcTemplate</code> 来避免 SQL 注入。</li><li>在使用 Spring Data 或 MyBatis 时，确保使用命名参数而不是拼接 SQL。</li></ul></li><li><strong>如何保护用户密码？</strong><ul><li>使用 <code>BCrypt</code>、<code>PBKDF2</code> 或 <code>Argon2</code> 等加密算法对用户密码进行加密，而不是使用明文存储。</li></ul></li><li><strong>如何处理并发用户登录问题？</strong><ul><li>限制同一账户的并发登录数量，或者在多个设备上使用 <code>JWT</code> 或 <code>OAuth2</code> 进行无状态认证。</li></ul></li></ol><p><strong>面试要点</strong>：</p><ul><li>理解常见安全攻击的原理与防护策略</li><li>熟悉如何在 Spring Security 中实现安全防护措施</li></ul><hr><h2 id="总结-7" tabindex="-1"><a class="header-anchor" href="#总结-7"><span>总结</span></a></h2><p>Spring Security 在企业应用中扮演着至关重要的角色，面试过程中经常会涉及到身份认证、授权管理、安全防护等方面的知识点。掌握其核心机制、配置与扩展方式，将有助于在面试中展现出你的专业能力和安全设计水平。</p>`,376)]))}const r=s(h,[["render",e]]),d=JSON.parse('{"path":"/1.%E5%AD%A6%E4%B9%A0%E7%AF%87/2.Spring%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/5.Spring%20Security.html","title":"5.Spring Security","lang":"en-US","frontmatter":{"title":"5.Spring Security"},"git":{"createdTime":1747836690000,"updatedTime":1747836690000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":38.04,"words":11412},"filePathRelative":"1.学习篇/2.Spring生态系统/5.Spring Security.md"}');export{r as comp,d as data};
