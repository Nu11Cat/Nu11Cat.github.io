import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as r,o as e}from"./app-rMFHpELq.js";const t={};function s(d,n){return e(),a("div",null,n[0]||(n[0]=[r('<p>InnoDB 存储引擎</p><h1 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h1><h2 id="关系型数据库、sql" tabindex="-1"><a class="header-anchor" href="#关系型数据库、sql"><span>关系型数据库、SQL</span></a></h2><p><strong>关系型数据库</strong>（RDB，Relational Database）就是一种建立在关系模型的基础上的数据库。关系模型表明了数据库中所存储的数据之间的联系（一对一、一对多、多对多）。</p><p>大部分关系型数据库都使用 SQL 来操作数据库中的数据。并且，大部分关系型数据库都支持事务的四大特性(ACID)。</p><p>常见的关系型数据库：MySQL、PostgreSQL、Oracle、SQL Server、SQLite。</p><p>SQL 是一种结构化查询语言。目的是提供一种从数据库中读写数据的简单有效的方法。</p><h2 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>MySQL</span></a></h2><p>MySQL 是一种关系型数据库，主要用于持久化存储我们的系统中的一些数据比如用户信息。</p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ol><li>成熟稳定，功能完善。</li><li>开源免费。</li><li>文档丰富，既有详细的官方文档，又有非常多优质文章可供参考学习。</li><li>开箱即用，操作简单，维护成本低。</li><li>兼容性好，支持常见的操作系统，支持多种开发语言。</li><li>社区活跃，生态完善。</li><li>事务支持优秀， InnoDB 存储引擎默认使用 REPEATABLE-READ 并不会有任何性能损失，并且，InnoDB 实现的 REPEATABLE-READ 隔离级别其实是可以解决幻读问题发生的。</li><li>支持分库分表、读写分离、高可用。</li></ol><h1 id="字段类型" tabindex="-1"><a class="header-anchor" href="#字段类型"><span>字段类型</span></a></h1><p><a href="https://javaguide.cn/database/mysql/some-thoughts-on-database-storage-time.html" target="_blank" rel="noopener noreferrer">MySQL日期类型选择建议 | JavaGuide</a></p><p>MySQL 字段类型可以简单分为三大类：</p><ul><li><strong>数值类型</strong>：整型（TINYINT、SMALLINT、MEDIUMINT、INT 和 BIGINT）、浮点型（FLOAT 和 DOUBLE）、定点型（DECIMAL）</li><li><strong>字符串类型</strong>：CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT、TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB 等，最常用的是 CHAR 和 VARCHAR。</li><li><strong>日期时间类型</strong>：YEAR、TIME、DATE、DATETIME 和 TIMESTAMP 等。</li></ul><p>MySQL 中<strong>没有</strong>专门的<strong>布尔</strong>类型，而是用 TINYINT(1) 类型来表示布尔值。TINYINT(1) 类型可以存储 0 或 1，分别对应 false 或 true。</p><table><thead><tr><th>分类</th><th>字段类型</th><th>大小</th><th>常见用途</th></tr></thead><tbody><tr><td><strong>整数型</strong></td><td><code>TINYINT</code></td><td>1 字节</td><td>年龄、状态码、布尔值等</td></tr><tr><td></td><td><code>SMALLINT</code></td><td>2 字节</td><td>人口、库存等小数值</td></tr><tr><td></td><td><code>MEDIUMINT</code></td><td>3 字节</td><td>特定范围的计数值</td></tr><tr><td></td><td><code>INT / INTEGER</code></td><td>4 字节</td><td>订单号、用户ID等</td></tr><tr><td></td><td><code>BIGINT</code></td><td>8 字节</td><td>高精度ID、日志记录等</td></tr><tr><td><strong>小数型</strong></td><td><code>FLOAT</code></td><td>4 字节</td><td>温度、评分等近似数值</td></tr><tr><td></td><td><code>DOUBLE</code></td><td>8 字节</td><td>更高精度的科学计算</td></tr><tr><td></td><td><code>DECIMAL(p,s)</code></td><td>可变</td><td>金额、财务数据等高精度</td></tr><tr><td><strong>字符串</strong></td><td><code>CHAR(n)</code></td><td>固定 n 字节</td><td>性别、固定长度编码等</td></tr><tr><td></td><td><code>VARCHAR(n)</code></td><td>n+1 字节</td><td>姓名、地址、邮箱等文本</td></tr><tr><td></td><td><code>TEXT</code></td><td>最大 64KB</td><td>评论、文章正文等大文本</td></tr><tr><td><strong>时间型</strong></td><td><code>DATE</code></td><td>3 字节</td><td>出生日期、创建日期等</td></tr><tr><td></td><td><code>DATETIME</code></td><td>8 字节</td><td>精确时间记录</td></tr><tr><td></td><td><code>TIMESTAMP</code></td><td>4 字节</td><td>自动记录操作时间</td></tr><tr><td></td><td><code>TIME</code></td><td>3 字节</td><td>表示某个时间点（时分秒）</td></tr><tr><td></td><td><code>YEAR</code></td><td>1 字节</td><td>出生年份、注册年份等</td></tr><tr><td><strong>其他</strong></td><td><code>ENUM(...)</code></td><td>1~2 字节</td><td>性别、状态、分类等固定选项</td></tr><tr><td></td><td><code>SET(...)</code></td><td>1~8 字节</td><td>标签、权限集合等</td></tr></tbody></table><h2 id="整数类型的-unsigned-属性" tabindex="-1"><a class="header-anchor" href="#整数类型的-unsigned-属性"><span>整数类型的 UNSIGNED 属性</span></a></h2><p>MySQL 中的整数类型可以使用可选的 UNSIGNED 属性来表示不允许负值的无符号整数。使用 UNSIGNED 属性可以将正整数的上限提高一倍，因为它不需要存储负数值。</p><h2 id="不推荐使用text和blob" tabindex="-1"><a class="header-anchor" href="#不推荐使用text和blob"><span>不推荐使用TEXT和BLOB</span></a></h2><p>TEXT是长文本数据，例如博客内容。BLOB 类型主要用于存储二进制大对象，例如图片、音视频等文件。</p><p>在日常开发中，很少使用 TEXT 类型，但偶尔会用到，而 BLOB 类型则基本不常用。如果预期长度范围可以通过 VARCHAR 来满足，建议避免使用 TEXT。</p><p>数据库规范通常不推荐使用 BLOB 和 TEXT 类型，这两种类型具有一些缺点和限制，例如：</p><ul><li>不能有默认值。</li><li>在使用临时表时无法使用内存临时表，只能在磁盘上创建临时表（《高性能 MySQL》书中有提到）。</li><li>检索效率较低。</li><li>不能直接创建索引，需要指定前缀长度。</li><li>可能会消耗大量的网络和 IO 带宽。</li><li>可能导致表上的 DML 操作变慢。</li></ul><h2 id="避免使用-enum-类型" tabindex="-1"><a class="header-anchor" href="#避免使用-enum-类型"><span>避免使用 ENUM 类型</span></a></h2><ul><li>修改 ENUM 值需要使用 ALTER 语句。</li><li>ENUM 类型的 ORDER BY 操作效率低，需要额外操作。</li><li>ENUM 数据类型存在一些限制，比如建议不要使用数值作为 ENUM 的枚举值。</li></ul><h2 id="有时不建议使用-null" tabindex="-1"><a class="header-anchor" href="#有时不建议使用-null"><span>有时不建议使用 <code>NULL</code></span></a></h2><p>原因主要包括以下几点：</p><ol><li><strong>影响索引效率</strong> 对含有 <code>NULL</code> 的列建索引时，<code>NULL</code> 不参与某些类型的索引优化。例如，在复合索引中，如果某一列是 <code>NULL</code>，可能导致索引失效，查询变慢。</li><li><strong>查询逻辑复杂</strong><code>NULL</code> 表示“未知”，不是普通的值，不能用 <code>=</code>、<code>!=</code> 比较，只能用 <code>IS NULL</code>、<code>IS NOT NULL</code>，这会导致 SQL 语句更加复杂、容易出错。</li><li><strong>聚合函数和统计结果受影响</strong> 像 <code>COUNT(col)</code> 不会统计 <code>NULL</code> 值，而 <code>COUNT(*)</code> 会，开发中容易误解；类似的 <code>AVG(col)</code>、<code>SUM(col)</code> 等函数遇到 <code>NULL</code> 时也需要额外处理。</li><li><strong>额外的存储和处理开销</strong> 每个包含 <code>NULL</code> 的列，MySQL 在内部需要额外的<strong>标志位</strong>记录其是否为 <code>NULL</code>，在数据量大时会影响存储效率和性能。</li><li><strong>违反业务语义</strong> 有些字段本可以通过默认值表达“未设置”或“未知”状态，不一定非要用 <code>NULL</code>，使用明确的默认值（如 <code>0</code>、空字符串）更易于理解和处理。</li></ol><h2 id="手机号存储用varchar" tabindex="-1"><a class="header-anchor" href="#手机号存储用varchar"><span>手机号存储用VARCHAR</span></a></h2><p>存储手机号，<strong>强烈推荐使用 VARCHAR 类型</strong>，而不是 INT 或 BIGINT。</p><p>主要原因如下：</p><ol><li>格式兼容性与完整性： <ul><li>手机号可能包含前导零（如某些地区的固话区号）、国家代码前缀（&#39;+&#39;），甚至可能带有分隔符（&#39;-&#39; 或空格）。INT 或 BIGINT 这种数字类型会自动丢失这些重要的格式信息（比如前导零会被去掉，&#39;+&#39; 和 &#39;-&#39; 无法存储）。</li><li>VARCHAR 可以原样存储各种格式的号码，无论是国内的 11 位手机号，还是带有国家代码的国际号码，都能完美兼容。</li></ul></li><li>**非算术性：**手机号虽然看起来是数字，但我们从不对它进行数学运算（比如求和、平均值）。它本质上是一个标识符，更像是一个字符串。用 VARCHAR 更符合其数据性质。</li><li>查询灵活性： <ul><li>业务中常常需要根据号段（前缀）进行查询，例如查找所有 &quot;138&quot; 开头的用户。使用 VARCHAR 类型配合 <code>LIKE &#39;138%&#39;</code> 这样的 SQL 查询既直观又高效。</li><li>如果使用数字类型，进行类似的前缀匹配通常需要复杂的函数转换（如 CAST 或 SUBSTRING），或者使用范围查询（如 <code>WHERE phone &gt;= 13800000000 AND phone &lt; 13900000000</code>），这不仅写法繁琐，而且可能无法有效利用索引，导致性能下降。</li></ul></li><li>加密存储的要求（非常关键）： <ul><li>出于数据安全和隐私合规的要求，手机号这类敏感个人信息通常必须加密存储在数据库中。</li><li>加密后的数据（密文）是一长串字符串（通常由字母、数字、符号组成，或经过 Base64/Hex 编码），INT 或 BIGINT 类型根本无法存储这种密文。只有 VARCHAR、TEXT 或 BLOB 等类型可以。</li></ul></li></ol><p><strong>关于 VARCHAR 长度的选择：</strong></p><ul><li><strong>如果不加密存储（强烈不推荐！）：</strong> 考虑到国际号码和可能的格式符，VARCHAR(20) 到 VARCHAR(32) 通常是一个比较安全的范围，足以覆盖全球绝大多数手机号格式。VARCHAR(15) 可能对某些带国家码和格式符的号码来说不够用。</li><li><strong>如果进行加密存储（推荐的标准做法）：</strong> 长度必须根据所选加密算法产生的密文最大长度，以及可能的编码方式（如 Base64 会使长度增加约 1/3）来精确计算和设定。通常会需要更长的 VARCHAR 长度，例如 VARCHAR(128), VARCHAR(256) 甚至更长。</li></ul><h2 id="存储-ip-地址" tabindex="-1"><a class="header-anchor" href="#存储-ip-地址"><span>存储 IP 地址</span></a></h2><p>可以将 IP 地址转换成整形数据存储，性能更好，占用空间也更小。</p><p>MySQL 提供了两个方法来处理 ip 地址</p><ul><li><code>INET_ATON()</code>：把 ip 转为无符号整型 (4-8 位)</li><li><code>INET_NTOA()</code> :把整型的 ip 转为地址</li></ul><p>插入数据前，先用 <code>INET_ATON()</code> 把 ip 地址转为整型，显示数据时，使用 <code>INET_NTOA()</code> 把整型的 ip 地址转为地址显示即可。</p><h2 id="char-vs-varchar" tabindex="-1"><a class="header-anchor" href="#char-vs-varchar"><span>CHAR vs VARCHAR</span></a></h2><p>CHAR 和 VARCHAR 是最常用到的字符串类型，两者的主要区别在于：<strong>CHAR 是定长字符串，VARCHAR 是变长字符串。</strong></p><p>CHAR 在存储时会在右边填充空格以达到指定的长度，检索时会去掉空格；VARCHAR 在存储时需要使用 1 或 2 个额外字节记录字符串的长度，检索时不需要处理。</p><p>CHAR 更适合存储长度较短或者长度都差不多的字符串，例如 Bcrypt 算法、MD5 算法加密后的密码、身份证号码。VARCHAR 类型适合存储长度不确定或者差异较大的字符串，例如用户昵称、文章标题等。</p><p>CHAR(M) 和 VARCHAR(M) 的 M 都代表能够保存的字符数的最大值，无论是字母、数字还是中文，每个都只占用一个字符。</p><h2 id="varchar-100-vs-varchar-10" tabindex="-1"><a class="header-anchor" href="#varchar-100-vs-varchar-10"><span>VARCHAR(100) vs VARCHAR(10)</span></a></h2><p>VARCHAR(100)和 VARCHAR(10)都是变长类型，表示能存储最多 100 个字符和 10 个字符。VARCHAR (100) 可以满足更大范围的字符存储需求，有更好的业务拓展性。而 VARCHAR(10)存储超过 10 个字符时，就需要修改表结构才可以。</p><p>但二者存储相同的字符串，所占用磁盘的存储空间其实是一样的；但是VARCHAR(100) 会消耗更多的内存。这是因为 VARCHAR 类型在内存中操作时，通常会分配固定大小的内存块来保存值，即使用字符类型中定义的长度。例如在进行排序的时候，VARCHAR(100)是按照 100 这个长度来进行的，也就会消耗更多内存。</p><h2 id="decimal-vs-float" tabindex="-1"><a class="header-anchor" href="#decimal-vs-float"><span>DECIMAL vs FLOAT</span></a></h2><p><strong>DECIMAL 是定点数，FLOAT/DOUBLE 是浮点数。DECIMAL 可以存储精确的小数值，FLOAT/DOUBLE 只能存储近似的小数值。</strong></p><p>DECIMAL 用于存储具有精度要求的小数，例如与货币相关的数据，可以避免浮点数带来的精度损失。</p><h2 id="datetime-vs-timestamp" tabindex="-1"><a class="header-anchor" href="#datetime-vs-timestamp"><span>DATETIME vs TIMESTAMP</span></a></h2><p>DATETIME 类型没有时区信息，TIMESTAMP 和时区有关。</p><p>TIMESTAMP 只需要使用 4 个字节的存储空间，但是 DATETIME 需要耗费 8 个字节的存储空间。但是，这样同样造成了一个问题，Timestamp 表示的时间范围更小。</p><p>MySQL 不建议使用 <code>NULL</code> 作为列默认值</p><h2 id="null-vs-空字符串" tabindex="-1"><a class="header-anchor" href="#null-vs-空字符串"><span>NULL vs &#39;&#39;空字符串</span></a></h2><p><code>NULL</code> 代表缺失或未知的数据，而 <code>&#39;&#39;</code> 表示一个已知存在的空字符串。</p><ul><li><p><code>NULL</code> 的存储空间占用取决于数据库的实现，通常需要一些空间来标记该值为空。</p></li><li><p><code>&#39;&#39;</code> 的存储空间占用通常较小，因为它只存储一个空字符串的标志，不需要存储实际的字符。</p></li><li><p>任何值与 <code>NULL</code> 进行比较（例如 <code>=</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code> 等）的结果都是 <code>NULL</code>，表示结果不确定。要判断一个值是否为 <code>NULL</code>，必须使用 <code>IS NULL</code> 或 <code>IS NOT NULL</code>。&#39;&#39;可以像其他字符串一样进行比较运算。例如，&#39;&#39; = &#39;&#39;的结果是 true</p></li></ul><p>大多数聚合函数（例如 <code>SUM</code>, <code>AVG</code>, <code>MIN</code>, <code>MAX</code>）会忽略 <code>NULL</code> 值。<code>COUNT(*)</code> 会统计所有行数，包括包含 <code>NULL</code> 值的行。<code>COUNT(列名)</code> 会统计指定列中非 <code>NULL</code> 值的行数。</p><p>空字符串 <code>&#39;&#39;</code> 会被聚合函数计算在内。例如，<code>SUM</code> 会将其视为 0，<code>MIN</code> 和 <code>MAX</code> 会将其视为一个空字符串。</p><h1 id="架构" tabindex="-1"><a class="header-anchor" href="#架构"><span>架构</span></a></h1><p>MySQL 主要由下面几部分构成：</p><ul><li><strong>连接器：</strong> 身份认证和权限相关(登录 MySQL 的时候)。</li><li><strong>查询缓存：</strong> 执行查询语句的时候，会先查询缓存（MySQL 8.0 版本后移除，因为这个功能不太实用）。</li><li><strong>分析器：</strong> 没有命中缓存的话，SQL 语句就会经过分析器，分析器说白了就是要先看你的 SQL 语句要干嘛，再检查你的 SQL 语句语法是否正确。</li><li><strong>优化器：</strong> 按照 MySQL 认为最优的方案去执行。</li><li><strong>执行器：</strong> 执行语句，然后从存储引擎返回数据。 执行语句之前会先判断是否有权限，如果没有权限的话，就会报错。</li><li><strong>插件式存储引擎</strong>：主要负责数据的存储和读取，采用的是插件式架构，支持 InnoDB、MyISAM、Memory 等多种存储引擎。InnoDB 是 MySQL 的默认存储引擎，绝大部分场景使用 InnoDB 就是最好的选择。</li></ul><h2 id="一条-sql-语句在-mysql-内部是如何执行的、" tabindex="-1"><a class="header-anchor" href="#一条-sql-语句在-mysql-内部是如何执行的、"><span>一条 SQL 语句在 MySQL 内部是如何执行的、</span></a></h2><h1 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎"><span>存储引擎</span></a></h1><p>MySQL 5.5.5 之前，MyISAM 是 MySQL 的默认存储引擎。5.5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。</p><p>所有的存储引擎中只有 InnoDB 是事务性存储引擎，也就是说只有 InnoDB 支持事务。</p><p><strong>常见存储引擎包括：</strong></p><ul><li><strong>InnoDB</strong>：默认引擎，支持事务、行级锁、外键，适合高并发 OLTP 场景；</li><li><strong>MyISAM</strong>：早期默认引擎，不支持事务和行级锁，查询快但并发差；</li><li><strong>Memory</strong>：数据存储在内存中，访问快但重启丢失，适合临时数据；</li><li><strong>Archive</strong>：适合归档、只写不查的场景；</li><li><strong>CSV</strong>：将表以 CSV 文件格式存储，兼容性高但功能有限；</li><li><strong>NDB</strong>：分布式引擎，适用于 MySQL Cluster。</li></ul><h2 id="存储引擎架构" tabindex="-1"><a class="header-anchor" href="#存储引擎架构"><span>存储引擎架构</span></a></h2><p><strong>MySQL 存储引擎架构采用了插件式设计，SQL 层和存储引擎层解耦</strong>，这使得用户可以根据业务需求选择不同的存储引擎，比如事务型、高并发型或读多写少型等。</p><p>架构大致分为两层：</p><ol><li><strong>SQL 层（上层）</strong> 负责解析 SQL 语句、优化查询、缓存查询结果、权限控制等逻辑，与具体的存储引擎无关。 包括查询解析器、优化器、执行器、缓存系统等模块。</li><li><strong>存储引擎层（下层）</strong> 负责数据的实际存储与读取，包括表的创建、索引维护、数据更新、事务处理等。MySQL 允许为每张表指定不同的存储引擎。</li></ol><h2 id="myisam-vs-innodb" tabindex="-1"><a class="header-anchor" href="#myisam-vs-innodb"><span>MyISAM vs InnoDB</span></a></h2><p><strong>InnoDB 支持行级锁</strong>，并发性能高；而 <strong>MyISAM 只支持表级锁</strong>，在高并发写入场景下容易产生锁竞争，性能较差。 <strong>InnoDB 提供事务支持</strong>，符合 SQL 标准定义的四种隔离级别，可保证 ACID 属性；<strong>MyISAM 不支持事务</strong>，数据一致性需要应用层保证。 <strong>InnoDB 支持外键约束</strong>，可以维护数据之间的完整性关系；<strong>MyISAM 不支持外键</strong>。 <strong>InnoDB 实现了 MVCC（多版本并发控制）</strong>，提升并发读性能；<strong>MyISAM 不支持 MVCC</strong>。 虽然两者都使用 B+Tree 作为索引结构，但 <strong>InnoDB 是聚簇索引（数据与主键索引存储在一起）</strong>，而 <strong>MyISAM 是非聚簇索引，数据和索引分开存储</strong>。 在数据安全方面，<strong>InnoDB 支持崩溃恢复机制</strong>，通过 redo log 和 undo log 保证数据可靠性；<strong>MyISAM 不具备 crash-safe 能力</strong>，系统异常时可能导致数据损坏。</p><p>总体来说，<strong>InnoDB 功能更完善，性能更强大</strong>，适合事务型、高并发的业务系统；而 MyISAM 结构简单、读取性能好，适合读多写少、对事务要求不高的场景。</p><h1 id="索引" tabindex="-1"><a class="header-anchor" href="#索引"><span>索引</span></a></h1><h2 id="基础-1" tabindex="-1"><a class="header-anchor" href="#基础-1"><span>基础</span></a></h2><p><strong>索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构</strong></p><h3 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h3><p>索引的最大优点是<strong>提升查询性能</strong>。它就像数据库中的目录或书的目录，可以让数据库在查找数据时<strong>快速定位，而不是全表扫描</strong>，大大减少了磁盘 I/O 次数，提高了查询效率。</p><p>除了查询，<strong>排序、分组、关联等操作</strong>在使用索引后，也能显著提高执行速度。对于主键约束、唯一约束来说，索引还能<strong>帮助数据库快速判断值是否存在</strong>，保障数据的唯一性。</p><p>另外，在某些场景下，索引还能实现<strong>覆盖查询</strong>，即只通过索引就能返回查询所需的数据，避免访问原始数据页，进一步提升性能。</p><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><p>它也存在一些明显的缺点，主要体现在性能开销和维护成本上。</p><p>首先，<strong>索引会占用额外的存储空间</strong>，尤其是对大表或多个字段建立索引时，空间消耗可能非常可观。</p><p>其次，<strong>索引会降低数据写入性能</strong>。每当执行 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code> 操作时，数据库不仅要修改原始数据，还要同步更新相关索引结构，这会增加写操作的成本，导致写入变慢。</p><p>另外，如果建立了不合适或过多的索引，还可能导致 <strong>查询优化器误判执行计划</strong>，反而使查询效率变低。</p><h3 id="用了索引就一定能提高查询性能吗" tabindex="-1"><a class="header-anchor" href="#用了索引就一定能提高查询性能吗"><span>用了索引就一定能提高查询性能吗？</span></a></h3><p>不一定。 大多数情况下，合理使用索引确实比全表扫描快得多。但也有例外：</p><ul><li><p>数据量太小：如果表里的数据非常少（比如就几百条），全表扫描可能比通过索引查找更快，因为走索引本身也有开销。</p></li><li><p>查询结果集占比过大：如果要查询的数据占了整张表的大部分（比如超过20%-30%），优化器可能会认为全表扫描更划算，因为通过索引多次回表（随机I/O）的成本可能高于一次顺序的全表扫描。</p></li><li><p>索引维护不当或统计信息过时：导致优化器做出错误判断。</p></li></ul><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h3><p>目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。在 MySQL 中，MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是，两者的实现方式不太一样。</p><h4 id="b树-b-树" tabindex="-1"><a class="header-anchor" href="#b树-b-树"><span>B树 &amp; B+树</span></a></h4><p>B 树也称 B- 树，全称为 <strong>多路平衡查找树</strong>，B+ 树是 B 树的一种变体。</p><p><strong>B 树&amp; B+ 树两者有何异同呢</strong></p><ol><li><strong>数据存储位置不同：</strong><ul><li>B 树的每个节点都存储<strong>键值和数据</strong>；</li><li>B+ 树只有<strong>叶子节点</strong>存储完整数据，非叶子节点只存储键值用于导航。</li></ul></li><li><strong>叶子节点结构不同：</strong><ul><li>B 树的叶子节点是<strong>分散的</strong>；</li><li>B+ 树的叶子节点通过<strong>链表相连</strong>，天然支持区间查询和范围扫描。</li></ul></li><li><strong>查询性能一致性：</strong><ul><li>B 树查找数据可能在<strong>任意层级</strong>结束，路径不确定；</li><li>B+ 树查找所有数据都在<strong>叶子节点</strong>，查找路径统一，性能更稳定。</li></ul></li></ol><p><strong>使用场景中</strong>：B 树查询路径短，但不利于范围查询；B+ 树访问路径长一些，但<strong>更适合数据库等场景的范围查询、排序和磁盘预读</strong>，因此 MySQL InnoDB 使用的是 B+ 树结构作为索引</p><h4 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表"><span>哈希表</span></a></h4><p>哈希表是键值对的集合，通过键(key)即可快速取出对应的值(value)，通过哈希算法，我们可以快速找到 key 对应的 index，找到了 index 也就找到了对应的 value。</p><p>**为什么Mysql不选择哈希表？**主要是因为 Hash 索引不支持顺序和范围查询。假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。比如<code>SELECT * FROM tb1 WHERE id &lt; 500;</code>，对于HASH搜索引吗，MySQL 优化器可能忽略HASH 索引，回退到全盘扫描。</p><h4 id="二叉查找树-bst" tabindex="-1"><a class="header-anchor" href="#二叉查找树-bst"><span>二叉查找树(BST)</span></a></h4><p>二叉查找树（Binary Search Tree）是一种基于二叉树的数据结构。</p><p>当二叉查找树是平衡时，查询的时间复杂度为 O(log2(N))，具有比较高的效率。不平衡时，例如在最坏情况下（有序插入节点），树会退化成线性链表（也被称为斜树），导致查询效率急剧下降，时间复杂退化为 O(N)。</p><p>二叉查找树的性能非常依赖于它的平衡程度，这就导致其不适合作为 MySQL 底层索引的数据结构。</p><h4 id="avl-树" tabindex="-1"><a class="header-anchor" href="#avl-树"><span>AVL 树</span></a></h4><p>实际应用中，AVL 树使用的并不多。</p><p>AVL 树是计算机科学中最早被发明的自平衡二叉查找树。AVL 树的特点是保证任何节点的左右子树高度之差不超过 1，因此也被称为高度平衡二叉树，它的查找、插入和删除在平均和最坏情况下的时间复杂度都是 O(logn)。</p><p>由于 AVL 树需要频繁地进行旋转操作来保持平衡，因此会有较大的计算开销进而降低了数据库写操作的性能。并且， 在使用 AVL 树时，每个树节点仅存储一个数据，而每次进行磁盘 IO 时只能读取一个节点的数据，如果需要查询的数据分布在多个节点上，那么就需要进行多次磁盘 IO。<strong>磁盘 IO 是一项耗时的操作，在设计数据库索引时，我们需要优先考虑如何最大限度地减少磁盘 IO 操作的次数。</strong></p><h4 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树"><span>红黑树</span></a></h4><p>红黑树是一种自平衡二叉查找树，通过在插入和删除节点时进行颜色变换和旋转操作，使得树始终保持平衡状态。</p><p>和 AVL 树不同的是，红黑树并不追求严格的平衡，而是大致的平衡。正因如此，红黑树的查询效率稍有下降，因为红黑树的平衡性相对较弱，可能会导致树的高度较高，这可能会导致一些数据需要进行多次磁盘 IO 操作才能查询到，这也是 <strong>MySQL 没有选择红黑树的主要原因。</strong></p><h2 id="索引类型" tabindex="-1"><a class="header-anchor" href="#索引类型"><span>索引类型</span></a></h2><p>按照应用维度划分：</p><ul><li>主键索引：数据表的主键列使用的就是主键索引。一张数据表有只能有一个主键，并且主键不能为 null，不能重复。在 InnoDB 中，若未显式指定主键，MySQL 会优先使用非空唯一索引作为主键，否则自动生成一个 6 字节的隐藏自增主键。</li><li>普通索引：普通索引的唯一作用就是为了快速查询数据。一张表允许创建多个普通索引，并允许数据重复和 NULL。</li><li>唯一索引：唯一索引也是一种约束。唯一索引的属性列不能出现重复的数据，但是允许数据为 NULL，一张表允许创建多个唯一索引。 建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。</li><li>覆盖索引：覆盖索引是指查询的所有字段都能从索引中直接获取，<strong>无需回表查询数据行</strong>，因此性能更高。常用于只查询索引列的 <code>SELECT</code> 语句。</li><li>联合索引：联合索引是将多个列组合成一个索引，按照<strong>最左前缀原则</strong>进行匹配，可同时加速多列查询。常用于多条件查询中。</li><li>全文索引：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6 之前只有 MyISAM 引擎支持全文索引，5.6 之后 InnoDB 也支持了全文索引。</li><li>前缀索引：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小，因为只取前几个字符。</li></ul><p>按照底层存储方式角度划分：</p><ul><li>聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。</li><li>非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引（辅助索引）就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。</li></ul><p>按照数据结构维度划分：</p><ul><li>BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。</li><li>哈希索引：类似键值对的形式，一次即可定位。</li><li>RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li><li>全文索引：对文本的内容进行分词，进行搜索。目前只有 <code>CHAR</code>、<code>VARCHAR</code>、<code>TEXT</code> 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li></ul><h3 id="聚簇索引的优缺点" tabindex="-1"><a class="header-anchor" href="#聚簇索引的优缺点"><span>聚簇索引的优缺点</span></a></h3><p><strong>优点</strong>：</p><ul><li><strong>查询速度非常快</strong>：聚簇索引的查询速度非常的快，因为整个 B+ 树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。</li><li><strong>对排序查找和范围查找优化</strong>：聚簇索引对于主键的排序查找和范围查找速度非常快。</li></ul><p><strong>缺点</strong>：</p><ul><li><strong>依赖于有序的数据</strong>：因为 B+ 树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。</li><li><strong>更新代价大</strong>：如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。</li></ul><h3 id="非聚簇索引的优缺点" tabindex="-1"><a class="header-anchor" href="#非聚簇索引的优缺点"><span>非聚簇索引的优缺点</span></a></h3><p><strong>优点</strong>：</p><p>更新代价比聚簇索引要小。非聚簇索引的更新代价就没有聚簇索引那么大了，非聚簇索引的叶子节点是不存放数据的。</p><p><strong>缺点</strong>：</p><ul><li><strong>依赖于有序的数据</strong>：跟聚簇索引一样，非聚簇索引也依赖于有序的数据。</li><li><strong>可能会二次查询（回表）</strong>：这应该是非聚簇索引最大的缺点了。当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。</li></ul><h3 id="非聚簇索引是否一定会回表查询" tabindex="-1"><a class="header-anchor" href="#非聚簇索引是否一定会回表查询"><span>非聚簇索引是否一定会回表查询？</span></a></h3><p>不一定。<strong>非聚簇索引是否回表，关键取决于查询是否命中了覆盖索引。</strong></p><p>在 InnoDB 中，非聚簇索引的叶子节点只存储对应记录的主键值，而不包含整行数据。因此，当查询所需字段<strong>不全在索引中时</strong>，必须先通过非聚簇索引定位主键，再回到主键索引（即聚簇索引）中取出完整的行数据，这就是<strong>回表查询</strong>。</p><p>但如果查询中所涉及的字段<strong>全部都在非聚簇索引中可以直接获取到</strong>，就不需要回表，这种情况称为<strong>覆盖索引</strong>。使用覆盖索引可以减少一次磁盘访问，提升查询性能。</p><h3 id="最左前缀匹配原则" tabindex="-1"><a class="header-anchor" href="#最左前缀匹配原则"><span>最左前缀匹配原则</span></a></h3><p>最左前缀匹配原则是 <strong>MySQL 联合索引使用的一个核心规则</strong>，它指的是：<strong>在使用联合索引（多列索引）时，查询条件必须从最左的列开始，连续匹配索引中的前缀列，索引才能生效。</strong></p><h1 id="查询缓存" tabindex="-1"><a class="header-anchor" href="#查询缓存"><span>查询缓存</span></a></h1><p><a href="https://javaguide.cn/database/mysql/mysql-query-cache.html" target="_blank" rel="noopener noreferrer">MySQL查询缓存详解 | JavaGuide</a></p><p>执行查询语句的时候，会先查询缓存，如果缓存中有对应的查询结果，就会直接返回。</p><p>缓存虽然能够提升数据库的查询性能，但是缓存同时也带来了额外的开销，每次查询后都要做一次缓存操作，失效后还要销毁。</p><p>MySQL 5.6 开始，查询缓存已默认禁用。MySQL 8.0 开始，已经不再支持查询缓存了。</p><h1 id="执行计划" tabindex="-1"><a class="header-anchor" href="#执行计划"><span>执行计划</span></a></h1><p><a href="https://javaguide.cn/database/mysql/mysql-query-execution-plan.html" target="_blank" rel="noopener noreferrer">MySQL执行计划分析 | JavaGuide</a></p><h1 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h1><ul><li>MySQL 中常见的日志有哪些？</li><li>慢查询日志有什么用？</li><li>binlog 主要记录了什么？</li><li>redo log 如何保证事务的持久性？</li><li>页修改之后为什么不直接刷盘呢？</li><li>binlog 和 redolog 有什么区别？</li><li>undo log 如何保证事务的原子性？</li></ul><p>MySQL 日志 主要包括错误日志、查询日志、慢查询日志、事务日志、二进制日志几大类。其中，比较重要的还要属二进制日志 binlog（归档日志）和事务日志 redo log（重做日志）和 undo log（回滚日志）。</p><h2 id="redo-log-重做日志" tabindex="-1"><a class="header-anchor" href="#redo-log-重做日志"><span>redo log（重做日志）</span></a></h2><p>在 MySQL 的 InnoDB 存储引擎中，<strong>redo log 是用来保障事务持久性（ACID 中的 D，Durability）的一种机制</strong>。它的作用是：即使数据库发生崩溃，也能通过日志把数据恢复到一致的状态，确保已提交的事务不会丢失。</p><p>redo log 属于 <strong>InnoDB 引擎层</strong>，记录的是对<strong>数据页的物理修改操作</strong>，而不是 SQL 语句。InnoDB 采用了 WAL（Write-Ahead Logging，先写日志再写磁盘）的策略，数据在内存中修改后，会<strong>先写入 redo log，再异步刷新到磁盘</strong>，这样可以提升写入性能，并避免数据丢失。</p><p>redo log 分为两个阶段：<strong>prepare 和 commit</strong>。当事务执行时先记录 redo log 的 prepare 部分；事务提交时，再追加 commit 标记。这样即使宕机重启，系统也能通过 redo log 判断哪些事务已经提交，并将其变更“重做”到数据页中。</p><p>此外，redo log 是顺序写入磁盘的，相比频繁随机写数据页，性能更高。它与 binlog 不同，binlog 是逻辑日志、Server 层日志，而 redo log 是物理日志、InnoDB 层日志。两者配合，实现了崩溃恢复和主从复制的一致性。</p><h2 id="binlog-归档日志" tabindex="-1"><a class="header-anchor" href="#binlog-归档日志"><span>binlog（归档日志）</span></a></h2><p><strong>binlog（Binary Log）是 MySQL Server 层的日志</strong>，记录的是数据库执行的所有<strong>修改类操作的逻辑事件</strong>，例如 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code> 等，用于实现<strong>主从复制、数据恢复和增量备份</strong>。</p><p>binlog 是逻辑日志，也就是说它<strong>记录的是“做了什么”</strong>，而不是像 redo log 那样记录“修改了哪些数据页”。</p><hr><p>binlog 的主要特点包括：</p><ol><li><strong>属于 MySQL Server 层</strong>，而非存储引擎层，因此<strong>所有存储引擎都可以使用 binlog</strong>；</li><li><strong>只记录提交事务的内容</strong>，且是<strong>追加写入、不可修改的文件格式</strong>；</li><li><strong>支持三种格式</strong>： <ul><li><strong>STATEMENT</strong>：记录 SQL 语句；</li><li><strong>ROW</strong>：记录每一行数据的变更；</li><li><strong>MIXED</strong>：两者结合，根据场景自动选择；</li></ul></li><li>binlog 被广泛用于： <ul><li><strong>主从复制（Replication）</strong>：从库通过 binlog 实现数据同步；</li><li><strong>数据恢复</strong>：结合全量备份，可实现时间点恢复；</li><li><strong>审计和同步</strong>：分析数据库变更操作。</li></ul></li></ol><h2 id="undo-log-回滚日志" tabindex="-1"><a class="header-anchor" href="#undo-log-回滚日志"><span>undo log（回滚日志）</span></a></h2><p><strong>undo log 是 InnoDB 存储引擎中用于实现事务原子性和一致性的重要日志，主要用于回滚操作和 MVCC（多版本并发控制）。</strong></p><p>当事务对数据进行修改时，InnoDB 会在执行之前<strong>生成一份数据修改前的副本</strong>，写入 undo log。如果事务中途失败或被回滚，InnoDB 就可以利用 undo log 将数据恢复到原来的状态，实现事务的原子性（即“要么全部执行，要么全部不执行”）。</p><p>同时，在并发事务中，为了实现一致性读（即快照读），其他事务需要读取某行数据的旧版本时，也会通过 undo log 构造出一个<strong>历史版本</strong>，从而实现 <strong>MVCC</strong>，避免加锁，提高并发性能。</p><hr><p>undo log 的特点包括：</p><ol><li><strong>逻辑日志</strong>，记录的是“某行数据在被修改前是什么样子”；</li><li>与 redo log 相对，redo log 是“重做未来”，undo log 是“回滚过去”；</li><li>存储在系统表空间或独立 undo 表空间中，支持自动清理（由后台线程或事务提交触发）；</li><li>支持两种类型： <ul><li><strong>Insert Undo Log</strong>：用于回滚插入；</li><li><strong>Update Undo Log</strong>：用于回滚更新和删除，同时供快照读使用。</li></ul></li></ol><h1 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h1><p>**事务（Transaction）**是一组不可分割的操作单位，用于确保数据从一个一致状态变更为另一个一致状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。</p><p><strong>数据库事务</strong>是指在关系型数据库中对一组 SQL 操作的统一管理，可以保证多个对数据库的操作（也就是 SQL 语句）构成一个逻辑上的整体。</p><h2 id="acid特性" tabindex="-1"><a class="header-anchor" href="#acid特性"><span>ACID特性</span></a></h2><p>关系型数据库(<code>MySQL</code>、<code>SQL Server</code>、<code>Oracle</code> 等)的事务都有 <strong>ACID</strong> 特性。</p><ul><li><p><strong>原子性</strong>（<code>Atomicity</code>）：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</p></li><li><p><strong>一致性</strong>（<code>Consistency</code>）：执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；</p></li><li><p><strong>隔离性</strong>（<code>Isolation</code>）：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</p></li><li><p><strong>持久性</strong>（<code>Durability</code>）：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</p></li></ul><p>只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说 A、I、D 是手段，C 是目的。</p><h2 id="并发事务" tabindex="-1"><a class="header-anchor" href="#并发事务"><span>并发事务</span></a></h2><h3 id="并发事务带来的问题" tabindex="-1"><a class="header-anchor" href="#并发事务带来的问题"><span>并发事务带来的问题</span></a></h3><h4 id="脏读" tabindex="-1"><a class="header-anchor" href="#脏读"><span><strong>脏读</strong></span></a></h4><p>脏读（Dirty Read）指的是一个事务读到了另一个事务尚未提交的数据，而这些数据后续可能会被回滚，从而导致读到的是无效甚至错误的信息。</p><p>脏读是事务隔离性不足导致的一种数据不一致现象，只有在 <strong>读未提交（Read Uncommitted）</strong> 隔离级别下才可能发生。</p><h4 id="丢失修改" tabindex="-1"><a class="header-anchor" href="#丢失修改"><span><strong>丢失修改</strong></span></a></h4><p>丢失修改（Lost Update）是指两个事务同时读取了同一条数据并进行了更新，其中一个事务的修改被另一个事务覆盖，从而导致前一个修改“丢失”了。</p><p>丢失修改通常发生在隔离级别较低的环境（如 Read Uncommitted 或 Read Committed）中。通过使用<strong>行级锁</strong>或设置更高的隔离级别（如 Repeatable Read 或串行化）可以避免这种问题。</p><h4 id="不可重复读" tabindex="-1"><a class="header-anchor" href="#不可重复读"><span>不可重复读</span></a></h4><p>在一个事务中，<strong>对同一条记录的多次读取结果不一致</strong>，因为在这个事务执行期间，<strong>另一个事务对该记录做了修改并提交了</strong>。</p><p>比如：</p><ul><li>事务 A 第一次查询某用户余额为 100；</li><li>此时事务 B 将该用户余额改为 200 并提交；</li><li>事务 A 再次查询该用户余额，结果变成了 200。</li></ul><p>事务 A 两次读取了同一条记录，却得到了不同的结果，这就是不可重复读。</p><p>这种问题通常发生在<strong>Read Committed</strong>隔离级别下，在更高的隔离级别（如 <strong>Repeatable Read</strong> 或 <strong>Serializable</strong>）中可以避免。</p><h4 id="幻读" tabindex="-1"><a class="header-anchor" href="#幻读"><span>幻读</span></a></h4><p>**幻读（Phantom Read）*<em>是指在一个事务中，**两次相同条件的查询，结果集数量不一致**，因为*<em>其他事务在期间插入或删除了满足条件的新数据</em></em>。</p><p>举个例子：</p><ul><li>事务 A 查询“工资 &gt; 5000”的员工，结果返回 5 条；</li><li>此时事务 B 插入了一条工资为 6000 的新员工并提交；</li><li>事务 A 再次执行相同查询，结果返回了 6 条，出现了“幻影”数据。</li></ul><p>幻读通常在 <code>Read Committed</code> 或 <code>Repeatable Read</code> 隔离级别下可能发生，而在 <code>Serializable</code>（串行化）隔离级别下可以彻底避免。</p><h4 id="不可重复读-vs-幻读" tabindex="-1"><a class="header-anchor" href="#不可重复读-vs-幻读"><span>不可重复读 vs 幻读</span></a></h4><p>不可重复读关注的是<strong>已有记录被修改</strong>导致读出值不一致，幻读则是<strong>查询条件下新增或删除了记录</strong>导致结果集条数变化。</p><h3 id="并发事务的控制方式" tabindex="-1"><a class="header-anchor" href="#并发事务的控制方式"><span>并发事务的控制方式</span></a></h3><p>MySQL 中并发事务的控制方式主要两种：<strong>锁</strong> 和 <strong>MVCC</strong>。</p><h4 id="锁机制" tabindex="-1"><a class="header-anchor" href="#锁机制"><span><strong>锁机制</strong></span></a></h4><p>这是最直接的控制方式，通过加锁来保证事务间的隔离。</p><p>MySQL 中主要是通过 <strong>读写锁</strong> 来实现并发控制。</p><p><strong>共享锁（S 锁）</strong>：又称读锁，多个事务可以同时读取同一条数据，不会互相阻塞。</p><p><strong>排他锁（X 锁）</strong>：又称写锁/独占锁，一个事务写数据时会阻止其他事务对该数据进行读或写，确保修改过程的独占性；</p><p>如果一个事务要先读再写，会先加 S 锁，再升级为 X 锁。</p><p>根据锁粒度的不同，又被分为 <strong>表级锁(table-level locking)</strong> 和 <strong>行级锁(row-level locking)</strong> ，还有更细的，如<strong>间隙锁、临键锁</strong>（用于防止幻读）</p><p><strong>行级锁</strong>：锁住一行数据，粒度小，并发高；</p><p><strong>表级锁</strong>：锁住整个表，粒度大，并发低；</p><h4 id="多版本并发控制-mvcc" tabindex="-1"><a class="header-anchor" href="#多版本并发控制-mvcc"><span>多版本并发控制（MVCC）</span></a></h4><p><a href="https://javaguide.cn/database/mysql/innodb-implementation-of-mvcc.html" target="_blank" rel="noopener noreferrer">InnoDB存储引擎对MVCC的实现 | JavaGuide</a></p><p>对一份数据会存储多个版本，通过事务的可见性来保证事务能看到自己应该看到的版本。通常会有一个全局的版本分配器来为每一行数据设置版本号，版本号是唯一的。</p><p>MVCC 在 MySQL 中实现所依赖的手段主要是: <strong>隐藏字段、read view、undo log</strong>。</p><ul><li>undo log : undo log 用于记录某行数据的多个版本的数据。</li><li>read view 和 隐藏字段 : 用来判断当前版本数据的可见性。</li></ul><p>具体来说，InnoDB 是通过<strong>隐藏字段和 undo log 相结合</strong>来实现 MVCC 的。当事务对一行数据进行更新时，并不会直接覆盖原始数据，而是会将更新前的版本记录到 undo log 中，并将该记录与当前数据行通过回滚指针关联起来。这样，每当有事务执行读取操作时，系统会根据当前事务的视图来判断它应当看到哪一个版本的数据。</p><p>InnoDB 会在每个事务开始时生成一个<strong>Read View（读视图）</strong>，其中记录了当前活跃的事务 ID 列表。随后在读取每一行记录时，会比较记录上的事务 ID 与读视图中的信息，从而决定该数据版本是否对当前事务可见。</p><p>这种机制的核心优势在于：<strong>写操作不会阻塞读操作，读操作也不会阻塞写操作</strong>，从而在不牺牲一致性的前提下，极大地提高了系统的并发能力。</p><h2 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别"><span>事务隔离级别</span></a></h2><p>SQL 标准定义了四种事务隔离级别，用来平衡事务的隔离性（Isolation）和并发性能。级别越高，数据一致性越好，但并发性能可能越低。这四个级别是：</p><ul><li><strong>READ-UNCOMMITTED(读取未提交)</strong> ：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。这种级别在实际应用中很少使用，因为它对数据一致性的保证太弱。</li><li><strong>READ-COMMITTED(读取已提交)</strong> ：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。这是大多数数据库（如 Oracle, SQL Server）的默认隔离级别。</li><li><strong>REPEATABLE-READ(可重复读)</strong> ：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。MySQL InnoDB 存储引擎的默认隔离级别正是 REPEATABLE READ。并且，InnoDB 在此级别下通过 MVCC（多版本并发控制） 和 Next-Key Locks（间隙锁+行锁） 机制，在很大程度上解决了幻读问题。</li><li><strong>SERIALIZABLE(可串行化)</strong> ：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li></ul><p>MySQL InnoDB 存储引擎的默认隔离级别是 <strong>REPEATABLE READ</strong>。</p><p><strong>如何实现隔离级别</strong>：MySQL 的隔离级别基于锁和 MVCC 机制共同实现的。</p><p>SERIALIZABLE 隔离级别是通过锁来实现的，READ-COMMITTED 和 REPEATABLE-READ 隔离级别是基于 MVCC 实现的。不过， SERIALIZABLE 之外的其他隔离级别可能也需要用到锁机制，就比如 REPEATABLE-READ 在当前读情况下需要使用加锁读来保证不会出现幻读。</p><h1 id="mysql锁" tabindex="-1"><a class="header-anchor" href="#mysql锁"><span>MySQL锁</span></a></h1><h2 id="表级锁、行级锁" tabindex="-1"><a class="header-anchor" href="#表级锁、行级锁"><span>表级锁、行级锁</span></a></h2><p>MyISAM 仅仅支持表级锁；InnoDB 不光支持表级锁(table-level locking)，还支持行级锁(row-level locking)，默认为行级锁。</p><p><strong>表级锁：</strong> MySQL 中锁定粒度最大的一种锁（全局锁除外），是针对非索引字段加的锁，对当前操作的整张表加锁，实现简单，资源消耗也比较少，加锁快，不会出现死锁。不过，触发锁冲突的概率最高，高并发下效率极低。表级锁和存储引擎无关，MyISAM 和 InnoDB 引擎都支持表级锁。</p><p><strong>行级锁：</strong> MySQL 中锁定粒度最小的一种锁，是 <strong>针对索引字段加的锁</strong> ，只针对当前操作的行记录进行加锁。 行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。行级锁和存储引擎有关，是在存储引擎层面实现的。</p><p>注：InnoDB 的行级锁是依赖索引实现的，如果 SQL 没有命中索引或索引失效，就无法使用行锁，会退化成表锁或锁全表的数据行，严重影响性能和并发。这在开发中非常常见。</p><h3 id="innodb-有哪几类行锁" tabindex="-1"><a class="header-anchor" href="#innodb-有哪几类行锁"><span>InnoDB 有哪几类行锁</span></a></h3><p>MySQL InnoDB 支持三种行锁定方式：</p><ul><li><strong>记录锁（Record Lock）</strong>：属于单个行记录上的锁。</li><li><strong>间隙锁（Gap Lock）</strong>：锁定一个范围，不包括记录本身。</li><li><strong>临键锁（Next-Key Lock）</strong>：Record Lock+Gap Lock，锁定一个范围，包含记录本身，主要目的是为了解决幻读问题。记录锁只能锁住已经存在的记录，为了避免插入新记录，需要依赖间隙锁。</li></ul><p>在 InnoDB 默认的隔离级别 REPEATABLE-READ 下，行锁默认使用的是 Next-Key Lock。但是，如果操作的索引是唯一索引或主键，InnoDB 会对 Next-Key Lock 进行优化，将其降级为 Record Lock，即仅锁住索引本身，而不是范围。</p><h2 id="共享锁和排他锁" tabindex="-1"><a class="header-anchor" href="#共享锁和排他锁"><span>共享锁和排他锁</span></a></h2><p>不论是表级锁还是行级锁，都存在共享锁（Share Lock，S 锁）和排他锁（Exclusive Lock，X 锁）这两类：</p><p><strong>共享锁（S 锁）</strong>：又称读锁，多个事务可以同时读取同一条数据，不会互相阻塞。</p><p><strong>排他锁（X 锁）</strong>：又称写锁/独占锁，一个事务写数据时会阻止其他事务对该数据进行读或写，确保修改过程的独占性；</p><p>如果一个事务要先读再写，会先加 S 锁，再升级为 X 锁。</p><p>排他锁与任何的锁都不兼容，共享锁仅和共享锁兼容。</p><h2 id="意向锁" tabindex="-1"><a class="header-anchor" href="#意向锁"><span>意向锁</span></a></h2><p>意向锁是表级锁，共有两种：</p><ul><li><strong>意向共享锁（Intention Shared Lock，IS 锁）</strong>：事务有意向对表中的某些记录加共享锁（S 锁），加共享锁前必须先取得该表的 IS 锁。</li><li><strong>意向排他锁（Intention Exclusive Lock，IX 锁）</strong>：事务有意向对表中的某些记录加排他锁（X 锁），加排他锁之前必须先取得该表的 IX 锁。</li></ul><p><strong>意向锁是由数据引擎自己维护的，用户无法手动操作意向锁，在为数据行加共享/排他锁之前，InnoDB 会先获取该数据行所在在数据表的对应意向锁。</strong></p><p>意向锁之间是互相兼容的。意向锁和共享锁和排它锁互斥（这里指的是表级别的共享锁和排他锁）。</p><h2 id="自增锁" tabindex="-1"><a class="header-anchor" href="#自增锁"><span>自增锁</span></a></h2><p>自增锁是 MySQL InnoDB 存储引擎中专门用于处理<strong>含有自增列（AUTO_INCREMENT）字段的表</strong>时的并发控制机制。</p><p>InnoDB 为了保证多个事务同时插入自增字段时<strong>不会出现主键重复或冲突</strong>，引入了一种特殊的锁，称为 <strong>自增锁（auto-inc lock）</strong>。这个锁在并发插入时控制对自增计数器的访问。</p><p><strong>核心特点有以下几点：</strong></p><ol><li><strong>自增锁是一种表级锁</strong>，在插入带有 <code>AUTO_INCREMENT</code> 字段的记录时，会对整张表加锁，直到插入语句执行完成，防止其他事务同时获取自增值。</li><li><strong>默认行为是：语句执行时加锁，执行完释放（语句级锁）</strong>，而不是整个事务持有（事务级锁），这样可以在一定程度上支持并发插入。</li><li><strong>并发插入可能形成阻塞</strong>：如果多个事务同时插入带自增主键的记录，即使其他字段没有冲突，也要串行获取自增值，可能造成性能瓶颈。</li></ol><h2 id="快照读和当前读" tabindex="-1"><a class="header-anchor" href="#快照读和当前读"><span>快照读和当前读</span></a></h2><p>在 InnoDB 中，读操作分为两类：快照读（Snapshot Read）和当前读（Current Read），它们的本质区别在于是否使用 MVCC（多版本并发控制）机制。</p><p>快照读是通过 <strong>MVCC 实现的非锁定读</strong>，读取的是<strong>数据某一时刻的历史版本</strong>，并不是当前最新值。</p><ul><li>典型操作：<code>SELECT</code> 语句，不加锁；</li><li>适用隔离级别：<code>Read Committed</code> 和 <code>Repeatable Read</code>；</li><li>优势：不会加锁，适合高并发环境下的查询。</li></ul><p>例如：你执行 <code>SELECT * FROM user WHERE id = 1</code>，此时读到的是符合隔离级别要求的某个“可见版本”的数据，而不是此刻最新的一行数据。</p><p>当前读是<strong>加锁的读取操作</strong>，读取的就是<strong>当前最新版本的数据</strong>，并且会加锁以保证一致性。</p><ul><li>典型操作：<code>SELECT ... FOR UPDATE</code>、<code>SELECT ... LOCK IN SHARE MODE</code>、<code>UPDATE</code>、<code>DELETE</code>；</li><li>它会读取最新数据，并在必要时阻塞其他事务，直到锁释放。</li></ul><h1 id="mysql调优" tabindex="-1"><a class="header-anchor" href="#mysql调优"><span>MySQL调优</span></a></h1><h2 id="有哪些常见sql优化手段" tabindex="-1"><a class="header-anchor" href="#有哪些常见sql优化手段"><span>有哪些常见SQL优化手段</span></a></h2><h2 id="性能分析" tabindex="-1"><a class="header-anchor" href="#性能分析"><span>性能分析</span></a></h2><h2 id="读写分离" tabindex="-1"><a class="header-anchor" href="#读写分离"><span>读写分离</span></a></h2><h2 id="分库分表" tabindex="-1"><a class="header-anchor" href="#分库分表"><span>分库分表</span></a></h2><h2 id="深度分页" tabindex="-1"><a class="header-anchor" href="#深度分页"><span>深度分页</span></a></h2><h2 id="数据冷热分离" tabindex="-1"><a class="header-anchor" href="#数据冷热分离"><span>数据冷热分离</span></a></h2><h1 id="设计与开发规范" tabindex="-1"><a class="header-anchor" href="#设计与开发规范"><span>设计与开发规范</span></a></h1><h2 id="数据库命名" tabindex="-1"><a class="header-anchor" href="#数据库命名"><span>数据库命名</span></a></h2><p>所有数据库对象名称必须使用小写字母并用下划线分割。</p><p>所有数据库对象名称禁止使用 MySQL 保留关键字（如果表名中包含关键字查询时，需要将其用单引号括起来）。</p><p>数据库对象的命名要能做到见名识义，并且最好不要超过 32 个字符。</p><p>临时库表必须以 <code>tmp_</code> 为前缀并以日期为后缀，备份表必须以 <code>bak_</code> 为前缀并以日期 (时间戳) 为后缀。</p><p>所有存储相同数据的列名和列类型必须一致</p><h2 id="基本设计" tabindex="-1"><a class="header-anchor" href="#基本设计"><span>基本设计</span></a></h2><p>没有特殊要求（即 InnoDB 无法满足的功能如：列存储、存储空间数据等）的情况下，所有表必须使用 InnoDB 存储引擎</p><p>数据库和表的字符集统一使用 UTF8，兼容性更好，统一字符集可以避免由于字符集转换产生的乱码。</p><p>所有表和字段都需要添加注释，使用 comment 从句添加表和列的备注，从一开始就进行数据字典的维护。</p><p>尽量控制单表数据量的大小，建议控制在 500 万以内，过大会造成修改表结构，备份，恢复都会有很大的问题。</p><p>谨慎使用 MySQL 分区表。分区表在物理上表现为多个文件，在逻辑上表现为一个表。谨慎选择分区键，跨分区查询效率可能更低。建议采用物理分表的方式管理大数据。</p><p>经常一起使用的列放到一个表中，避免更多的关联操作。</p><p>禁止在表中建立预留字段。预留字段的命名很难做到见名识义。预留字段无法确认存储的数据类型，所以无法选择合适的类型。对预留字段类型的修改，会对表进行锁定。</p><p>禁止在数据库中存储文件（比如图片）这类大的二进制数据，在数据库中存储文件会严重影响数据库性能，消耗过多存储空间。</p><p>不要被数据库范式所束缚在进行查询时需要对多张表进行关联查询，有时为了提高查询效率，会降低范式的要求，在表中保存一定的冗余信息，也叫做反范式。但要注意反范式一定要适度。</p><h2 id="字段设计" tabindex="-1"><a class="header-anchor" href="#字段设计"><span>字段设计</span></a></h2><p>优先选择符合存储需要的最小的数据类型</p><p>避免使用 TEXT、BLOB 数据类型，最常见的 TEXT 类型可以存储 64k 的数据；建议把 BLOB 或是 TEXT 列分离到单独的扩展表中。TEXT 或 BLOB 类型只能使用前缀索引</p><p>避免使用 ENUM 类型。</p><p>除非有特别的原因使用 NULL 值，否则应该总是让字段保持 NOT NULL。</p><p>同财务相关的金额类数据必须使用 decimal 类型</p><h2 id="索引设计" tabindex="-1"><a class="header-anchor" href="#索引设计"><span>索引设计</span></a></h2><p>限制每张表上的索引数量，建议单张表索引不超过 5 个。因为 MySQL 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划。如果同时有很多个索引都可以用于查询，就会增加 MySQL 优化器生成执行计划的时间，同样会降低查询性能。</p><p>禁止使用全文索引。全文索引不适用于 OLTP 场景。</p><p>禁止给表中的每一列都建立单独的索引</p><p><strong>常见索引列建议：</strong></p><ul><li><p>出现在 SELECT、UPDATE、DELETE 语句的 WHERE 从句中的列。</p></li><li><p>包含在 ORDER BY、GROUP BY、DISTINCT 中的字段。</p></li><li><p>不要将符合 1 和 2 中的字段的列都建立一个索引，通常将 1、2 中的字段建立联合索引效果更好。</p></li><li><p>多表 join 的关联列。</p></li></ul><h3 id="如何选择索引列的顺序" tabindex="-1"><a class="header-anchor" href="#如何选择索引列的顺序"><span><a href="https://javaguide.cn/database/mysql/mysql-high-performance-optimization-specification-recommendations.html#%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E7%B4%A2%E5%BC%95%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F" target="_blank" rel="noopener noreferrer">如何选择索引列的顺序</a></span></a></h3><h2 id="开发规范" tabindex="-1"><a class="header-anchor" href="#开发规范"><span>开发规范</span></a></h2><p>尽量不在数据库做运算，复杂运算需移到业务应用里完成。这样可以避免数据库的负担过重，影响数据库的性能和稳定性。数据库的主要作用是存储和管理数据，而不是处理数据。</p><p><strong>禁止使用 SELECT * 必须使用 SELECT &lt;字段列表&gt; 查询</strong></p><ul><li><code>SELECT *</code> 会消耗更多的 CPU。</li><li><code>SELECT *</code> 无用字段增加网络带宽资源消耗，增加数据传输时间，尤其是大字段（如 varchar、blob、text）。</li><li><code>SELECT *</code> 无法使用 MySQL 优化器覆盖索引的优化（基于 MySQL 优化器的“覆盖索引”策略又是速度极快、效率极高、业界极为推荐的查询优化方式）。</li><li><code>SELECT &lt;字段列表&gt;</code> 可减少表结构变更带来的影响。</li></ul><p><strong>禁止使用不含字段列表的 INSERT 语句</strong></p><p><strong>建议使用预编译语句进行数据库操作</strong></p><p>预编译语句可以重复使用这些计划，减少 SQL 编译所需要的时间，还可以解决动态 SQL 所带来的 SQL 注入的问题。</p><p>只传参数，比传递 SQL 语句更高效。</p><p>相同语句可以一次解析，多次使用，提高处理效率。</p><p><strong>避免数据类型的隐式转换</strong>，隐式转换会导致索引失效。</p><p><strong>避免使用子查询，可以把子查询优化为 join 操作</strong>。通常子查询在 in 子句中，且子查询中为简单 SQL(不包含 union、group by、order by、limit 从句) 时，才可以把子查询转化为关联查询进行优化。</p><p><strong>子查询性能差的原因</strong>：子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响。特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大。由于子查询会产生大量的临时表也没有索引，所以会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。</p><h3 id="避免使用-join-关联太多的表" tabindex="-1"><a class="header-anchor" href="#避免使用-join-关联太多的表"><span>避免使用 JOIN 关联太多的表</span></a></h3><p>对于 MySQL 来说，是存在关联缓存的，缓存的大小可以由 join_buffer_size 参数进行设置。</p><p>在 MySQL 中，对于同一个 SQL 多关联（join）一个表，就会多分配一个关联缓存，如果在一个 SQL 中关联的表越多，所占用的内存也就越大。</p><p>如果程序中大量地使用了多表关联的操作，同时 join_buffer_size 设置得也不合理，就容易造成服务器内存溢出的情况，就会影响到服务器数据库性能的稳定性。</p><p>同时对于关联操作来说，会产生临时表操作，影响查询效率，MySQL 最多允许关联 61 个表，建议不超过 5 个。</p><p><strong>对应同一列进行 or 判断时，使用 in 代替 or</strong></p><p><strong>禁止使用 order by rand() 进行随机排序</strong>：order by rand() 会把表中所有符合条件的数据装载到内存中，然后在内存中对所有数据根据随机生成的值进行排序，并且可能会对每一行都生成一个随机值。如果满足条件的数据集非常大，就会消耗大量的 CPU 和 IO 及内存资源。推荐在程序中获取一个随机值，然后从数据库中获取数据的方式。</p><p><strong>WHERE 从句中禁止对列进行函数转换和计算</strong>：对列进行函数转换或计算时会导致无法使用索引。</p><p><strong>在明显不会有重复值时使用 UNION ALL 而不是 UNION</strong>：UNION 会把两个结果集的所有数据放到临时表中后再进行去重操作；UNION ALL 不会再对结果集进行去重操作。</p><p><strong>拆分复杂的大 SQL 为多个小 SQL</strong>：大 SQL 逻辑上比较复杂，需要占用大量 CPU 进行计算的 SQL。MySQL 中，一个 SQL 只能使用一个 CPU 进行计算。SQL 拆分后可以通过并行执行来提高处理效率。</p><p><strong>程序连接不同的数据库使用不同的账号，禁止跨库查询</strong>：为数据库迁移和分库分表留出余地。降低业务耦合度。避免权限过大而产生的安全风险。</p><h2 id="操作行为规范" tabindex="-1"><a class="header-anchor" href="#操作行为规范"><span>操作行为规范</span></a></h2><h3 id="超-100-万行的批量写-update、delete、insert-操作-要分批多次进行操作" tabindex="-1"><a class="header-anchor" href="#超-100-万行的批量写-update、delete、insert-操作-要分批多次进行操作"><span>超 100 万行的批量写 (UPDATE、DELETE、INSERT) 操作，要分批多次进行操作</span></a></h3><p><strong>大批量操作可能会造成严重的主从延迟</strong></p><p>主从环境中，大批量操作可能会造成严重的主从延迟，大批量的写操作一般都需要执行一定长的时间，而只有当主库上执行完成后，才会在其他从库上执行，所以会造成主库与从库长时间的延迟情况。</p><p><strong>binlog 日志为 row 格式时会产生大量的日志</strong></p><p>大批量写操作会产生大量日志，特别是对于 row 格式二进制数据而言，由于在 row 格式中会记录每一行数据的修改，我们一次修改的数据越多，产生的日志量也就会越多，日志的传输和恢复所需要的时间也就越长，这也是造成主从延迟的一个原因。</p><p><strong>避免产生大事务操作</strong></p><p>大批量修改数据，一定是在一个事务中进行的，这就会造成表中大批量数据进行锁定，从而导致大量的阻塞，阻塞会对 MySQL 的性能产生非常大的影响。</p><p>特别是长时间的阻塞会占满所有数据库的可用连接，这会使生产环境中的其他应用无法连接到数据库，因此一定要注意大批量写操作要进行分批。</p><h3 id="对于大表使用-pt-online-schema-change-修改表结构" tabindex="-1"><a class="header-anchor" href="#对于大表使用-pt-online-schema-change-修改表结构"><span>对于大表使用 pt-online-schema-change 修改表结构</span></a></h3><ul><li>避免大表修改产生的主从延迟。</li><li>避免在对表字段进行修改时进行锁表。</li></ul><p>对大表数据结构的修改一定要谨慎，会造成严重的锁表操作，尤其是生产环境，是不能容忍的。</p><p>pt-online-schema-change 它会首先建立一个与原表结构相同的新表，并且在新表上进行表结构的修改，然后再把原表中的数据复制到新表中，并在原表中增加一些触发器。把原表中新增的数据也复制到新表中，在行所有数据复制完成之后，把新表命名成原表，并把原来的表删除掉。把原来一个 DDL 操作，分解成多个小的批次进行。</p><h1 id="sql语句在mysql中的执行过程" tabindex="-1"><a class="header-anchor" href="#sql语句在mysql中的执行过程"><span><a href="https://javaguide.cn/database/mysql/how-sql-executed-in-mysql.html" target="_blank" rel="noopener noreferrer">SQL语句在MySQL中的执行过程</a></span></a></h1>',323)]))}const i=o(t,[["render",s]]),g=JSON.parse('{"path":"/1.Note/3.Database_MQ/MySQL.html","title":"MySQL","lang":"en-US","frontmatter":{"title":"MySQL","order":2},"git":{"createdTime":1754898174000,"updatedTime":1754898174000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":48.51,"words":14553},"filePathRelative":"1.Note/3.Database&MQ/MySQL.md"}');export{i as comp,g as data};
