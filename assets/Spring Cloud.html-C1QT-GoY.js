import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as o,o as s}from"./app-BJJEUIQt.js";const t={};function i(l,r){return s(),a("div",null,r[0]||(r[0]=[o('<p>Nacos（注册中心）、OpenFeign（RPC）、Gateway（网关）</p><h1 id="spring-cloud" tabindex="-1"><a class="header-anchor" href="#spring-cloud"><span>Spring Cloud</span></a></h1><p><strong>Spring Cloud</strong> 是基于 <strong>Spring Boot</strong> 的一整套 <strong>微服务开发框架</strong>，它并不是单一组件，而是一个<strong>工具集</strong>，用于快速构建分布式系统中的常见功能，比如服务注册发现、负载均衡、配置中心、熔断限流、网关路由等。</p><p>它的核心目标是<strong>简化微服务架构的开发和治理</strong>，让开发者更专注业务逻辑，而不是自己去搭建复杂的分布式基础设施。</p><h2 id="常用的组件" tabindex="-1"><a class="header-anchor" href="#常用的组件"><span>常用的组件</span></a></h2><p><strong>注册中心</strong>：注册中心是微服务架构最核心的组件。它起到的作用是对新节点的注册与状态维护，解决了「如何发现新节点以及检查各节点的运行状态的问题」。微服务节点在启动时会将自己的服务名称、IP、端口等信息在注册中心登记，注册中心会定时检查该节点的运行状态。注册中心通常会采用心跳机制最大程度保证已登记过的服务节点都是可用的。</p><p><strong>负载均衡</strong>：负载均衡解决了「如何发现服务及负载均衡如何实现的问题」，通常微服务在互相调用时，并不是直接通过IP、端口进行访问调用。而是先通过服务名在注册中心查询该服务拥有哪些节点，注册中心将该服务可用节点列表返回给服务调用者，这个过程叫服务发现，因服务高可用的要求，服务调用者会接收到多个节点，必须要从中进行选择。因此服务调用者一端必须内置负载均衡器，通过负载均衡策略选择合适的节点发起实质性的通信请求。</p><p><strong>服务通信</strong>：服务通信组件解决了「服务间如何进行消息通信的问题」，服务间通信采用轻量级协议，通常是HTTP RESTful风格。但因为RESTful风格过于灵活，必须加以约束，通常应用时对其封装。例如在SpringCloud中就提供了Feign和RestTemplate两种技术屏蔽底层的实现细节，所有开发者都是基于封装后统一的SDK进行开发，有利于团队间的相互合作。</p><p><strong>配置中心</strong>：配置中心主要解决了「如何集中管理各节点配置文件的问题」，在微服务架构下，所有的微服务节点都包含自己的各种配置文件，如jdbc配置、自定义配置、环境配置、运行参数配置等。要知道有的微服务可能可能有几十个节点，如果将这些配置文件分散存储在节点上，发生配置更改就需要逐个节点调整，将给运维人员带来巨大的压力。配置中心便由此而生，通过部署配置中心服务器，将各节点配置文件从服务中剥离，集中转存到配置中心。一般配置中心都有UI界面，方便实现大规模集群配置调整。</p><p><strong>集中式日志管理</strong>：集中式日志主要是解决了「如何收集各节点日志并统一管理的问题」。微服务架构默认将应用日志分别保存在部署节点上，当需要对日志数据和操作数据进行数据分析和数据统计时，必须收集所有节点的日志数据。那么怎么高效收集所有节点的日志数据呢？业内常见的方案有ELK、EFK。通过搭建独立的日志收集系统，定时抓取各节点增量日志形成有效的统计报表，为统计和分析提供数据支撑。</p><p><strong>分布式链路追踪</strong>：分布式链路追踪解决了「如何直观的了解各节点间的调用链路的问题」。系统中一个复杂的业务流程，可能会出现连续调用多个微服务，我们需要了解完整的业务逻辑涉及的每个微服务的运行状态，通过可视化链路图展现，可以帮助开发人员快速分析系统瓶颈及出错的服务。</p><p><strong>服务保护</strong>：服务保护主要是解决了「如何对系统进行链路保护，避免服务雪崩的问题」。在业务运行时，微服务间互相调用支撑，如果某个微服务出现高延迟导致线程池满载，或是业务处理失败。这里就需要引入服务保护组件来实现高延迟服务的快速降级，避免系统崩溃。</p><h2 id="springcloud-alibaba实现的微服务架构" tabindex="-1"><a class="header-anchor" href="#springcloud-alibaba实现的微服务架构"><span>SpringCloud Alibaba实现的微服务架构</span></a></h2><p>SpringCloud Alibaba中使用<strong>Alibaba Nacos</strong>组件实现<strong>注册中心</strong>，Nacos提供了一组简单易用的特性集，可快速实现动态服务发现、服务配置、服务元数据及流量管理</p><p>SpringCloud Alibaba 使用<strong>Nacos服务端均衡</strong>实现负载均衡，与Ribbon在调用端负载不同，Nacos是在服务发现的同时利用负载均衡返回服务节点数据。</p><p>SpringCloud Alibaba 使用<strong>Netflix Feign</strong>和<strong>Alibaba Dubbo</strong>组件来实现服务通行，前者与SpringCloud采用了相同的方案，后者则是对自家的<strong>RPC 框架Dubbo</strong>也给予支持，为服务间通信提供另一种选择。</p><p>SpringCloud Alibaba 在<strong>API服务网关</strong>组件中，使用与SpringCloud相同的组件，即：<strong>SpringCloud Gateway</strong></p><p>SpringCloud Alibaba在配置中心组件中使用<strong>Nacos内置配置中心</strong>Nacos内置的配置中心，可将配置信息<strong>存储保存在指定数据库</strong>中</p><p>SpringCloud Alibaba在原有的<strong>ELK方案</strong>外，还可以使用阿里云日志服务（LOG）实现日志集中式管理</p><p>SpringCloud Alibaba在<strong>分布式链路组件</strong>中采用与SpringCloud相同的方案，即：<strong>Sleuth/Zipkin Server</strong></p><p>SpringCloud Alibaba使用<strong>Alibaba Sentinel</strong>实现系统保护，Sentinel不仅功能更强大，实现系统保护比Hystrix更优雅，而且还拥有更好的UI界面</p><h1 id="注册中心" tabindex="-1"><a class="header-anchor" href="#注册中心"><span>注册中心</span></a></h1><h1 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h1><h2 id="负载均衡算法" tabindex="-1"><a class="header-anchor" href="#负载均衡算法"><span>负载均衡算法</span></a></h2><ul><li>简单轮询：将请求按顺序分发给后端服务器上，不关心服务器当前的状态，比如后端服务器的性能、当前的负载。</li><li>加权轮询：根据服务器自身的性能给服务器设置不同的权重，将请求按顺序和权重分发给后端服务器，可以让性能高的机器处理更多的请求</li><li>简单随机：将请求随机分发给后端服务器上，请求越多，各个服务器接收到的请求越平均</li><li>加权随机：根据服务器自身的性能给服务器设置不同的权重，将请求按各个服务器的权重随机分发给后端服务器</li><li>一致性哈希：根据请求的客户端 ip、或请求参数通过哈希算法得到一个数值，利用该数值取模映射出对应的后端服务器，这样能保证同一个客户端或相同参数的请求每次都使用同一台服务器</li><li>最小活跃数：统计每台服务器上当前正在处理的请求数，也就是请求活跃数，将请求分发给活跃数最少的后台服务器</li></ul><h2 id="如何实现一直均衡给一个用户" tabindex="-1"><a class="header-anchor" href="#如何实现一直均衡给一个用户"><span>如何实现一直均衡给一个用户</span></a></h2><p>可以通过「一致性哈希算法」来实现，根据请求的客户端 ip、或请求参数通过哈希算法得到一个数值，利用该数值取模映射出对应的后端服务器，这样能保证同一个客户端或相同参数的请求每次都使用同一台服务器。</p><h1 id="服务通信" tabindex="-1"><a class="header-anchor" href="#服务通信"><span>服务通信</span></a></h1><h1 id="配置中心" tabindex="-1"><a class="header-anchor" href="#配置中心"><span>配置中心</span></a></h1><h1 id="服务熔断-服务降级" tabindex="-1"><a class="header-anchor" href="#服务熔断-服务降级"><span>服务熔断 服务降级</span></a></h1><h2 id="服务熔断-circuit-breaker" tabindex="-1"><a class="header-anchor" href="#服务熔断-circuit-breaker"><span><strong>服务熔断（Circuit Breaker）</strong></span></a></h2><ul><li><strong>定义</strong>：当某个服务出现大量超时、异常时，调用方会<strong>临时中断</strong>对它的请求，就像电路保护开关“断开”一样，避免继续占用资源拖垮系统。</li><li><strong>目的</strong>：防止<strong>雪崩效应</strong>（一个服务挂了，连锁导致多个服务崩溃）。</li><li><strong>触发条件</strong>： <ul><li>一段时间内请求失败率达到阈值（如 50%）</li><li>请求响应时间过长（超时）</li></ul></li><li><strong>恢复机制</strong>： 熔断后 → 进入 <strong>半开状态</strong> → 尝试部分请求 → 如果恢复正常 → <strong>关闭熔断</strong>。</li></ul><blockquote><p><strong>举例</strong>：支付服务依赖库存服务，如果库存服务宕机，支付服务直接返回“库存繁忙”而不是一直等待。</p></blockquote><hr><h2 id="服务降级-service-degrade" tabindex="-1"><a class="header-anchor" href="#服务降级-service-degrade"><span>服务降级（Service Degrade）</span></a></h2><ul><li><strong>定义</strong>：在系统压力过大、资源紧张或下游服务不可用时，主动<strong>减少功能或返回默认结果</strong>，保证核心业务正常运行。</li><li><strong>目的</strong>：保护系统整体可用性，优先保证核心功能。</li><li><strong>触发场景</strong>： <ul><li>系统高并发高负载</li><li>非核心功能故障</li><li>依赖的外部服务不可用</li></ul></li><li><strong>实现方式</strong>： <ul><li>返回<strong>兜底数据</strong>（如“稍后再试”）</li><li>关闭非核心功能（如推荐、统计）</li><li>延迟执行某些任务</li></ul></li></ul><blockquote><p><strong>举例</strong>：双11高峰时，电商首页可能不加载个性化推荐，只显示核心商品。</p></blockquote>',37)]))}const p=n(t,[["render",i]]),d=JSON.parse('{"path":"/1.Note/2.Spring_Framework/Spring%20Cloud.html","title":"spring Cloud","lang":"en-US","frontmatter":{"title":"spring Cloud","order":3},"git":{"createdTime":1756447702000,"updatedTime":1756447702000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":7.77,"words":2331},"filePathRelative":"1.Note/2.Spring&Framework/Spring Cloud.md"}');export{p as comp,d as data};
