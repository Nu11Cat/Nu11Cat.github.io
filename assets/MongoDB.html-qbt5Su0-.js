import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as r,o as s}from"./app-BqlvGriv.js";const e={};function t(g,o){return s(),a("div",null,o[0]||(o[0]=[r('<h1 id="mongodb基础" tabindex="-1"><a class="header-anchor" href="#mongodb基础"><span>MongoDB基础</span></a></h1><h2 id="mongodb是什么" tabindex="-1"><a class="header-anchor" href="#mongodb是什么"><span>MongoDB是什么</span></a></h2><p>MongoDB 是一个<strong>基于文档模型的 NoSQL 数据库</strong>，用来存储和管理<strong>非结构化或半结构化数据</strong>。它以 <strong>JSON 类似的 BSON 格式</strong>存储数据，每条记录是一个<strong>文档（document）</strong>，不同文档可以拥有不同的字段和结构，因此更灵活。</p><p><strong>MongoDB 的优势在于其数据模型和存储引擎的灵活性、架构的可扩展性以及对强大的索引支持。</strong></p><h2 id="mongodb的特点" tabindex="-1"><a class="header-anchor" href="#mongodb的特点"><span>MongoDB的特点</span></a></h2><p>MongoDB 是一个面向文档的 NoSQL 数据库，具有以下几个核心特点：</p><ol><li><strong>灵活的数据模型</strong> 使用 BSON（类似 JSON）格式存储文档，不需要固定表结构，字段可动态添加，适合存储非结构化或半结构化数据。</li><li><strong>高性能读写</strong> 支持高并发访问，读写效率高，适用于实时性要求强的场景。</li><li><strong>强大的查询能力</strong> 支持丰富的查询语法、聚合管道、全文搜索和索引机制，满足复杂的数据检索需求。</li><li><strong>高可用性和容灾能力</strong> 通过复制集（Replica Set）实现主从复制和故障自动切换，保障服务连续性。</li><li><strong>良好的扩展性</strong> 内置自动分片（Sharding）机制，支持横向扩展，可支撑大规模数据增长。</li><li><strong>天然支持嵌套结构和数组</strong> 非关系型模型更适合表示层级、嵌套的数据，如评论、聊天记录等。</li></ol><h2 id="mongodb的应用场景" tabindex="-1"><a class="header-anchor" href="#mongodb的应用场景"><span>MongoDB的应用场景</span></a></h2><p>MongoDB 适用于结构灵活、数据量大、变化频繁、强一致性要求不高的场景，典型如内容管理、日志系统、IoT 数据、社交评论、地图服务等。</p><p>MongoDB 通常用于以下几类场景：</p><ol><li><strong>数据结构不固定或经常变化的业务</strong> 比如内容管理系统、CMS、用户自定义表单等，字段不固定，关系型数据库维护困难，MongoDB 的文档模型更灵活。</li><li><strong>需要快速迭代的互联网应用</strong> 例如初创项目、电商商品库、活动页配置等，开发周期短、需求变化快，MongoDB 省去了建表和字段管理的繁琐。</li><li><strong>日志收集与分析</strong> MongoDB 非结构化文档存储适合记录日志、埋点数据等，配合聚合查询和索引可以进行实时分析。</li><li><strong>物联网（IoT）设备数据存储</strong> 设备上报的数据格式多样、更新频繁，用 MongoDB 存储更方便管理和查询。</li><li><strong>地理位置类应用</strong> 比如地图服务、附近的人、LBS 系统，MongoDB 支持地理空间索引，适合高效进行地理位置查询。</li><li><strong>社交网络、评论、聊天记录等嵌套数据结构场景</strong> 这类数据常包含嵌套数组、层级结构，MongoDB 能自然表达这类文档，比传统关系型数据库更适配。</li><li><strong>缓存层或用户画像等非核心数据系统</strong> 对强一致性要求不高，但读写性能要求高，适合用 MongoDB 提供支撑。</li></ol><h2 id="和mysql、redis有什么区别" tabindex="-1"><a class="header-anchor" href="#和mysql、redis有什么区别"><span>和MySQL、Redis有什么区别</span></a></h2><p>MongoDB、MySQL 和 Redis 是三种性质不同的数据库系统，适用于不同类型的业务需求。首先，从数据模型上看，MySQL 是典型的关系型数据库，采用表格结构，字段固定、模式严格，适合结构清晰、强一致性要求高的场景。而 MongoDB 是一个面向文档的 NoSQL 数据库，使用 BSON 格式存储数据，结构灵活，字段可以动态变化，更适合处理结构不确定、变化频繁的业务，比如内容管理系统或用户自定义数据。</p><p>从存储和使用方式上来看，MongoDB 和 MySQL 都是主要存储在磁盘上的持久化数据库，适合作为主业务的数据存储。而 Redis 是一个典型的内存数据库，数据主要存在内存中，读写速度非常快，通常用于缓存、限流、排行榜、分布式锁等场景，强调性能和实时性，而不是数据结构的复杂性或存储的长期性。</p><p>此外，MySQL 原生支持事务和 SQL 标准，适合金融、电商等对一致性和复杂查询要求较高的系统。MongoDB 在高版本中引入了事务支持，但更侧重于高可用性和可扩展性，适合互联网类的大数据量业务。Redis 虽然也支持持久化和事务，但本质上并不适合用作主数据存储，更适合作为 MySQL 或 MongoDB 的缓存层补充。</p><h2 id="存储结构" tabindex="-1"><a class="header-anchor" href="#存储结构"><span>存储结构</span></a></h2><p>MongoDB 的存储结构区别于传统的关系型数据库，主要由如下三个单元组成：</p><ul><li><strong>文档（Document）</strong>：MongoDB 中最基本的单元，由 BSON 键值对（key-value）组成，类似于关系型数据库中的行（Row）。</li><li><strong>集合（Collection）</strong>：一个集合可以包含多个文档，类似于关系型数据库中的表（Table）。</li><li><strong>数据库（Database）</strong>：一个数据库中可以包含多个集合，可以在 MongoDB 中创建多个数据库，类似于关系型数据库中的数据库（Database）。</li></ul><hr><h3 id="文档" tabindex="-1"><a class="header-anchor" href="#文档"><span>文档</span></a></h3><p>MongoDB 中的记录就是一个 BSON 文档，它是由键值对组成的数据结构，类似于 JSON 对象，是 MongoDB 中的基本数据单元。字段的值可能包括其他文档、数组和文档数组。</p><p><strong>BSON [bee·sahn]</strong> 是 Binary [JSON]的简称，是 JSON 文档的二进制表示，支持将文档和数组嵌入到其他文档和数组中，还包含允许表示不属于 JSON 规范的数据类型的扩展。</p><hr><h3 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h3><p>MongoDB 集合存在于数据库中，<strong>没有固定的结构</strong>，也就是 <strong>无模式</strong> 的，这意味着可以往集合插入不同格式和类型的数据。不过，通常情况下，插入集合中的数据都会有一定的关联性。</p><hr><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h3><p>数据库用于存储所有集合，而集合又用于存储所有文档。一个 MongoDB 中可以创建多个数据库，每一个数据库都有自己的集合和权限。</p><p>MongoDB 预留了几个特殊的数据库。</p><ul><li><strong>admin</strong> : admin 数据库主要是保存 root 用户和角色。例如，system.users 表存储用户，system.roles 表存储角色。一般不建议用户直接操作这个数据库。将一个用户添加到这个数据库，且使它拥有 admin 库上的名为 dbAdminAnyDatabase 的角色权限，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如关闭服务器。</li><li><strong>local</strong> : local 数据库是不会被复制到其他分片的，因此可以用来存储本地单台服务器的任意 collection。一般不建议用户直接使用 local 库存储任何数据，也不建议进行 CRUD 操作，因为数据无法被正常备份与恢复。</li><li><strong>config</strong> : 当 MongoDB 使用分片设置时，config 数据库可用来保存分片的相关信息。</li><li><strong>test</strong> : 默认创建的测试库，连接 <a href="https://mongoing.com/docs/reference/program/mongod.html" target="_blank" rel="noopener noreferrer">mongod</a> 服务时，如果不指定连接的具体数据库，默认就会连接到 test 数据库。</li></ul><hr><h1 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎"><span>存储引擎</span></a></h1><p>与 MySQL 一样，MongoDB 采用的也是 <strong>插件式的存储引擎架构</strong> ，支持不同类型的存储引擎。</p><p>在存储引擎刚出来的时候，默认是使用 MMAPV1 存储引擎，MongoDB4.x 版本不再支持 MMAPv1 存储引擎。</p><p>现在主要有下面这两种存储引擎：</p><ul><li><strong>WiredTiger 存储引擎</strong>：自 MongoDB 3.2 以后，默认的存储引擎为 WiredTiger 存储引擎。非常适合大多数工作负载，建议用于新部署。WiredTiger 提供文档级并发模型、检查点和数据压缩（后文会介绍到）等功能。</li><li><strong>In-Memory 存储引擎</strong>：In-Memory 存储引擎在 MongoDB Enterprise 中可用。它不是将文档存储在磁盘上，而是将它们保留在内存中以获得更可预测的数据延迟。</li></ul><p>此外，MongoDB 3.0 提供了 <strong>可插拔的存储引擎 API</strong> ，允许第三方为 MongoDB 开发存储引擎，这点和 MySQL 也比较类似。</p><hr><p>WiredTiger 使用的是 B+ 树作为其存储结构，</p><hr><h1 id="聚合" tabindex="-1"><a class="header-anchor" href="#聚合"><span>聚合</span></a></h1><h1 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h1><h1 id="数据压缩" tabindex="-1"><a class="header-anchor" href="#数据压缩"><span>数据压缩</span></a></h1><h1 id="amazon-document" tabindex="-1"><a class="header-anchor" href="#amazon-document"><span>Amazon Document</span></a></h1><h1 id="索引" tabindex="-1"><a class="header-anchor" href="#索引"><span>索引</span></a></h1><h1 id="高可用" tabindex="-1"><a class="header-anchor" href="#高可用"><span>高可用</span></a></h1>',46)]))}const h=n(e,[["render",t]]),d=JSON.parse('{"path":"/1.Note/3.Database_MQ/MongoDB.html","title":"MongoDB","lang":"en-US","frontmatter":{"title":"MongoDB","order":5},"git":{"createdTime":1753284555000,"updatedTime":1753284555000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":7.01,"words":2104},"filePathRelative":"1.Note/3.Database&MQ/MongoDB.md"}');export{h as comp,d as data};
