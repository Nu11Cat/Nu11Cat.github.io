import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as t,o as e}from"./app-BeNeXiaB.js";const i={};function s(a,r){return e(),o("div",null,r[0]||(r[0]=[t('<h1 id="spring框架" tabindex="-1"><a class="header-anchor" href="#spring框架"><span>Spring框架</span></a></h1><p>Spring 是一个开源的、轻量级的<strong>Java 企业级开发框架</strong>，主要用于简化 Java 应用的开发过程，尤其是在企业级项目中对**对象创建、依赖管理、事务控制、AOP（面向切面编程）**等方面提供了强大支持。</p><p>Spring 的核心是 <strong>IoC（控制反转）</strong> 和 <strong>AOP（面向切面编程）</strong> 两大思想。IoC 通过依赖注入（DI）管理对象生命周期，解耦业务组件，提高代码的可维护性；AOP 则用于横切关注点的处理，比如日志、权限、事务控制等，避免重复代码。</p><p>除了核心功能，Spring 还提供了大量子模块，支持 Web 开发（Spring MVC）、数据访问（Spring JDBC、Spring Data）、事务管理、安全控制（Spring Security）等。配合 Spring Boot，开发效率和部署体验进一步提升。</p><hr><h2 id="核心模块" tabindex="-1"><a class="header-anchor" href="#核心模块"><span>核心模块</span></a></h2><p>Spring 框架本身是一个模块化体系，按照功能主要包含以下几个核心模块：</p><ol><li><strong>Core Container（核心容器）</strong>：包括 <ul><li><strong>Core</strong> 和 <strong>Beans</strong>：提供 IoC 和依赖注入的基础功能。</li><li><strong>Context</strong>：构建在 Core 和 Beans 之上，提供类似于应用上下文的功能。</li><li><strong>Expression Language（SpEL）</strong>：支持在配置中使用表达式语法。</li></ul></li><li><strong>AOP（面向切面编程）模块</strong>：支持 AOP 的实现，用于解耦横切逻辑，如日志、权限控制、事务等。</li><li><strong>Data Access / Integration（数据访问与集成）模块</strong>： <ul><li><strong>JDBC</strong>：简化 JDBC 编程。</li><li><strong>ORM</strong>：整合 Hibernate、JPA、MyBatis 等 ORM 框架。</li><li><strong>JMS</strong>：支持消息中间件的集成。</li><li><strong>Transactions</strong>：统一的声明式事务管理。</li></ul></li><li><strong>Web 模块</strong>： <ul><li><strong>Web</strong>：提供基础的 Web 开发功能。</li><li><strong>Web MVC</strong>：实现了 MVC 架构的 Spring Web 框架，是开发 Web 应用的核心模块。</li></ul></li><li><strong>Test 模块</strong>：提供对 JUnit、TestNG 的集成，支持对 Spring 组件进行单元测试和集成测试。</li></ol><hr><h2 id="spring-vs-spring-mvc-vs-spring-boot" tabindex="-1"><a class="header-anchor" href="#spring-vs-spring-mvc-vs-spring-boot"><span>Spring vs Spring MVC vs Spring Boot</span></a></h2><p><strong>Spring Framework</strong> 是基础，提供了 IoC（控制反转）和 AOP（面向切面编程）等核心功能，用于管理对象的生命周期和解耦业务逻辑，是整个 Spring 生态的根基。</p><p><strong>Spring MVC</strong> 是 Spring 的一个子模块，用于构建基于 Servlet 的 Web 应用。它实现了 MVC 架构模式，提供了请求分发、参数绑定、视图解析等功能，专注于 Web 层开发。</p><p><strong>Spring Boot</strong> 是对 Spring 全家桶的进一步封装，目的是简化 Spring 应用的配置和部署。它提供了自动配置、内嵌服务器、开箱即用的依赖管理，让开发者能够更快地搭建和运行 Spring 应用，无需编写大量 XML 或繁杂配置。</p><h1 id="ioc" tabindex="-1"><a class="header-anchor" href="#ioc"><span>IOC</span></a></h1><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h1><p>IoC/AOP、Spring MVC、事务管理</p><p>spring 框架有四大核心特性：</p><blockquote><p>Ioc，就是控制反转，是为了解决对象创建和依赖的高耦合的问题，是一种创建和获取对象的技术思想，是通过DI，也就是依赖注入实现的,传统开发我们需要new出新对象，而通过IOC我们通过ioc容器来实例化对象，大大降低对象之间的耦合。</p><p>通过反射，依赖注入，设计模式（工厂模式），容器实现的，其中，反射就是java反射机制，允许Ioc容器在运行时加载类和创建对象实例以及调用对象方法；依赖注入是ioc的核心概念；容器作为工厂来实例化bean并管理他们的生命周期；IOC容器通常使用BeanFactory或者ApplicationContext来管理Bean，依赖关系的硬编码问题</p></blockquote><blockquote><p>AOP，就是面向切面编程,允许开发者定义横切关注点，比如说事务管理，日志管理和权限控制。把那些与对象无关的，但是被业务代码共同调用的逻辑封装起来，减少重复代码，降低了模块间的耦合，有利于未来的扩展和维护。AOP是依赖于<strong>动态代理技术</strong>，动态代理是在运行时动态生成代理对象，而不是在编译时。它允许开发者在允许时指定要代理的接口和行为，从而实现在不修改源码的情况下增强或者拦截方法。</p></blockquote><blockquote><p>事务处理，</p></blockquote><blockquote><p>MVC，是指模型，视图，控制器，是一种软件设计典范，是一种把业务逻辑、数据、界面显示分离的方法组织代码。流程步骤就是用户通过view页面向服务端提出请求，controller控制器接收到解析，找到相应的model来处理，处理结果由controller返回给用户的view界面，界面渲染之后呈现。</p></blockquote><blockquote><p>DI，依赖注入，为了解决依赖关系的硬编码问题和类依赖问题导致的高耦合，容器负责管理应用程序组件之间的依赖问题，是一种具体的编码技巧。不再通过new来在类的内部创建依赖类的对象，而是将对象的创建和依赖关系交给容器，类只需要声明自己依赖的对象，容器就会在运行的时候把依赖注入到类种，从而降低类与类的耦合度，实现方式有构造器注入、Setter方法注入，还有字段注入。</p></blockquote><blockquote><p>自动装配：</p></blockquote>',23)]))}const l=n(i,[["render",s]]),c=JSON.parse('{"path":"/1.Note/2.Spring_Framework/Spring%20Framework.html","title":"Spring Framework","lang":"en-US","frontmatter":{"title":"Spring Framework","order":1},"git":{"createdTime":1753454543000,"updatedTime":1753454543000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":4.46,"words":1338},"filePathRelative":"1.Note/2.Spring&Framework/Spring Framework.md"}');export{l as comp,c as data};
