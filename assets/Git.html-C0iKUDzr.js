import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as i,o as a}from"./app-BF7OKe3u.js";const s={};function d(n,e){return a(),o("div",null,e[0]||(e[0]=[i(`<h1 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h1><h2 id="版本控制" tabindex="-1"><a class="header-anchor" href="#版本控制"><span>版本控制</span></a></h2><p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p><p>有了版本控制你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。</p><hr><h1 id="git" tabindex="-1"><a class="header-anchor" href="#git"><span>Git</span></a></h1><p>Git 是一个<strong>分布式版本控制系统</strong>，主要用于<strong>源代码的版本管理和团队协作开发</strong>。它最初由 Linus Torvalds 开发，目的是更好地管理 Linux 内核源码。与传统的集中式版本控制系统（如 SVN）不同，Git 的每一个开发者本地仓库都是完整的，包含代码、历史记录和分支，因此即使不联网，也能进行大多数操作。</p><p>Git 最核心的优势体现在几个方面：</p><ol><li><strong>分布式架构</strong>：每个人都有一个完整的仓库，离线也能查看历史、提交代码，这让协作更加灵活，数据也更安全。</li><li><strong>高效的分支管理</strong>：Git 的分支创建、切换、合并代价极低，支持常见的开发流程，比如 Git Flow、GitHub Flow 等，非常适合多人并行开发。</li><li><strong>快照机制而非增量存储</strong>：每次提交是一次项目的快照（指针引用 + 差异数据），这比传统差异比较更快、更安全，且支持回退、对比、还原等操作。</li><li><strong>哈希标识</strong>：每次提交使用 SHA-1 哈希值标识，不可篡改、唯一安全，保证版本一致性。</li><li><strong>强大的合并与冲突解决能力</strong>：支持三方合并、变基（rebase）、Cherry-pick 等高级操作，灵活应对复杂协作场景。</li></ol><hr><p><strong>三种状态</strong></p><p>Git 有三种状态，你的文件可能处于其中之一：</p><ol><li><strong>已提交（committed）</strong>：数据已经安全的保存在本地数据库中。</li><li><strong>已修改（modified）</strong>：已修改表示修改了文件，但还没保存到数据库中。</li><li><strong>已暂存（staged）</strong>：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li></ol><hr><p><strong>工作流程</strong></p><ol><li>在工作目录中修改文件。</li><li>暂存文件，将文件的快照放入暂存区域。</li><li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录</li></ol><hr><h1 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令"><span>常用指令</span></a></h1><h2 id="获取仓库" tabindex="-1"><a class="header-anchor" href="#获取仓库"><span>获取仓库</span></a></h2><p>有两种取得 Git 项目仓库的方法。</p><ol><li>在现有目录中初始化仓库: 进入项目目录运行 <code>git init</code> 命令,该命令将创建一个名为 <code>.git</code> 的子目录。</li><li>从一个服务器克隆一个现有的 Git 仓库: <code>git clone [url]</code> 自定义本地仓库的名字: <code>git clone [url] directoryname</code></li></ol><hr><h2 id="更新记录" tabindex="-1"><a class="header-anchor" href="#更新记录"><span>更新记录</span></a></h2><ol><li><strong>检测当前文件状态</strong> : <code>git status</code></li><li><strong>提出更改（把它们添加到暂存区</strong>）：<code>git add filename</code> (针对特定文件)、<code>git add *</code>(所有文件)、<code>git add *.txt</code>（支持通配符，所有 .txt 文件）</li><li><strong>忽略文件</strong>：<code>.gitignore</code> 文件</li><li><strong>提交更新:</strong> <code>git commit -m &quot;代码提交信息&quot;</code> （每次准备提交前，先用 <code>git status</code> 看下，是不是都已暂存起来了， 然后再运行提交命令 <code>git commit</code>）</li><li><strong>跳过使用暂存区域更新的方式</strong> : <code>git commit -a -m &quot;代码提交信息&quot;</code>。 <code>git commit</code> 加上 <code>-a</code> 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤。</li><li><strong>移除文件</strong>：<code>git rm filename</code> （从暂存区域移除，然后提交。）</li><li><strong>对文件重命名</strong>：<code>git mv README.md README</code>(这个命令相当于<code>mv README.md README</code>、<code>git rm README.md</code>、<code>git add README</code> 这三条命令的集合)</li></ol><hr><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h1><h2 id="git信息格式" tabindex="-1"><a class="header-anchor" href="#git信息格式"><span>GIt信息格式</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;类型&gt;: &lt;简要描述&gt;</span></span>
<span class="line"><span>&lt;可选正文，说明改动原因、背景等&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>类型：</p><p><code>feat</code>：新增功能</p><p><code>fix</code>：修复 bug</p><p><code>refactor</code>：重构代码（非功能变更）</p><p><code>docs</code>：文档变更</p><p><code>style</code>：格式修改（如空格、缩进）</p><p><code>test</code>：添加或修改测试</p><p><code>chore</code>：构建流程、工具变更等</p>`,36)]))}const l=t(s,[["render",d]]),g=JSON.parse('{"path":"/1.Note/4.Tool/Git.html","title":"Git","lang":"en-US","frontmatter":{"title":"Git","order":2},"git":{"createdTime":1755873540000,"updatedTime":1755873540000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":3.56,"words":1067},"filePathRelative":"1.Note/4.Tool/Git.md"}');export{l as comp,g as data};
