import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as n,o}from"./app-BpnGejIP.js";const r={};function s(c,a){return o(),t("div",null,a[0]||(a[0]=[n('<h2 id="进程与线程" tabindex="-1"><a class="header-anchor" href="#进程与线程"><span>进程与线程</span></a></h2><p>进程系统运行程序的基本单位，是动态的。系统运行一个程序就越是一个进程从创建到运行再到消亡的过程。</p><p>线程是程序执行的最小单位。</p><p>一个进程可以产生多个线程。同一个进程下的多个线程共享进程的堆和方法区资源，但线程又有各自的程序计数器，虚拟机栈和本地方法栈。</p><p>进程是互相独立的，利于资源的管理和保护。而同一进程的线程可能互相影响，但是线程的执行开销要小于进程。</p><h2 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile"><span>volatile</span></a></h2><p>volatile是java的轻量级同步机制，用于修饰变量，被修饰的变量具有可见性和禁止指令重排序的特性，但是不保证原子性。</p><p>首先java的每个线程都有自己的工作内存，线程操作变量的时候先从主内存拷贝一份到自己的工作内存，操作的时候只操作自己工作内存的值，最后有时会刷回主内存。但是如果你不告诉它变量已经修改了，那它就不会去主内存读写。这就是可见性问题。而volatile能保证当写入变量的时候值会立刻刷新到主内存，当读取变量的时候一定去主内存重新读取最新值。</p><p>为了提升执行速度/性能，计算机在执行程序代码的时候，会对指令进行重排序。加上 <code>volatile</code>，就可以<strong>禁止这种重排序行为</strong>。</p><p>如果两个线程同时对volatile的变量++操作，可能会相互覆盖结果，也就是volatile不保证原子性，还是需要synchronized等</p><p>它的实现的底层是JMM，依靠的是内存屏障。</p><h2 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized"><span>synchronized</span></a></h2><p><code>synchronized</code> 是 Java 中的一个关键字，主要解决的是多个线程之间访问资源的同步性，可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</p><h2 id="reentrantlock" tabindex="-1"><a class="header-anchor" href="#reentrantlock"><span>ReentrantLock</span></a></h2><p><code>ReentrantLock</code> 是 Java 5 引入的显式锁，是 <strong>可重入锁</strong>，即同一线程可以多次获得锁而不会被阻塞。</p>',15)]))}const l=e(r,[["render",s]]),d=JSON.parse('{"path":"/2.%E9%9D%A2%E8%AF%95%E7%AF%87/2.%E5%85%AB%E8%82%A1%E7%AC%94%E8%AE%B0/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B.html","title":"Java多线程","lang":"en-US","frontmatter":{"title":"Java多线程"},"git":{"createdTime":1748962242000,"updatedTime":1748962242000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":1.89,"words":567},"filePathRelative":"2.面试篇/2.八股笔记/Java多线程.md"}');export{l as comp,d as data};
