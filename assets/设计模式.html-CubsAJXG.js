import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as t,o as r}from"./app-YGZAb0r2.js";const a={};function c(s,o){return r(),n("div",null,o[0]||(o[0]=[t('<h1 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式"><span>设计模式</span></a></h1><h1 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式"><span>代理模式</span></a></h1><p>代理模式简单来说就是 <strong>我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</strong></p><p><strong>代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</strong></p><p>代理模式有静态代理和动态代理两种实现方式：</p><h2 id="静态代理" tabindex="-1"><a class="header-anchor" href="#静态代理"><span>静态代理</span></a></h2><p>静态代理中，我们对目标对象的每个方法的增强都是手动完成的，<strong>非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦(需要对每个目标类都单独写一个代理类）</strong></p><p>从 JVM 层面来说， <strong>静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。</strong></p><p><strong>实现步骤</strong>：</p><p>1，定义一个接口及其实现类</p><p>2，创建一个代理类同样实现这个接口</p><p>3，将目标对象注入进代理类，然后在代理类的对应方法调用目标类中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情</p><blockquote><p>静态代理就是写一个代理类，这个类实现和目标类一样的接口，然后在方法里，<strong>手动在调用目标方法的前后加上你想要的逻辑</strong>，比如日志、权限校验、时间统计等等。</p></blockquote><h2 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理"><span>动态代理</span></a></h2><p>相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口。Spring AOP、RPC 框架的实现都依赖了动态代理。</p><p><strong>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的</strong></p><h3 id="jdk的动态代理" tabindex="-1"><a class="header-anchor" href="#jdk的动态代理"><span>JDK的动态代理</span></a></h3><p><strong><code>InvocationHandler</code> 接口和 <code>Proxy</code> 类是核心。</strong></p><p><code>Proxy</code>中使用频率最高的方法是：<code>newProxyInstance()</code> ，这个方法主要用来生成一个代理对象。</p><p>这个方法一共有 3 个参数：<strong>loader</strong> :类加载器，用于加载代理对象；<strong>interfaces</strong> : 被代理类实现的一些接口；<strong>h</strong> : 实现了 <code>InvocationHandler</code> 接口的对象。</p><p>要实现动态代理的话，还必须需要实现<code>InvocationHandler</code> 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现<code>InvocationHandler</code> 接口类的 <code>invoke</code> 方法来调用。</p><p>这个方法一共有 3 个参数：<strong>proxy</strong> :动态生成的代理类；<strong>method</strong> : 与代理类对象调用的方法相对应；<strong>args</strong> : 当前 method 方法的参数。</p><p><strong>实现步骤：</strong></p><ol><li>定义一个接口及其实现类；</li><li>自定义 <code>InvocationHandler</code> 并重写<code>invoke</code>方法，在 <code>invoke</code> 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑；</li><li>通过 <code>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code> 方法创建代理对象；</li></ol><h3 id="cglib-动态代理机制" tabindex="-1"><a class="header-anchor" href="#cglib-动态代理机制"><span>CGLIB 动态代理机制</span></a></h3><p><strong>JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类</strong>。<strong>我们可以用 CGLIB 动态代理机制来避免</strong>。</p><p><strong>在 CGLIB 动态代理机制中 <code>MethodInterceptor</code> 接口和 <code>Enhancer</code> 类是核心。</strong></p><p>你需要自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法。</p><p>这个方法一共有 4 个参数：<strong>obj</strong> : 被代理的对象（需要增强的对象）；<strong>method</strong> : 被拦截的方法（需要增强的方法）；<strong>args</strong> : 方法入参；<strong>proxy</strong> : 用于调用原始方法。</p><p>你可以通过 <code>Enhancer</code>类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 <code>MethodInterceptor</code> 中的 <code>intercept</code> 方法。</p><p><strong>实现步骤：</strong></p><ol><li>定义一个类；</li><li>自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法，和 JDK 动态代理中的 <code>invoke</code> 方法类似；</li><li>通过 <code>Enhancer</code> 类的 <code>create()</code>创建代理类；</li></ol><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h2><p><strong>灵活性</strong>：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</p><p><strong>JVM 层面</strong>：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</p>',35)]))}const i=e(a,[["render",c]]),g=JSON.parse('{"path":"/1.Note/1.Java%20_%20CS/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"en-US","frontmatter":{"title":"设计模式","order":6},"git":{"createdTime":1752411078000,"updatedTime":1752411078000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":4.1,"words":1230},"filePathRelative":"1.Note/1.Java & CS/设计模式.md"}');export{i as comp,g as data};
