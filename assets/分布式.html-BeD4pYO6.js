import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as s}from"./app-C5i0rLSr.js";const o={};function t(i,r){return s(),n("div",null,r[0]||(r[0]=[e('<h1 id="分布式理论" tabindex="-1"><a class="header-anchor" href="#分布式理论"><span>分布式理论</span></a></h1><h2 id="cap理论" tabindex="-1"><a class="header-anchor" href="#cap理论"><span>cap理论</span></a></h2><p>CAP 原则又称 CAP 定理, 指的是在一个分布式系统中, Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）, 三者不可得兼。</p><p>一致性(C) : 在分布式系统中的所有数据备份, 在同一时刻是否同样的值(等同于所有节点访问同一份最新的数据副本)</p><p>可用性(A): 在集群中一部分节点故障后, 集群整体是否还能响应客户端的读写请求(对数据更新具备高可用性)</p><p>分区容忍性(P): 以实际效果而言, 分区相当于对通信的时限要求. 系统如果不能在时限内达成数据一致性, 就意味着发生了分区的情况, 必须就当前操作在 C 和 A 之间做出选择</p><hr><h2 id="base-理论" tabindex="-1"><a class="header-anchor" href="#base-理论"><span>BASE 理论</span></a></h2><p><strong>BASE</strong> 是 <strong>Basically Available（基本可用）</strong>、<strong>Soft-state（软状态）</strong> 和 <strong>Eventually Consistent（最终一致性）</strong> 三个短语的缩写。BASE 理论是对 CAP 中一致性 C 和可用性 A 权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的，它大大降低了我们对系统的要求。</p><hr><p><strong>BASE 理论本质上是对 CAP 的延伸和补充，更具体地说，是对 CAP 中 AP 方案的一个补充</strong></p><hr><p><strong>基本可用</strong>是指分布式系统在出现不可预知故障的时候，允许损失部分可用性。但是，这绝不等价于系统不可用</p><p><strong>软状态</strong>指允许系统中的数据存在中间状态（<strong>CAP 理论中的数据不一致</strong>），并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时</p><p><strong>最终一致性</strong>强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。</p><hr><h2 id="paxos-算法详解" tabindex="-1"><a class="header-anchor" href="#paxos-算法详解"><span>Paxos 算法详解@</span></a></h2><p><a href="https://xiaolincoding.com/interview/cap.html#raft%E5%8D%8F%E8%AE%AE%E5%92%8Cpaxos%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%8E%9F%E7%90%86" target="_blank" rel="noopener noreferrer">分布式面试题 | 小林coding | Java面试学习</a></p><h2 id="raft-算法详解" tabindex="-1"><a class="header-anchor" href="#raft-算法详解"><span>Raft 算法详解@</span></a></h2><p><a href="https://xiaolincoding.com/interview/cap.html#raft%E5%8D%8F%E8%AE%AE%E5%92%8Cpaxos%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%8E%9F%E7%90%86" target="_blank" rel="noopener noreferrer">分布式面试题 | 小林coding | Java面试学习</a></p><p><a href="https://xiaolincoding.com/interview/cap.html#%E6%9C%89%E4%BB%80%E4%B9%88%E6%A1%86%E6%9E%B6%E6%88%96%E6%8A%80%E6%9C%AF%E7%94%A8%E4%BA%86raft%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer">分布式面试题 | 小林coding | Java面试学习</a></p><h2 id="gossip-协议详解" tabindex="-1"><a class="header-anchor" href="#gossip-协议详解"><span>Gossip 协议详解@</span></a></h2><hr><h1 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁"><span>分布式锁</span></a></h1><p>分布式锁是一种在<strong>分布式系统</strong>或<strong>集群环境</strong>中使用的、用于<strong>协调多个进程/服务对共享资源进行互斥访问</strong>的机制。</p><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><h3 id="基本条件" tabindex="-1"><a class="header-anchor" href="#基本条件"><span>基本条件</span></a></h3><p>一个最基本的分布式锁需要满足：</p><ul><li><strong>互斥</strong>：任意一个时刻，锁只能被一个线程持有。</li><li><strong>高可用</strong>：锁服务是高可用的，当一个锁服务出现问题，能够自动切换到另外一个锁服务。并且，即使客户端的释放锁的代码逻辑出现问题，锁最终一定还是会被释放，不会影响其他线程对共享资源的访问。这一般是通过超时机制实现的。</li><li><strong>可重入</strong>：一个节点获取了锁之后，还可以再次获取锁。</li></ul><p>除了上面这三个基本条件之外，一个好的分布式锁还需要满足下面这些条件：</p><ul><li><strong>高性能</strong>：获取和释放锁的操作应该快速完成，并且不应该对整个系统的性能造成过大影响。</li><li><strong>非阻塞</strong>：如果获取不到锁，不能无限期等待，避免对系统正常运行造成影响。</li></ul><hr><h2 id="基于-redis实现" tabindex="-1"><a class="header-anchor" href="#基于-redis实现"><span>基于 Redis实现@</span></a></h2><p><a href="https://javaguide.cn/distributed-system/distributed-lock-implementations.html" target="_blank" rel="noopener noreferrer">分布式锁常见实现方案总结 | JavaGuide</a></p><p><a href="https://xiaolincoding.com/interview/cap.html#%E7%94%A8redis%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F" target="_blank" rel="noopener noreferrer">分布式面试题 | 小林coding | Java面试学习</a></p><hr><h2 id="基于-zookeeper实现" tabindex="-1"><a class="header-anchor" href="#基于-zookeeper实现"><span>基于 ZooKeeper实现@</span></a></h2><p><a href="https://javaguide.cn/distributed-system/distributed-lock-implementations.html" target="_blank" rel="noopener noreferrer">分布式锁常见实现方案总结 | JavaGuide</a></p><p><a href="https://xiaolincoding.com/interview/cap.html#%E7%94%A8redis%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F" target="_blank" rel="noopener noreferrer">分布式面试题 | 小林coding | Java面试学习</a></p><hr><h1 id="分布式事务" tabindex="-1"><a class="header-anchor" href="#分布式事务"><span>分布式事务</span></a></h1><h2 id="分布式事务的解决方案" tabindex="-1"><a class="header-anchor" href="#分布式事务的解决方案"><span>分布式事务的解决方案</span></a></h2><h4 id="_1-两阶段提交" tabindex="-1"><a class="header-anchor" href="#_1-两阶段提交"><span>1. 两阶段提交</span></a></h4><ul><li><strong>场景</strong>：适用于<strong>强一致性</strong>需求高、参与方较少且性能要求不高的<strong>内部系统</strong>（如数据库分库分表）。</li><li><strong>流程</strong>： <ol><li><strong>准备阶段</strong>：协调者询问所有参与者是否可以提交，参与者执行事务但不提交，并锁定资源。</li><li><strong>提交阶段</strong>：如果所有参与者都回复“可以提交”，协调者发送提交指令；否则发送回滚指令。</li></ol></li><li><strong>优点</strong>：强一致性。</li><li><strong>缺点</strong>：<strong>同步阻塞</strong>（资源锁定时间长）、<strong>性能低</strong>、协调者单点故障。</li></ul><h4 id="_2-tcc补偿事务" tabindex="-1"><a class="header-anchor" href="#_2-tcc补偿事务"><span>2. TCC补偿事务</span></a></h4><ul><li><strong>场景</strong>：适用于<strong>高并发、短流程</strong>的业务，如电商、金融交易。</li><li><strong>流程</strong>：将业务操作分为三个阶段： <ol><li><strong>Try</strong>：尝试执行，完成所有业务检查，并预留必需资源（如冻结库存、扣减优惠券）。</li><li><strong>Confirm</strong>：确认执行，真正提交事务（如扣减库存）。</li><li><strong>Cancel</strong>：取消执行，释放Try阶段预留的资源（如解冻库存）。</li></ol></li><li><strong>优点</strong>：<strong>性能高</strong>，避免了长事务锁资源。</li><li><strong>缺点</strong>：<strong>业务侵入性强</strong>，需要为每个操作实现Try/Confirm/Cancel接口，开发复杂。</li></ul><h4 id="_3-本地消息表" tabindex="-1"><a class="header-anchor" href="#_3-本地消息表"><span>3. 本地消息表</span></a></h4><ul><li><strong>场景</strong>：适用于<strong>最终一致性</strong>、业务周期较长的场景，如跨系统集成。</li><li><strong>流程</strong>： <ol><li>事务发起方在本地数据库执行业务操作，并记录一条消息到专用表，<strong>在同一事务中完成</strong>。</li><li>有一个后台任务轮询消息表，将消息发送给消息队列。</li><li>消费者从MQ消费消息，执行后续操作，成功后更新消息状态。</li></ol></li><li><strong>优点</strong>：<strong>简单实用</strong>，避免了复杂的分布式事务协议。</li><li><strong>缺点</strong>：<strong>强依赖数据库</strong>，消息表可能成为瓶颈；时效性较差（依赖轮询）。</li></ul><h4 id="_4-事务消息" tabindex="-1"><a class="header-anchor" href="#_4-事务消息"><span>4. 事务消息</span></a></h4><ul><li><strong>场景</strong>：适用于<strong>异步场景</strong>和<strong>最终一致性</strong>，如 RocketMQ 的事务消息。</li><li><strong>流程</strong>（以RocketMQ为例）： <ol><li>生产者向MQ发送<strong>半消息</strong>，对消费者不可见。</li><li>MQ回复成功后，生产者执行<strong>本地事务</strong>。</li><li>生产者根据本地事务结果向MQ提交<strong>Commit</strong>或<strong>Rollback</strong>。</li><li>MQ若收到Commit，则投递消息；若超时未收到，则回查生产者状态。</li></ol></li><li><strong>优点</strong>：<strong>解耦</strong>、<strong>高性能</strong>，实现了可靠的最终一致性。</li><li><strong>缺点</strong>：需要MQ中间件支持（如RocketMQ），业务方需实现回查接口。</li></ul><h4 id="_5-saga模式" tabindex="-1"><a class="header-anchor" href="#_5-saga模式"><span>5. Saga模式</span></a></h4><ul><li><strong>场景</strong>：适用于<strong>长事务</strong>、<strong>跨多服务</strong>的复杂业务流程（如机票酒店套餐预订）。</li><li><strong>流程</strong>：将长事务拆分为一系列本地事务，每个事务都有对应的<strong>补偿操作</strong>。通过一个协调器按顺序执行所有正向事务，如果其中某一步失败，则按<strong>反向顺序</strong>执行补偿操作。</li><li><strong>优点</strong>：解决了长事务的问题，性能较好。</li><li><strong>缺点</strong>：<strong>编程模型复杂</strong>，需要设计正向和反向操作，且不保证隔离性（可能出现脏读）。</li></ul><hr><h1 id="分布式id" tabindex="-1"><a class="header-anchor" href="#分布式id"><span>分布式ID</span></a></h1><hr><h1 id="api网关" tabindex="-1"><a class="header-anchor" href="#api网关"><span>API网关</span></a></h1><hr><h1 id="rpc" tabindex="-1"><a class="header-anchor" href="#rpc"><span>RPC</span></a></h1><p><strong>RPC（Remote Procedure Call）</strong> 即远程过程调用，通过名字我们就能看出 RPC 关注的是远程调用而非本地调用。</p><p><strong>为什么要 RPC ？</strong> 因为，两个不同的服务器上的服务提供的方法不在一个内存空间，所以，需要通过网络编程才能传递方法调用所需要的参数。并且，方法调用的结果也需要通过网络编程来接收。但是，如果我们自己手动网络编程来实现这个调用过程的话工作量是非常大的，因为，我们需要考虑底层传输方式（TCP 还是 UDP）、序列化方式等等方面。</p><p><strong>RPC 能帮助我们做什么呢？</strong> 简单来说，通过 RPC 可以帮助我们调用远程计算机上某个服务的方法，这个过程就像调用本地方法一样简单。并且！我们不需要了解底层网络编程的具体细节。</p><hr><h2 id="调用过程" tabindex="-1"><a class="header-anchor" href="#调用过程"><span>调用过程</span></a></h2><hr><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><hr><h2 id="常见的-rpc-框架" tabindex="-1"><a class="header-anchor" href="#常见的-rpc-框架"><span>常见的 RPC 框架</span></a></h2><p><strong>gRPC</strong>：由 Google 开发的高性能、开源的 RPC 框架，支持多种编程语言，使用 Protocol Buffers 作为序列化协议，具有高效、灵活等特点。</p><p><strong>Thrift</strong>：由 Facebook 开发的跨语言的 RPC 框架，支持多种数据传输协议和序列化格式，具有良好的可扩展性和性能。</p><p><strong>Dubbo</strong>：阿里巴巴开源的高性能 Java RPC 框架，提供了服务治理、集群容错、负载均衡等功能，广泛应用于国内的互联网企业。</p><hr><h1 id="zookeeper" tabindex="-1"><a class="header-anchor" href="#zookeeper"><span>ZooKeeper@</span></a></h1><p><a href="https://javaguide.cn/distributed-system/distributed-process-coordination/zookeeper/zookeeper-intro.html" target="_blank" rel="noopener noreferrer">ZooKeeper相关概念总结(入门) | JavaGuide</a></p><p><a href="https://javaguide.cn/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.html" target="_blank" rel="noopener noreferrer">ZooKeeper相关概念总结(进阶) | JavaGuide</a></p><p>ZooKeeper 是一个开源的<strong>分布式协调服务</strong>，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用</p><hr><h2 id="基础-1" tabindex="-1"><a class="header-anchor" href="#基础-1"><span>基础</span></a></h2><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><hr><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><hr><h3 id="核心原理" tabindex="-1"><a class="header-anchor" href="#核心原理"><span>核心原理</span></a></h3><p><a href="https://xiaolincoding.com/interview/cap.html#zookeeper%E6%8B%BF%E6%9D%A5%E5%81%9A%E4%BB%80%E4%B9%88-%E6%A0%B8%E5%BF%83%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noopener noreferrer">分布式面试题 | 小林coding | Java面试学习</a></p><hr><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h3><hr><h2 id="集群" tabindex="-1"><a class="header-anchor" href="#集群"><span>集群</span></a></h2><hr><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h1><h2 id="常见的限流算法" tabindex="-1"><a class="header-anchor" href="#常见的限流算法"><span>常见的限流算法</span></a></h2><p><a href="https://xiaolincoding.com/interview/cap.html#%E5%B8%B8%E8%A7%81%E7%9A%84%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95%E4%BD%A0%E7%9F%A5%E9%81%93%E5%93%AA%E4%BA%9B" target="_blank" rel="noopener noreferrer">分布式面试题 | 小林coding | Java面试学习</a></p>',91)]))}const p=a(o,[["render",t]]),g=JSON.parse('{"path":"/1.Note/4.Tool/%E5%88%86%E5%B8%83%E5%BC%8F.html","title":"分布式","lang":"en-US","frontmatter":{"title":"分布式","order":5},"git":{"createdTime":1756458008000,"updatedTime":1756458008000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":8.09,"words":2427},"filePathRelative":"1.Note/4.Tool/分布式.md"}');export{p as comp,g as data};
