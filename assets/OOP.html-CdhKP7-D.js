import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as r,o}from"./app-X1W0vOwo.js";const n={};function s(p,t){return o(),e("div",null,t[0]||(t[0]=[r('<h2 id="深拷贝-浅拷贝-引用拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝-浅拷贝-引用拷贝"><span>深拷贝，浅拷贝，引用拷贝</span></a></h2><p>深拷贝是完全复制一个对象及其所有嵌套的对象，<strong>包括所有引用对象</strong>。</p><p>浅拷贝是创建一个新的对象，但<strong>对象的属性依然是引用类型时</strong>，这些属性指向的是原对象中相同的内存地址（也就是<strong>引用</strong>不会复制，而是共享）。如果属性是基本数据类型，则会创建一个新值。</p><p>引用拷贝是将<strong>对象的引用</strong>复制一份，这意味着两个引用指向同一个对象。<strong>不会创建新对象</strong>，只是简单地复制了原始引用，栈中的两个变量都指向堆中的同一个对象。</p><h2 id="oop的三大特性" tabindex="-1"><a class="header-anchor" href="#oop的三大特性"><span>OOP的三大特性</span></a></h2><p>首先OOP的三大特性分别是封装，继承，多态。</p><p>封装就是把数据和方法封装起来，隐藏内部的实现细节，外部只能通过提供的接口访问和修改数据，并且封装还提供了访问修饰符来控制权限，进一步增强了安全性和灵活性。它强调的是安全性和可维护性。</p><p>继承允许我们在已有类的基础上创建类，也就是子类继承父类的属性和方法，避免了代码的重复，提高了代码的复用性，它体现的是一个（is-a）的关系，存在耦合的问题，在实践中我们有”组合（has-a）优于继承“的设计思想。强调的是复用。</p><p>多态是指”一个接口，多种实现“，分为运行时多态和编译时多态，分别对应方法重写和方法重载，重写发生在子类和父类之间，子类重写父类的方法，方法名和参数都相同，在运行时决定调用哪个方法；重载发生在同一个类，方法名相同，但是参数列表不同，在编译时决定调用哪个方法。多态让我们可以用统一的方式处理不同的对象，强调的是扩展性和灵活性。</p><p>另外还有一个特性叫做”抽象“，有时候也被成为第四大特性，它是前三个特性的基础，是对共性行为或特征的提取，主要有两种形式：接口和抽象类。接口是对行为的共性的提取和抽象，强调”能做什么“，而抽象类是对特征的提取和抽象，强调”是什么“。</p>',10)]))}const m=a(n,[["render",s]]),d=JSON.parse('{"path":"/2.%E9%9D%A2%E8%AF%95%E7%AF%87/2.%E5%85%AB%E8%82%A1%E7%AC%94%E8%AE%B0/OOP.html","title":"OOP","lang":"en-US","frontmatter":{"title":"OOP"},"git":{"createdTime":1748433988000,"updatedTime":1748433988000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":2.1,"words":631},"filePathRelative":"2.面试篇/2.八股笔记/OOP.md"}');export{m as comp,d as data};
