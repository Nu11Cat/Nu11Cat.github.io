import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as n,o as a}from"./app-DnIC2ZP0.js";const t={};function c(d,e){return a(),r("div",null,e[0]||(e[0]=[n(`<h1 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程"><span>多线程</span></a></h1><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程"><span>线程</span></a></h2><h3 id="进程与线程" tabindex="-1"><a class="header-anchor" href="#进程与线程"><span>进程与线程</span></a></h3><p><strong>进程（Process）</strong> 是操作系统资源分配的最小单位，每个进程拥有独立的内存空间、代码、数据和系统资源。进程之间相互独立，数据不共享，通信成本较高。</p><p><strong>线程（Thread）</strong> 是程序执行的最小单位，是进程内部的一个执行流。一个进程可以包含多个线程，它们共享同一块内存（代码、堆等），但每个线程有自己的栈空间和程序计数器。由于共享资源，线程之间通信开销小，切换快，但也更容易出现并发问题。</p><p>进程是容器，线程是容器中的执行单元。线程必须依附于进程存在，离开进程线程无法单独存在。</p><h3 id="线程安全" tabindex="-1"><a class="header-anchor" href="#线程安全"><span>线程安全</span></a></h3><p>线程安全和不安全是在多线程环境下对于同一份数据的访问是否能够保证其正确性和一致性的描述。</p><ul><li>线程安全指的是在多线程环境下，对于同一份数据，不管有多少个线程同时访问，都能保证这份数据的正确性和一致性。</li><li>线程不安全则表示在多线程环境下，对于同一份数据，多个线程同时访问时可能会导致数据混乱、错误或者丢失。</li></ul><h3 id="线程间同步" tabindex="-1"><a class="header-anchor" href="#线程间同步"><span>线程间同步</span></a></h3><p>下面是几种常见的线程同步的方式：</p><ol><li><strong>互斥锁(Mutex)</strong> ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 <code>synchronized</code> 关键词和各种 <code>Lock</code> 都是这种机制。</li><li><strong>读写锁（Read-Write Lock）</strong> ：允许多个线程同时读取共享资源，但只有一个线程可以对共享资源进行写操作。</li><li><strong>信号量(Semaphore)</strong> ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。</li><li><strong>屏障（Barrier）</strong> ：屏障是一种同步原语，用于等待多个线程到达某个点再一起继续执行。当一个线程到达屏障时，它会停止执行并等待其他线程到达屏障，直到所有线程都到达屏障后，它们才会一起继续执行。比如 Java 中的 <code>CyclicBarrier</code> 是这种机制。</li><li><strong>事件(Event)</strong> :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。</li></ol><h3 id="创建线程的方式" tabindex="-1"><a class="header-anchor" href="#创建线程的方式"><span>创建线程的方式</span></a></h3><p>第一种是<strong>继承 Thread 类</strong>，重写它的 <code>run()</code> 方法，然后创建实例调用 <code>start()</code> 方法启动线程。这种方式简单直观，但因为 Java 不支持多继承，所以灵活性较差。</p><p>第二种是<strong>实现 Runnable 接口</strong>，把线程逻辑写在 <code>run()</code> 方法中，再把这个实现类传给 Thread 构造器。这种方式更灵活，适合资源共享，也更符合面向接口编程的思想。</p><p>第三种是<strong>实现 Callable 接口并结合 FutureTask 使用</strong>。这个方式的优势是可以有返回值，且可以抛出异常，更适合需要拿到线程执行结果的场景。</p><p>如果使用线程池，比如通过 <code>ExecutorService</code> 来提交任务，那底层其实也是通过 Callable 或 Runnable 实现的，只是线程的创建和管理交给了线程池，效率更高、控制力更强。</p><h3 id="生命周期和状态" tabindex="-1"><a class="header-anchor" href="#生命周期和状态"><span>生命周期和状态</span></a></h3><p>Java线程大致有 <strong>六种状态</strong>，定义在 <code>Thread.State</code> 枚举中，整个生命周期如下：</p><p><strong>1. 新建（New）</strong> 线程对象刚创建，还没调用 <code>start()</code> 方法。</p><p><strong>2. 就绪（Runnable）</strong> 调用 <code>start()</code> 后，线程进入就绪队列，等待 CPU 调度。此时并没有运行。</p><p><strong>3. 运行中（Running）</strong> 线程真正获得 CPU 时间片，开始执行 <code>run()</code> 方法的代码。</p><p><strong>4. 阻塞（Blocked）</strong> 线程尝试获取某个被别的线程持有的锁（比如 synchronized），获取不到就进入阻塞状态，直到拿到锁。</p><p><strong>5. 等待（Waiting）</strong> 线程主动等待别的线程的通知，例如调用了 <code>wait()</code>、<code>join()</code>，没有设置超时。必须通过 <code>notify()</code> 或 <code>join()</code> 结束才会被唤醒。</p><p><strong>6. 计时等待（Timed Waiting）</strong> 和等待类似，但设置了超时时间，比如 <code>sleep(1000)</code>、<code>wait(1000)</code>、<code>join(1000)</code>。</p><p><strong>7. 终止（Terminated）</strong> 线程运行完了，或者抛异常终止了，生命周期结束。</p><h3 id="线程上下文切换" tabindex="-1"><a class="header-anchor" href="#线程上下文切换"><span>线程上下文切换</span></a></h3><p>线程在执行过程中会有自己的运行条件和状态（也称上下文），比如上文所说到过的程序计数器，栈信息等。当出现如下情况的时候，线程会从占用 CPU 状态中退出。</p><ul><li>主动让出 CPU，比如调用了 <code>sleep()</code>, <code>wait()</code> 等。</li><li>时间片用完，因为操作系统要防止一个线程或者进程长时间占用 CPU 导致其他线程或者进程饿死。</li><li>调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。</li><li>被终止或结束运行</li></ul><p>这其中前三种都会发生线程切换，线程切换意味着需要保存当前线程的上下文，留待线程下次占用 CPU 的时候恢复现场。并加载下一个将要占用 CPU 的线程上下文。这就是所谓的 <strong>上下文切换</strong>。</p><h3 id="thread-类的-run-方法" tabindex="-1"><a class="header-anchor" href="#thread-类的-run-方法"><span>Thread 类的 run 方法</span></a></h3><p><strong>可以直接调用 Thread 类的 run 方法吗？</strong></p><p>可以，但是一般不会直接调用 <code>run()</code>，而是使用 <code>start()</code> 来正确启动线程。</p><p>直接调用 <code>run()</code> 并不会启动一个新线程，它只是一个普通的方法调用，会在当前线程中执行，不具备多线程的效果。</p><p>正常启动线程，应该调用 <code>start()</code> 方法。<code>start()</code> 会由 JVM 创建新的线程，然后自动调用该线程的 <code>run()</code> 方法，真正实现多线程并发。</p><h3 id="sleep-方法和-wait-方法" tabindex="-1"><a class="header-anchor" href="#sleep-方法和-wait-方法"><span>sleep() 方法和 wait() 方法</span></a></h3><p>在Java中，<code>sleep()</code> 和 <code>wait()</code> 都是控制线程执行流程的方法，两者都可以暂停线程的执行，但它们的用途和行为有显著不同。</p><p><strong><code>sleep()</code></strong> 是 <code>Thread</code> 类的方法，用于让当前线程暂停执行指定的时间。线程在暂停期间不会释放持有的锁。它通常用于线程执行的延时，比如定时任务或控制任务的执行频率。当线程调用 <code>sleep()</code> 后，它会进入 <strong>“Timed Waiting”</strong> 状态，直到指定时间过去后自动唤醒。需要注意的是，<code>sleep()</code> 会抛出 <code>InterruptedException</code>，如果线程在睡眠过程中被中断。</p><p><strong><code>wait()</code></strong> 是 <code>Object</code> 类的方法，必须在同步块或同步方法中调用，因为它需要持有对象的锁。当线程调用 <code>wait()</code> 后，它会进入 <strong>“Waiting”</strong> 状态，直到其他线程通过调用 <code>notify()</code> 或 <code>notifyAll()</code> 来唤醒它。与 <code>sleep()</code> 不同，<code>wait()</code> 会释放持有的锁，允许其他线程访问共享资源。这种机制通常用于线程间的通信，例如生产者-消费者问题。</p><p>简单来说，<code>sleep()</code> 用于让线程休眠一段时间，而 <code>wait()</code> 用于线程间的协调和同步，通常结合 <code>notify()</code> 或 <code>notifyAll()</code> 一起使用。</p><blockquote><p><strong><code>wait()</code>属于<code>Object</code> 类</strong>：<code>wait()</code> 是让获得对象锁的线程实现等待，会自动释放当前线程占有的对象锁。每个对象（<code>Object</code>）都拥有对象锁，既然要释放当前线程占有的对象锁并让其进入 WAITING 状态，自然是要操作对应的对象（<code>Object</code>）而非当前的线程（<code>Thread</code>）。</p><p><strong><code>sleep()</code> 属于 <code>Thread</code></strong> ：因为 <code>sleep()</code> 是让当前线程暂停执行，不涉及到对象类，也不需要获得对象锁。</p></blockquote><h2 id="多线程-1" tabindex="-1"><a class="header-anchor" href="#多线程-1"><span>多线程</span></a></h2><h3 id="并发与并行" tabindex="-1"><a class="header-anchor" href="#并发与并行"><span>并发与并行</span></a></h3><p><strong>并发（Concurrency）</strong> 指的是多个任务在同一时间段内交替执行，可能只用一个 CPU 核心，通过任务切换实现“同时进行”的效果。本质是<strong>逻辑上的同时</strong>，底层依靠时间片轮转。</p><p><strong>并行（Parallelism）</strong> 是指多个任务在<strong>同一时刻真正同时运行</strong>，必须依赖多核 CPU。每个任务在不同的核心上同时执行，实现<strong>物理上的同时</strong>。</p><p>举个例子，如果一个厨房只有一个人做饭，但能快速切换做饭、洗菜、炒菜的动作，那是并发；如果厨房有三个人分别同时做这三件事，那是并行。</p><p>并发更关注<strong>任务切换效率</strong>，并行更关注<strong>处理能力最大化</strong>。</p><h3 id="同步与异步" tabindex="-1"><a class="header-anchor" href="#同步与异步"><span>同步与异步</span></a></h3><p>同步和异步是描述任务执行时的等待与通知机制。</p><p><strong>同步（Synchronous）</strong> 是指调用方发起请求后，<strong>必须等待任务执行完毕才能继续</strong>执行后续操作。调用过程是阻塞的。</p><p><strong>异步（Asynchronous）</strong> 是指调用方发起请求后，<strong>不等待任务完成，立即返回</strong>，任务在后台执行，完成后通过回调、通知或轮询的方式获取结果。调用过程是非阻塞的。</p><p>举个例子，打电话让别人帮你查快递并等他查完再挂电话，这是同步；而发个微信让他查，等查完再告诉你，是异步。</p><p>在 Java 中，普通方法调用是同步的；使用 <code>CompletableFuture</code>、<code>Future</code>、线程池提交任务时，就是异步执行，主线程可以继续做其他事。</p><p><strong>同步编程</strong>简单直观，但可能导致资源浪费和线程阻塞；<strong>异步编程</strong>提高了程序响应性和资源利用率，常用于 I/O 密集型或高并发场景。</p><h3 id="为什么要使用多线程" tabindex="-1"><a class="header-anchor" href="#为什么要使用多线程"><span>为什么要使用多线程?</span></a></h3><p>使用多线程的核心目的是<strong>提升程序的效率和响应能力</strong></p><p>第一，<strong>提高资源利用率</strong>。现代 CPU 都是多核的，多线程可以让多个核心同时工作，实现真正的并行，提高处理能力。如果单线程运行，只能用到一个核心，浪费硬件资源。</p><p>第二，<strong>提升程序响应性</strong>。比如在图形界面或 Web 应用中，一个线程处理用户输入，另一个线程处理后台逻辑，可以避免界面卡顿，提升用户体验。</p><p>第三，<strong>简化模型结构</strong>。像生产者-消费者、事件驱动、定时任务等，如果用多线程实现，会比纯粹的轮询或状态机更自然、清晰。</p><p>第四，<strong>加快任务处理速度</strong>。比如同时处理多个客户端请求，或者将一个大任务拆分为多个线程并发处理，能够显著缩短整体耗时。</p><h3 id="单核cpu" tabindex="-1"><a class="header-anchor" href="#单核cpu"><span>单核CPU</span></a></h3><p>单核 CPU 是支持 Java 多线程的。操作系统通过时间片轮转的方式，将 CPU 的时间分配给不同的线程。（并发）</p><p><strong>单核 CPU 上运行多个线程效率一定会高吗？</strong></p><p>不一定。在单核 CPU 上运行多个线程时，线程是通过时间片轮转来切换执行的，并不是真正的同时运行，而是快速切换看起来“像是”并发。</p><p>这种切换会带来上下文切换开销，包括保存和恢复线程状态、缓存失效、内存切换等。如果线程数量过多或者频繁切换，反而会导致效率下降，甚至不如单线程执行。</p><p>另外，多线程引入了线程同步、锁竞争、死锁等问题，在单核环境下，这些问题的代价会更明显，降低程序整体性能。</p><p>所以在单核 CPU 上，是否使用多线程，取决于具体场景：</p><ul><li><p>适合多线程的情况：比如大量 I/O 操作（读写文件、网络请求等），CPU 在等待时可以切到其他线程，提升资源利用率。</p></li><li><p>不适合多线程的情况：如果是 CPU 密集型运算，多线程反而因为频繁切换和锁竞争导致更低的效率。</p></li></ul><h1 id="锁" tabindex="-1"><a class="header-anchor" href="#锁"><span>锁</span></a></h1><h2 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h2><p><strong>死锁（Deadlock）</strong> 是指两个或多个线程在执行过程中，因争夺资源而导致<strong>相互等待对方释放资源</strong>，从而使得所有线程都无法继续执行的情况。</p><p>Java 线程的 <code>jstack</code> 工具<strong>检测死锁</strong>：如果有死锁，<code>jstack</code> 的输出中通常会有 <code>Found one Java-level deadlock:</code>的字样，后面会跟着死锁相关的线程信息。</p><p><strong>死锁的四个必要条件</strong>：</p><ol><li><strong>互斥</strong>：至少有一个资源是处于<strong>独占模式</strong>的，即某一时刻只能有一个线程使用该资源。</li><li><strong>持有并等待</strong>：一个线程已经持有了至少一个资源，但又在等待其他线程持有的资源。</li><li><strong>非抢占</strong>：资源不能被强制抢占，只有线程自己释放资源。</li><li><strong>循环等待</strong>：一组线程之间存在一种“环形等待”关系，即线程A等待线程B持有的资源，线程B又在等待线程A持有的资源。</li></ol><p><strong>防止和避免死锁的方法</strong>：</p><ol><li><strong>避免循环等待</strong>：通过一定的策略（比如按顺序加锁）来避免出现循环等待。</li><li><strong>使用 <code>tryLock</code></strong>：例如 <code>ReentrantLock</code> 提供的 <code>tryLock()</code> 方法，能够尝试获得锁，如果无法获得就放弃，避免死锁。</li><li><strong>锁超时机制</strong>：通过设置锁的最大等待时间，避免无限等待。</li><li><strong>减少锁的粒度</strong>：尽量减少持有锁的时间，并且尽可能避免嵌套锁。</li></ol><h2 id="可重入锁" tabindex="-1"><a class="header-anchor" href="#可重入锁"><span>可重入锁</span></a></h2><p>**可重入锁（Reentrant Lock）*<em>指的是*<em>同一个线程在获取锁之后，可以再次获取这把锁而不会发生死锁</em></em>。</p><p>换句话说，如果一个线程已经获得了某个锁，它可以在没有释放该锁的情况下再次进入同一个锁保护的代码块，系统会自动记录<strong>锁的重入次数</strong>，等线程退出时再逐层释放。</p><p>Java 中的 <code>synchronized</code> 和 <code>ReentrantLock</code> 都是<strong>可重入锁</strong>的实现。</p><p>举个例子说明：如果一个线程调用一个加了锁的方法，而这个方法内部又调用了另一个加了相同锁的方法，由于同一个线程已经持有了锁，所以可以顺利进入内层方法，不会被自己阻塞。</p><p>可重入锁的好处是<strong>避免了递归调用或内部方法调用时死锁的问题</strong>，也让程序结构更加清晰。</p><h2 id="乐观锁和悲观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁和悲观锁"><span>乐观锁和悲观锁</span></a></h2><p>乐观锁和悲观锁本质上是两种并发控制策略，它们的核心区别在于对<strong>数据冲突的预期不同</strong>。</p><p><strong>悲观锁</strong>认为并发冲突是很常见的，因此每次访问共享资源时都会<strong>先加锁</strong>，比如使用 <code>synchronized</code> 或 <code>ReentrantLock</code> 来保证同一时刻只有一个线程访问资源。这种方式安全性高，适用于并发写多、冲突频繁的场景，比如转账、订单扣库存等。</p><p>而<strong>乐观锁</strong>则认为并发冲突是少数，它<strong>不加锁</strong>，而是每次读取数据时带上一个版本号或时间戳，修改时再比对当前版本是否一致。如果一致就更新成功，否则就重试。像 Java 中的 <code>AtomicInteger</code>、<code>AtomicReference</code>，底层就是基于 CAS 实现的乐观锁。数据库中也常用乐观锁，比如用 <code>version</code> 字段控制更新。</p><p>简单来说，<strong>悲观锁重在预防，乐观锁重在事后校验</strong>。</p><p>悲观锁通常多用于写比较多的情况（多写场景，竞争激烈），这样可以避免频繁失败和重试影响性能，悲观锁的开销是固定的。不过，如果乐观锁解决了频繁失败和重试这个问题的话（比如<code>LongAdder</code>），也是可以考虑使用乐观锁的，要视实际情况而定。</p><p>乐观锁通常多用于写比较少的情况（多读场景，竞争较少），这样可以避免频繁加锁影响性能。不过，乐观锁主要针对的对象是单个共享变量。</p><p><strong>版本号机制</strong></p><p>版本号机制是实现乐观锁的常见方式之一，主要用于解决并发修改共享数据的问题。</p><p>它的核心思路是：每条数据都加一个版本号字段（如 version），每次读取数据时一并读取当前版本号，更新时也携带这个版本号。</p><p>当进行更新操作时，系统会检查当前数据库中的版本号是否与之前读取的一致：</p><ul><li>如果一致，说明这段时间内没人改动过这条数据，就允许更新，并把版本号 +1；</li><li>如果不一致，说明其他线程已经修改过了，当前更新失败，可以选择重试或提示用户。</li></ul><p>这个机制避免了加锁，也能有效防止脏写（Lost Update）问题。</p><p><strong>CAS算法</strong></p><p><a href="https://javaguide.cn/java/concurrent/cas.html" target="_blank" rel="noopener noreferrer">CAS 详解 | JavaGuide</a></p><p>CAS，全称是 Compare-And-Swap（比较并交换），是一种常见的无锁并发原子操作，底层由硬件指令支持。</p><p>它的核心思想是：在更新某个共享变量时，先比较它的当前值是否是预期值，如果是，则更新为新值；如果不是，说明已经被其他线程修改过，更新失败，通常会进行重试。</p><p>在 Java 中，<code>java.util.concurrent.atomic</code> 包下的原子类，比如 <code>AtomicInteger</code>、<code>AtomicReference</code>，就是基于 CAS 实现的乐观锁。</p><p><strong>ABA 问题</strong>是 CAS 算法中一个典型的并发陷阱。</p><p>CAS 只比较当前值和预期值是否相等，但<strong>并不知道这个值在期间是否发生过变化又被改回来了</strong>，也就是说，它只能比较“值”，但不知道“过程”。为了避免 ABA 问题，Java 提供了带版本号的原子引用类：<code>AtomicStampedReference</code>：每次更新时不仅比较值，还比较一个“版本号”或“时间戳”，确保值和版本都没变，从而检测到中间的变化。</p><h2 id="公平锁和非公平锁" tabindex="-1"><a class="header-anchor" href="#公平锁和非公平锁"><span>公平锁和非公平锁</span></a></h2><p><strong>公平锁</strong> : 锁被释放之后，先申请的线程先得到锁。性能较差一些，因为公平锁为了保证时间上的绝对顺序，上下文切换更频繁。</p><p><strong>非公平锁</strong>：锁被释放之后，后申请的线程可能会先获取到锁，是随机或者按照其他优先级排序的。性能更好，但可能会导致某些线程永远无法获取到锁。</p><h2 id="可中断锁和不可中断锁" tabindex="-1"><a class="header-anchor" href="#可中断锁和不可中断锁"><span>可中断锁和不可中断锁</span></a></h2><p><strong>可中断锁</strong>，指的是<strong>线程在等待获取锁的过程中，可以被中断，从而提前退出等待</strong>；而<strong>不可中断锁</strong>则不支持这种机制，一旦开始等待锁，就必须等到锁可用才能继续执行，期间不能响应中断。</p><p>在 Java 中，<code>synchronized</code> 是一种<strong>不可中断锁</strong>。如果一个线程在尝试进入 <code>synchronized</code> 块时被阻塞，那么它只能无限等待下去，除非获取到锁或者线程被强制终止，中间无法通过中断机制来提前结束。</p><p>而 <code>ReentrantLock</code> 支持<strong>可中断锁</strong>，它提供了一个方法叫做 <code>lockInterruptibly()</code>，线程在调用这个方法加锁时，如果被其他线程中断，会立刻抛出 <code>InterruptedException</code>，从而退出等待。这种机制在高并发或者死锁预防场景中非常有用。</p><h2 id="共享锁和独占锁" tabindex="-1"><a class="header-anchor" href="#共享锁和独占锁"><span>共享锁和独占锁</span></a></h2><p>区别主要体现在是否允许多个线程同时持有锁。</p><p><strong>独占锁</strong>指的是<strong>同一时刻只能被一个线程持有</strong>，其他线程必须等待锁释放后才能继续执行。这种锁常用于写操作，目的是防止多个线程同时修改共享资源，从而确保数据一致性。Java 中的 <code>synchronized</code> 和 <code>ReentrantLock</code> 都属于独占锁的典型实现。</p><p>而<strong>共享锁</strong>允许<strong>多个线程同时持有</strong>，只要它们执行的操作不会互相冲突。共享锁通常用于读操作，也叫“读锁”。多个线程可以同时读取共享数据，只要没有线程进行写操作，这种方式可以显著提高读密集型场景下的并发性能。</p><h1 id="jmm" tabindex="-1"><a class="header-anchor" href="#jmm"><span>JMM</span></a></h1><p><a href="https://javaguide.cn/java/concurrent/jmm.html" target="_blank" rel="noopener noreferrer">JMM（Java 内存模型）详解 | JavaGuide</a></p><h1 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池"><span>线程池</span></a></h1><p>线程池（Thread Pool）是 Java 并发编程中一种\\线程管理机制，它的作用是：<strong>预先创建一组线程并重复利用，避免频繁创建和销毁线程的开销</strong>，从而提升系统性能和资源利用率。</p><p>在没有线程池的情况下，每次执行任务都要新建线程，而线程的创建和销毁是昂贵的系统操作，频繁使用会导致性能下降，甚至资源耗尽。线程池通过<strong>复用已存在的线程来执行多个任务</strong>，大大降低了系统开销。</p><h2 id="好处" tabindex="-1"><a class="header-anchor" href="#好处"><span>好处</span></a></h2><ul><li>复用线程，避免频繁创建销毁，提高性能；</li><li>统一调度任务，便于控制并发量和资源使用；</li><li>支持任务排队**、<strong>定时执行</strong>、**取消等高级特性；</li><li>适用于高并发、高吞吐量的服务端程序。</li></ul><h2 id="如何创建线程池" tabindex="-1"><a class="header-anchor" href="#如何创建线程池"><span>如何创建线程池</span></a></h2><p>在 Java 中，创建线程池主要有两种方式：</p><p>第一种是使用 JDK 提供的 <code>Executors</code> 工具类。它封装了几种常见的线程池类型，比如固定大小的线程池、缓存线程池、单线程池和支持定时任务的线程池。这种方式创建线程池非常方便，适合快速开发和一般业务场景。</p><p>第二种是直接使用 <code>ThreadPoolExecutor</code> 类进行自定义创建。它是线程池的核心实现类，可以精细地配置核心线程数、最大线程数、任务队列、线程存活时间以及拒绝策略等参数。相比 <code>Executors</code>，<code>ThreadPoolExecutor</code> 更灵活，也更适合在复杂或高并发场景中使用。</p><h2 id="线程池的大小" tabindex="-1"><a class="header-anchor" href="#线程池的大小"><span>线程池的大小</span></a></h2><p>线程池并不是越大越好，它的大小应该根据业务特性、系统资源和任务类型来合理设定。过小的线程池会导致并发能力不足，处理速度慢；但过大的线程池会消耗大量系统资源，甚至引发线程切换频繁、内存压力大或系统崩溃等问题。</p><p>设定线程池大小时，通常要区分任务是<strong>CPU 密集型</strong>还是<strong>IO 密集型</strong>。</p><p>对于 <strong>CPU 密集型任务</strong>，例如大量计算、加密等，这类任务几乎不涉及阻塞，CPU 是主要瓶颈。线程数设置得太多反而导致频繁上下文切换，反而降低效率。比较合理的配置是：</p><blockquote><p>线程数 ≈ CPU 核心数 或 CPU 核心数 + 1</p></blockquote><p>对于 <strong>IO 密集型任务</strong>，比如读写文件、访问数据库、网络请求等，线程大部分时间都在等待 IO 完成。这种情况下线程是“阻塞多、运行少”，可以适当增加线程数来提高吞吐。常见经验值是：</p><blockquote><p>线程数 ≈ CPU 核心数 × 2 或更高（甚至 2~4 倍）</p></blockquote><p>当然这些只是经验估算，实际项目中最好通过 <strong>压测</strong> 和 <strong>监控指标</strong>进行动态调整，找到一个平衡点。还要结合服务器内存、上下文切换成本、业务响应时间要求等因素。</p><p>此外，对于不同类型的业务，建议<strong>将线程池拆分多个子池</strong>分别管理，避免一个高延迟业务拖慢其他任务处理，提升系统整体可控性。</p><h2 id="如何动态修改线程池参数" tabindex="-1"><a class="header-anchor" href="#如何动态修改线程池参数"><span>如何动态修改线程池参数</span></a></h2><p>在 Java 中，<code>ThreadPoolExecutor</code> 提供了多个 <strong>set 方法</strong>，允许我们在运行过程中动态修改线程池的关键参数，比如核心线程数、最大线程数、线程空闲时间等。这意味着线程池的行为可以根据系统负载、业务波动动态调整，从而提升系统的弹性和稳定性。</p><p>具体来说，常用的方法包括：</p><ul><li><code>setCorePoolSize(int)</code>：动态修改核心线程数；</li><li><code>setMaximumPoolSize(int)</code>：修改最大线程数；</li><li><code>setKeepAliveTime(long, TimeUnit)</code>：修改线程空闲存活时间；</li><li><code>allowCoreThreadTimeOut(boolean)</code>：设置核心线程是否允许回收。</li></ul><p>比如，在高峰时段我们可以适当调高线程数，提升处理能力；低负载时调低线程数，减少资源占用。线程池会自动根据新配置调整行为，比如释放多余线程或允许创建新线程。</p><p>除了手动调用 <code>set</code> 方法，实际项目中也可以结合 <strong>配置中心</strong> 或 <strong>动态监控系统</strong>，实现线程池参数的自动调节。例如，结合 Apollo、Nacos 或 Spring Cloud Config 等，可以做到线程池参数热更新，无需重启应用。</p><h2 id="处理任务的流程" tabindex="-1"><a class="header-anchor" href="#处理任务的流程"><span>处理任务的流程</span></a></h2><p>线程池处理任务的过程，其实可以分为几个阶段，按照“能否创建线程”、“队列是否有空间”、“是否超过最大线程数”这样的判断逻辑来一步步决定任务的去向。</p><p>当线程池调用 <code>execute()</code> 提交一个任务时，它会按照以下顺序处理：</p><p>第一步，线程池会判断当前运行的线程数量是否小于核心线程数。如果还没达到核心数，就会直接创建一个新的线程来执行这个任务，这样可以快速响应初始请求。</p><p>第二步，如果核心线程已经满了，线程池会尝试将任务放入任务队列中。如果队列还有空间，任务就会被缓存等待，由已有的线程来逐个处理。</p><p>第三步，如果队列也满了，说明线程池已经有压力了，此时线程池会判断当前线程数是否还没达到最大线程数。如果还没到上限，就会继续创建新的线程来处理任务。</p><p>第四步，如果最大线程数也达到了，并且队列也满了，这时就说明线程池完全饱和了，新的任务将会被拒绝，具体怎么拒绝则由拒绝策略决定。</p><p>从这个流程可以看出，线程池会优先使用核心线程快速响应，其次是队列缓冲，最后才是扩容线程，目的是在保证性能的同时，尽可能避免资源过度使用。</p><blockquote><p>在 Java 的线程池中，<strong>线程的复用</strong>是通过任务队列配合工作线程机制实现的。线程池中的每个工作线程在执行完一个任务后，不会立即销毁，而是从任务队列中继续取出下一个任务执行。只要线程还处于存活状态，线程池就会不断复用它来处理多个任务，从而避免频繁创建销毁线程所带来的性能损耗。</p><p>关于<strong>任务调度是否公平</strong>，这取决于线程池所使用的任务队列类型。比如 <code>ArrayBlockingQueue</code> 和 <code>LinkedBlockingQueue</code> 默认采用 FIFO（先进先出）策略，因此任务提交顺序与执行顺序基本一致，调度相对公平。但如果使用了优先级队列 <code>PriorityBlockingQueue</code>，任务会根据优先级进行排序，这时调度就不是严格的 FIFO，而是按优先级“择优执行”，这属于业务驱动的不公平调度。</p><p>至于<strong>如何避免线程泄漏</strong>，核心在于合理管理线程的生命周期以及及时清理任务和资源。首先要避免无界队列，因为它可能导致大量任务堆积，线程池长时间保持活跃线程不回收。其次要设置合理的线程空闲回收时间（keepAliveTime），并允许核心线程超时回收（<code>allowCoreThreadTimeOut</code>）。此外，还要确保任务内部不阻塞、不死锁，比如避免任务内部调用同步锁等待、IO 长时间卡住，防止线程一直挂起导致无法复用。</p><p>如果是使用线程池处理数据库连接或网络调用等敏感资源，也建议在线程执行完任务后，显式关闭资源，防止任务代码自身导致资源泄漏从而间接拖住线程。</p></blockquote><h2 id="线程池线程异常" tabindex="-1"><a class="header-anchor" href="#线程池线程异常"><span>线程池线程异常</span></a></h2><p><strong>线程池中线程异常后，销毁还是复用？</strong></p><p>在线程池中，如果某个线程在执行任务时发生了<strong>未捕获的运行时异常</strong>，这个线程会被<strong>线程池自动移除，不再复用</strong>。也就是说，<strong>该线程会被销毁</strong>，线程池会根据需要创建一个新的线程来补充，保持线程池的基本运行能力。</p><p>这是因为线程在发生未捕获异常时，会中断执行流程，处于不可预期的状态。为了保证线程池后续任务的安全性，JDK 的设计是让线程直接退出，由线程池自行维护线程数量。</p><p>不过如果任务内部<strong>捕获了异常并处理</strong>，线程就不会退出，仍然可以继续复用。这就说明：<strong>线程是否被销毁，取决于异常是否被吞掉或处理掉</strong>。</p><p>因此，在实际开发中，一个良好的实践是：<strong>在线程池中的任务内部要做好异常捕获和日志记录</strong>，避免线程因异常退出，造成线程池频繁创建新线程，甚至影响整体性能或日志难以排查。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>线程池中的线程如果执行任务时抛出未捕获异常，会被销毁，不再复用；如果异常被任务代码内部捕获处理，则线程仍会被复用。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="线程池命名" tabindex="-1"><a class="header-anchor" href="#线程池命名"><span>线程池命名</span></a></h2><p>在线程池中给线程命名，主要是为了在调试、日志、监控或出错时，能够快速识别是哪个线程池、哪类业务出了问题。默认情况下线程池创建的线程名字是没有业务含义的，调试时非常不方便。</p><p>为了给线程池命名，我们通常会<strong>自定义 ThreadFactory</strong>。这个接口负责线程的创建逻辑，可以在创建线程时给它设置有意义的名称，比如加上业务前缀、线程编号等。</p><p>在实际项目中，比较常见的做法是使用 <code>Executors.defaultThreadFactory()</code> 的包装类，或者使用像 Google 的 Guava、阿里的 <code>ThreadFactoryBuilder</code> 工具类，来自动生成带前缀的线程名，比如 <code>&quot;order-service-pool-1-thread-3&quot;</code> 这样的格式。这样当我们通过日志、JStack 或线程监控工具查看线程状态时，可以一眼看出是哪个模块的线程出了问题。</p><p>合理命名线程不仅有利于排查 bug，也有利于系统运维监控和日志归类，是构建稳定可维护系统的一种好习惯。</p><h2 id="不推荐使用内置线程池" tabindex="-1"><a class="header-anchor" href="#不推荐使用内置线程池"><span>不推荐使用内置线程池</span></a></h2><p>实际开发中，不推荐直接使用<code>Executors</code> 工具类来快速创建线程池（内置线程池）。</p><ol><li><strong>隐藏的资源风险：任务队列无界</strong></li></ol><p>例如，<code>newFixedThreadPool</code> 和 <code>newSingleThreadExecutor</code> 内部使用的是<strong>无界队列</strong>，也就是说如果任务提交得太快，超过线程处理能力，任务会无限堆积，导致内存占用不断上升，严重时甚至引发 <strong>OOM（内存溢出）</strong>。</p><p>而开发者往往不易察觉，因为这些方法对参数封装太多，<strong>不透明、不可控</strong>。</p><ol start="2"><li><strong>最大线程数不可控</strong></li></ol><p>像 <code>newCachedThreadPool</code> 会根据任务数量<strong>无限制地创建新线程</strong>，如果短时间内有大量并发请求，可能导致系统创建大量线程，占满 CPU 和内存资源，甚至把系统压垮。</p><ol start="3"><li><strong>拒绝策略不明确</strong></li></ol><p>内置线程池默认使用的是 <code>AbortPolicy</code> 拒绝策略，也就是说，当线程池满了并且队列也满时，会<strong>直接抛出异常</strong>，如果业务代码没有处理好，就可能导致任务丢失或程序崩溃。</p><ol start="4"><li><strong>不符合实际业务需求</strong></li></ol><p>实际业务中往往需要根据具体场景调整线程池参数，比如控制最大并发量、设置有界队列、限制任务等待时间等。而内置线程池不支持这种精细化配置，不适合复杂场景。</p><p><strong>推荐做法：</strong></p><p>在生产环境中，更推荐<strong>手动使用 <code>ThreadPoolExecutor</code> 来创建线程池</strong>，明确指定核心线程数、最大线程数、队列容量和拒绝策略，从而在性能、安全性和资源使用之间做出合理权衡。</p><h2 id="常见参数" tabindex="-1"><a class="header-anchor" href="#常见参数"><span>常见参数</span></a></h2><p>常见的几个参数包括：核心线程数、最大线程数、线程存活时间、任务队列、线程工厂和拒绝策略。</p><p>首先是核心线程数，也就是 corePoolSize。它表示线程池中始终保留的线程数量，即使这些线程空闲，也不会被销毁。当有新任务到来时，如果当前线程数还没达到这个值，就会优先创建新线程来处理任务。</p><p>接着是最大线程数，也就是 maximumPoolSize。它定义了线程池允许创建的最大线程数量。当任务很多，核心线程都在忙，并且任务队列也满了，线程池才会创建超过核心数量的线程，但不会超过这个最大值。</p><p>然后是 keepAliveTime，它表示线程在空闲状态下的最大存活时间。超过这个时间没有新任务时，非核心线程会被回收掉。如果配置了允许核心线程超时，这个参数对核心线程也生效。</p><p>任务队列是线程池内部用于缓存等待执行任务的数据结构。比较常见的有有界队列和无界队列。如果使用无界队列，比如默认的 LinkedBlockingQueue，在任务堆积过多时容易导致内存溢出。生产环境中更推荐使用有界队列，能更好地控制系统负载。</p><p>线程工厂用于定制线程的创建方式，比如给线程起个有意义的名字，设置是否为守护线程等。合理命名线程有助于排查问题和监控线程状态。</p><p>最后是拒绝策略。当线程池达到最大线程数并且任务队列已满时，新的任务就无法被接受，这时就会触发拒绝策略。常见的策略包括直接抛出异常、由调用线程执行任务、丢弃任务，或者丢弃最旧的任务。</p><p>整体来看，线程池参数的配置需要根据具体业务场景来调整。核心线程数决定基本并发能力，最大线程数控制系统极限，队列影响任务调度方式，拒绝策略则决定在资源耗尽时如何应对。合理配置这些参数，才能构建出稳定、高效、可控的并发系统。</p><h2 id="核心线程" tabindex="-1"><a class="header-anchor" href="#核心线程"><span>核心线程</span></a></h2><p><code>ThreadPoolExecutor</code> 默认不会回收核心线程，即使它们已经空闲了。</p><p>核心线程空闲时，其状态分为以下两种情况：</p><ul><li><strong>设置了核心线程的存活时间</strong> ：核心线程在空闲时，会处于 <code>WAITING</code> 状态，等待获取任务。如果阻塞等待的时间超过了核心线程存活时间，则该线程会退出工作，将该线程从线程池的工作线程集合中移除，线程状态变为 <code>TERMINATED</code> 状态。</li><li><strong>没有设置核心线程的存活时间</strong> ：核心线程在空闲时，会一直处于 <code>WAITING</code> 状态，等待获取任务，核心线程会一直存活在线程池中。</li></ul><p>当队列中有可用任务时，会唤醒被阻塞的线程，线程的状态会由 <code>WAITING</code> 状态变为 <code>RUNNABLE</code> 状态，之后去执行对应任务。</p><h2 id="拒绝策略" tabindex="-1"><a class="header-anchor" href="#拒绝策略"><span>拒绝策略</span></a></h2><p>线程池的拒绝策略是指，当线程池中的线程数量已经达到最大限制，任务队列也满了，这时再有新任务提交，线程池该如何处理。这种情况通常出现在高并发或任务堆积时，是系统的一种保护机制。</p><p>Java 提供了四种内置的拒绝策略。第一种是默认的策略，叫做 AbortPolicy，它的行为是直接抛出异常，告诉调用者任务提交失败。这种方式可以让系统快速感知到线程池的饱和状态，适合对任务执行可靠性要求高的场景。</p><p>第二种是 CallerRunsPolicy，它不会抛异常，而是把任务交给调用线程自己去执行。也就是说，谁提交的任务，谁来处理。这种方式会拖慢任务提交速度，相当于起到一个自动限流的作用，能在一定程度上保护线程池不被压垮。（如果想要保证任何一个任务请求都要被执行的话选择）</p><blockquote><p><strong>CallerRunsPolicy 拒绝策略有什么风险</strong></p><p>最典型的问题是阻塞主线程。比如在 Web 请求中，如果任务提交者是主线程或处理 HTTP 请求的线程，当线程池压力过大时，请求线程会被强制执行后台任务，导致处理变慢，甚至请求堆积，引发系统响应变慢、吞吐下降，进而影响整体可用性。</p><p>解决这个问题的关键在于风险可控和任务隔离。常见的做法包括：</p><p>第一，合理设置线程池的核心线程数、最大线程数和任务队列长度，确保在正常负载下不会轻易触发拒绝策略。</p><p>第二，对于核心任务，尽量使用限流、降级、熔断等机制提前兜底，避免所有请求都压进线程池。</p><p>第三，可以为重要线程池设置更严格的容量限制，并使用监控告警及时发现线程池拥堵。</p><p>第四，如果业务允许，也可以考虑自定义拒绝策略，比如记录日志、异步入队重试、或发送报警通知。</p></blockquote><p>第三种是 DiscardPolicy，顾名思义，就是直接丢弃新提交的任务，不处理也不抛异常。它的优点是简单粗暴，但缺点也很明显，任务可能悄无声息地被丢掉，适合那些可以容忍部分任务失败的场景，比如日志采集或监控上报。</p><p>第四种是 DiscardOldestPolicy，它会丢弃任务队列中最早的那个任务，然后尝试把当前任务放进去。适用于那些老任务可能已经没什么意义，而新任务更重要的业务，比如某些实时推送场景。</p><p>总体来看，AbortPolicy强调任务不能丢；CallerRunsPolicy强调保护线程池，通过牺牲调用方速度来降压；DiscardPolicy牺牲任务可靠性换取线程池稳定性；而 DiscardOldestPolicy则是一种保新弃旧的权衡策略。</p><p>选择哪种拒绝策略，取决于业务是否允许任务丢失、能否接受延迟处理，或者是否需要快速失败提示。在高并发系统中，合理设置拒绝策略是保障系统稳定运行的重要一环。</p><h2 id="阻塞队列" tabindex="-1"><a class="header-anchor" href="#阻塞队列"><span>阻塞队列</span></a></h2><p>在 Java 的线程池中，**阻塞队列（BlockingQueue）**用于保存等待执行的任务。</p><p><strong>第一，ArrayBlockingQueue</strong> 这是一个<strong>有界的、基于数组的队列</strong>，在创建时必须指定容量。它按先进先出（FIFO）顺序存储任务。 由于队列容量固定，可以防止任务无限堆积，常用于生产环境中限制系统负载，是最推荐的一种阻塞队列。</p><p><strong>第二，LinkedBlockingQueue</strong> 这是一个<strong>基于链表的队列</strong>，可以选择有界也可以无界。<code>Executors.newFixedThreadPool()</code> 默认使用的就是它。 它的特点是队列默认容量非常大（<code>Integer.MAX_VALUE</code>），如果不设上限，任务可能会在高并发下不断堆积，最终导致内存溢出。实际使用时应避免无界，建议手动设定合理上限。</p><p><strong>第三，SynchronousQueue</strong> 这是一个<strong>不存储元素的队列</strong>，每一个 put 操作必须等待一个 take，任务不会进入队列，而是<strong>直接交给线程执行</strong>。 这种队列通常与 <code>maximumPoolSize</code> 搭配使用，适合任务非常短、非常频繁、线程创建成本较低的场景。<code>Executors.newCachedThreadPool()</code> 就使用了它。</p><p><strong>第四，PriorityBlockingQueue</strong> 这是一个支持<strong>任务优先级排序</strong>的队列，元素需要实现 <code>Comparable</code> 接口或提供自定义 <code>Comparator</code>。 线程池根据任务优先级调度执行，适合对任务有强优先级要求的场景，比如调度系统、限速队列等。 但要注意，它是<strong>无界的</strong>，也可能导致内存溢出，需谨慎使用。</p><ul><li><strong>ArrayBlockingQueue</strong>：常用、有界、安全，推荐；</li><li><strong>LinkedBlockingQueue</strong>：默认无界，使用时应设上限；</li><li><strong>SynchronousQueue</strong>：无队列，适合高并发短任务；</li><li><strong>PriorityBlockingQueue</strong>：支持优先级，适合调度型场景。</li></ul><h1 id="关键字等" tabindex="-1"><a class="header-anchor" href="#关键字等"><span>关键字等</span></a></h1><h2 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile"><span>volatile</span></a></h2><p><code>volatile</code> 是 Java 中一种轻量级的内存同步机制，用于修饰变量，确保变量的<strong>可见性</strong>和<strong>禁止指令重排序</strong>。然而，它并不保证操作的<strong>原子性</strong>。</p><p>在 Java 中，每个线程都有自己的工作内存，当线程操作一个变量时，首先会从主内存拷贝该变量的副本到工作内存，线程只会操作工作内存中的副本，最后在合适的时候将结果刷新回主内存。如果没有适当的同步机制，可能导致多个线程读取到的变量值不同，从而出现可见性问题。<code>volatile</code> 通过确保线程写入变量时，会立刻将其更新到主内存，并且线程每次读取时，都会从主内存中获取最新的值，从而解决了<strong>可见性</strong>问题。</p><p>为了提高性能，计算机可能对程序指令进行重排序，而 <code>volatile</code> 可以禁止对带有 <code>volatile</code> 变量的写操作和后续读操作的<strong>重排序</strong>，确保这些操作按顺序执行。当一个变量被声明为 <code>volatile</code> 时，Java 编译器和 CPU 会在它的读写操作前后插入特定的内存屏障。</p><p>然而，<code>volatile</code> 并不保证<strong>原子性操作</strong>。比如对 <code>volatile</code> 变量的递增操作（<code>++</code>）可能仍然会出现竞态条件，因为它涉及多个步骤：读取、修改和写入。因此，仍然需要 <code>synchronized</code> 或其他机制来保证原子性。</p><p><code>volatile</code> 的底层实现依赖于 Java 内存模型（JMM），通过内存屏障来确保变量的可见性和禁止指令重排序。</p><h2 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized"><span>synchronized</span></a></h2><p><code>synchronized</code> 是 Java 中最基本的线程同步机制，用于<strong>保证多线程环境下对共享资源的互斥访问</strong>。它可以修饰方法或代码块，达到加锁的效果，从而避免线程安全问题。</p><p><code>synchronized</code> 主要有三种<strong>用法</strong>：</p><ol><li>修饰实例方法：锁的是当前对象（<code>this</code>），保证同一实例的同步。</li><li>修饰静态方法：锁的是类对象（<code>Class</code>），适用于类级别的同步。</li><li>修饰代码块：可以指定任意对象作为锁，更加灵活，适合控制粒度。</li></ol><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>构造方法不能使用 synchronized 关键字修饰。不过，可以在构造方法内部使用 synchronized 代码块。</span></span>
<span class="line"><span>另外，构造方法本身是线程安全的，但如果在构造方法中涉及到共享资源的操作，就需要采取适当的同步措施来保证整个构造过程的线程安全。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理"><span><strong>底层原理</strong></span></a></h3><p><code>synchronized</code> 是 Java 提供的内置锁机制，它的底层原理主要依赖于 JVM 的实现，特别是在 HotSpot 虚拟机中，锁是通过**对象头中的 Monitor（监视器）**来实现的。</p><p>首先，从编译层面来看，当我们使用 <code>synchronized</code> 修饰代码块或方法时，Java 编译器会在字节码中生成两条指令：<code>monitorenter</code> 和 <code>monitorexit</code>，分别对应加锁和释放锁的操作。JVM 在运行时会通过这两个指令来管理锁的获取和释放。</p><p>从运行时角度来看，每个对象在内存中都有一个对象头，其中包含了一块叫做 Mark Word 的区域，它记录了对象的哈希码、GC信息以及锁标志位。当线程尝试进入同步代码块时，会先查看这个对象头的锁状态，并尝试通过 CAS 操作去获取锁。如果获取失败，根据当前锁的状态，可能会进入自旋或者阻塞等待。</p><p>为了提升锁的性能，HotSpot JVM 在 JDK 1.6 开始引入了<strong>锁优化机制</strong>，将锁分为四种状态：</p><ol><li><strong>无锁</strong>：初始状态，无任何线程竞争；</li><li><strong>偏向锁</strong>：当只有一个线程访问同步块时，会将锁偏向该线程，之后这个线程进入同步块时不再进行 CAS 操作；</li><li><strong>轻量级锁</strong>：当多个线程尝试竞争偏向锁时，偏向锁会升级为轻量级锁，线程通过自旋方式尝试获取锁，避免了线程挂起和恢复的开销；</li><li><strong>重量级锁</strong>：当自旋失败，竞争激烈时，锁会升级为重量级锁，其他线程会被挂起，等待唤醒。</li></ol><p>这些锁的状态是根据竞争情况<strong>自动升级</strong>的，从偏向锁到轻量级锁再到重量级锁，但不会降级。这种策略是为了提高获得锁和释放锁的效率。</p><p>最后，在内存语义方面，<code>synchronized</code> 也保证了<strong>可见性和有序性</strong>。进入同步代码块之前，线程会将工作内存中的共享变量值清空，从主内存中重新读取；退出同步块时会将修改后的值刷新回主内存，从而保证了线程之间数据的可见性。</p><h3 id="偏向锁废弃" tabindex="-1"><a class="header-anchor" href="#偏向锁废弃"><span>偏向锁废弃</span></a></h3><p>偏向锁最早是在 <strong>JDK 1.6</strong> 引入的，目的是<strong>优化无竞争场景下的加锁性能</strong>。它会将锁“偏向”于第一个获得锁的线程，以后这个线程再次进入同步块时就不需要执行 CAS 操作，从而提高性能。</p><p>不过，在<strong>JDK 15</strong> 中，<strong>偏向锁被默认关闭</strong>（通过 JVM 参数 <code>UseBiasedLocking=false</code>），因为随着硬件和 JVM 其他优化手段（如轻量级锁、自旋锁）的提升，偏向锁的收益变小了。</p><p>最终在 <strong>JDK 18 中，偏向锁被彻底移除</strong>，JVM 不再支持这个机制。</p><h3 id="和-volatile-有什么区别" tabindex="-1"><a class="header-anchor" href="#和-volatile-有什么区别"><span>和 volatile 有什么区别</span></a></h3><p><code>synchronized</code> 关键字和 <code>volatile</code> 关键字是两个互补的存在，而不是对立的存在！</p><ul><li><code>volatile</code> 关键字是线程同步的轻量级实现，所以 <code>volatile</code>性能肯定比<code>synchronized</code>关键字要好 。但是 <code>volatile</code> 关键字只能用于变量而 <code>synchronized</code> 关键字可以修饰方法以及代码块 。</li><li><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性。<code>synchronized</code> 关键字两者都能保证。</li><li><code>volatile</code>关键字主要用于解决变量在多个线程之间的可见性，而 <code>synchronized</code> 关键字解决的是多个线程之间访问资源的同步性</li></ul><h2 id="reentrantlock" tabindex="-1"><a class="header-anchor" href="#reentrantlock"><span>ReentrantLock</span></a></h2><p><code>ReentrantLock</code> 是 Java 中 <code>java.util.concurrent.locks</code> 包下的一个<strong>可重入独占锁</strong>，它提供了比 <code>synchronized</code> 更加灵活和强大的线程同步机制。</p><p>首先，<code>ReentrantLock</code> 和 <code>synchronized</code> 的核心功能类似，都是用来实现<strong>线程间的互斥访问</strong>，但它提供了更多高级特性，包括：</p><ol><li><strong>可重入性</strong>：同一个线程可以重复获取同一把锁，不会死锁。</li><li><strong>可中断锁获取</strong>：可以调用 <code>lockInterruptibly()</code> 来实现响应中断，避免死等。</li><li><strong>限时尝试加锁</strong>：通过 <code>tryLock()</code> 设置超时时间，控制等待时间。</li><li><strong>公平锁与非公平锁</strong>：构造函数可以传入 <code>true</code> 创建公平锁，先来先得，默认是非公平锁，性能更好。</li><li><strong>结合 Condition 使用</strong>：可以创建多个条件队列（<code>newCondition()</code>），实现类似 <code>Object.wait/notify</code> 的机制，但更灵活。</li></ol><p>从底层实现来看，<code>ReentrantLock</code> 基于 <strong>AQS（AbstractQueuedSynchronizer）</strong>，通过一个<strong>FIFO 等待队列</strong>管理线程的排队和唤醒，内部依赖 <strong>CAS + 自旋 + 阻塞机制</strong> 实现高效的线程调度。</p><p>相比 <code>synchronized</code>，<code>ReentrantLock</code> 更适合高并发或复杂线程控制场景，例如需要超时控制、公平策略或多个条件队列的情况。但要注意，它<strong>必须手动释放锁</strong>，一般建议用 <code>try-finally</code> 块包裹，防止死锁。</p><h3 id="和synchronized有什么区别" tabindex="-1"><a class="header-anchor" href="#和synchronized有什么区别"><span>和synchronized有什么区别</span></a></h3><p>在 Java 中，<code>synchronized</code> 和 <code>ReentrantLock</code> 都是用来实现线程同步的工具，但它们在实现机制、功能特性以及使用灵活性上有明显的区别。</p><p>首先，从实现层面来说，<code>synchronized</code> 是 Java 的一个关键字，由 JVM 层面直接支持。它的加锁和释放锁操作是由编译器和虚拟机自动控制的，使用起来比较简单。我们只需要加在方法或者代码块上，就能实现互斥访问。而 <code>ReentrantLock</code> 是一个显示锁，属于 <code>java.util.concurrent.locks</code> 包，它是基于 AQS（AbstractQueuedSynchronizer）框架实现的，锁的获取和释放都需要我们手动操作。</p><p>其次，在功能方面，<code>ReentrantLock</code> 提供了比 <code>synchronized</code> 更丰富的控制能力。例如，它支持<strong>可中断锁获取</strong>，也就是说线程在等待锁的过程中可以响应中断；还支持<strong>限时尝试加锁</strong>，通过 <code>tryLock()</code> 方法可以设置超时时间，这在一些高并发场景中非常有用。此外，它还支持<strong>公平锁机制</strong>，我们可以通过构造函数指定锁是公平的还是非公平的。而 <code>synchronized</code> 是非公平的，线程获取锁的顺序无法控制。</p><p>再者，在等待通知机制上，<code>ReentrantLock</code> 提供了一个 <code>Condition</code> 类，可以创建多个条件变量，用于更细粒度的线程控制。而 <code>synchronized</code> 只能依赖对象的 <code>wait()</code> 和 <code>notify()</code> 方法，且每个对象只能有一个条件队列，控制能力比较弱。</p><p>最后，从性能角度看，早期的 <code>synchronized</code> 性能较差，但自从 JDK 1.6 引入了偏向锁、轻量级锁等优化后，它的性能已经大幅提升。在低竞争或短时间加锁的场景下，<code>synchronized</code> 的性能和 <code>ReentrantLock</code> 是相当的。而在复杂并发场景中，<code>ReentrantLock</code> 通常更有优势，因为它支持非阻塞的锁获取方式，可以减少线程切换和上下文开销。</p><p>总结来说，<code>synchronized</code> 更适合结构简单、对性能要求不高的场景，使用方便、易于维护；而 <code>ReentrantLock</code> 则适用于并发更复杂、需要更强控制力的场合，比如可中断、限时、公平锁或多个等待条件等需求。</p><h2 id="reentrantreadwritelock" tabindex="-1"><a class="header-anchor" href="#reentrantreadwritelock"><span>ReentrantReadWriteLock</span></a></h2><p><code>ReentrantReadWriteLock</code> 是 Java 并发包中提供的一种<strong>读写分离锁</strong>，它实现了 <code>ReadWriteLock</code> 接口，内部包含一把<strong>读锁（共享锁）和一把写锁（独占锁）</strong>，用于提升多线程读操作时的并发性能。</p><p>它的核心思想是：<strong>读操作可以并发执行，写操作必须独占</strong>。也就是说，多个线程可以同时获取读锁，只要没有线程持有写锁；而写锁一旦被持有，其他线程无论是读还是写，都会被阻塞。</p><p>举个简单的例子，如果系统中读远远多于写，比如缓存读取场景，就可以使用 <code>ReentrantReadWriteLock</code> 来让多个线程并发读，提高吞吐量；而当写操作发生时，它会自动阻塞其他读写线程，直到写操作完成。</p><p>这个锁的<strong>特点</strong>包括：</p><ol><li><strong>可重入性</strong>：读锁和写锁都支持可重入。写线程可以再次获取写锁，也可以在持有写锁的情况下获取读锁（锁降级）；但读锁不能升级为写锁，避免死锁。</li><li><strong>支持公平和非公平模式</strong>：默认是非公平锁，也可以通过构造函数创建公平锁，保证线程获取锁的顺序。</li><li><strong>锁降级支持</strong>：写锁可以降级为读锁，即线程在持有写锁的同时获取读锁，再释放写锁，这对缓存更新等场景非常有用。</li><li><strong>基于 AQS 实现</strong>：它内部使用两个 <code>Sync</code> 子类分别管理读和写的状态，读锁是共享模式，写锁是独占模式。</li></ol><blockquote><p><strong>读锁和写锁</strong></p><p>在线程持有读锁的情况下，该线程不能取得写锁(因为获取写锁的时候，如果发现当前的读锁被占用，就马上获取失败，不管读锁是不是被当前线程持有)。</p><p>在线程持有写锁的情况下，该线程可以继续获取读锁（获取读锁时如果发现写锁被占用，只有写锁没有被当前线程占用的情况才会获取失败）。</p><p>写锁可以降级为读锁，但是读锁却不能升级为写锁。这是因为读锁升级为写锁会引起线程的争夺，毕竟写锁属于是独占锁，这样的话，会影响性能。</p><p>另外，还可能会有死锁问题发生。举个例子：假设两个线程的读锁都想升级写锁，则需要对方都释放自己锁，而双方都不释放，就会产生死锁。</p></blockquote><h2 id="stampedlock" tabindex="-1"><a class="header-anchor" href="#stampedlock"><span>StampedLock</span></a></h2><p>不重要</p><p><code>StampedLock</code> 是 Java 8 中引入的一种新的锁机制。它是为了解决传统读写锁在高并发读场景下性能不够理想的问题，提供了<strong>更高吞吐量的读写控制机制</strong>。</p><p>和 <code>ReentrantReadWriteLock</code> 类似，<code>StampedLock</code> 也提供<strong>读锁、写锁</strong>，但它的核心机制不同：<strong>每次加锁都会返回一个 stamp（戳），这个戳是一个 long 值，用于后续解锁或验证操作</strong>。</p><h3 id="三种模式" tabindex="-1"><a class="header-anchor" href="#三种模式"><span>三种模式：</span></a></h3><ol><li><strong>写锁（write lock）</strong>：是独占的，获取方式是 <code>lockWrite()</code>，释放用 <code>unlockWrite(stamp)</code>，类似于传统的写锁。</li><li><strong>悲观读锁（read lock）</strong>：是共享的，通过 <code>lockRead()</code> 获取，适用于读操作频繁、对数据一致性要求高的场景。</li><li><strong>乐观读锁（optimistic read）</strong>：最大的特点。使用 <code>tryOptimisticRead()</code> 获取一个 stamp，不加锁，读取后用 <code>validate(stamp)</code> 检查期间数据是否被写线程修改。如果验证通过，说明读取的数据有效；否则需要回退到悲观读锁重新读取。</li></ol><p>这种<strong>乐观读</strong>机制非常适合<strong>读多写少</strong>的高并发环境，能极大减少读写冲突，提高系统并发性。</p><h3 id="与-reentrantreadwritelock-的区别" tabindex="-1"><a class="header-anchor" href="#与-reentrantreadwritelock-的区别"><span>与 ReentrantReadWriteLock 的区别：</span></a></h3><ul><li><code>StampedLock</code> 支持<strong>乐观读</strong>，能在无锁条件下完成读取，提高性能；</li><li><code>StampedLock</code> <strong>不可重入</strong>，即线程不能重复获取相同类型的锁；</li><li>解锁必须依赖加锁返回的 <code>stamp</code> 值，<strong>不支持 <code>Condition</code> 条件变量</strong>；</li><li><strong>使用更复杂</strong>，需要手动控制 <code>stamp</code> 的获取与验证，但灵活性和性能更高。</li></ul><h2 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal"><span>ThreadLocal</span></a></h2><p><code>ThreadLocal</code> 是 Java 提供的一种线程本地变量工具，它的作用是<strong>为每个线程提供一份独立的变量副本</strong>，从而避免多线程访问共享变量时产生的线程安全问题。</p><p>简单来说，通过 <code>ThreadLocal</code>，每个线程访问的变量都是它自己私有的，互不干扰。它非常适合用于<strong>线程范围内共享但线程之间隔离的场景</strong>，比如用户会话信息、数据库连接、事务管理等。</p><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理"><span>实现原理</span></a></h3><p>它的底层原理并不是把数据放在 <code>ThreadLocal</code> 对象里，而是将数据<strong>存储在线程内部</strong>。具体来说，每个线程内部都有一个专门的结构，叫做 <code>ThreadLocalMap</code>，这是一个专门用于存储当前线程的本地变量副本的特殊哈希表。这个表的键是 <code>ThreadLocal</code> 实例本身，值就是线程自己对应的数据。</p><p>当我们调用 <code>ThreadLocal.set()</code> 方法时，其实就是把数据存进了当前线程自己的那张表里；而调用 <code>get()</code> 方法时，系统就会从这张表中查找与当前 <code>ThreadLocal</code> 实例对应的值。也就是说，虽然所有线程共享同一个 <code>ThreadLocal</code> 对象，但它们访问的是自己线程内部的数据，因此互不影响。</p><p>这个设计的最大特点是<strong>隔离性</strong>：每个线程只访问自己的变量副本，没有共享，不需要加锁，从根本上避免了线程安全问题。</p><p>不过，<code>ThreadLocalMap</code> 有一个值得注意的点：它的键是一个弱引用，也就是说，如果某个 <code>ThreadLocal</code> 对象没有被外部强引用持有，那么它的键会被垃圾回收，而它对应的值还会残留在线程内部，导致内存泄漏。这个问题在使用线程池时尤其明显，因为线程会被复用，如果变量没被清理，可能影响后续线程的执行。因此在使用 <code>ThreadLocal</code> 后，建议手动调用 <code>remove()</code> 方法，及时清理变量。</p><p>此外，Java 还提供了 <code>InheritableThreadLocal</code>，它允许子线程继承父线程的变量副本，适合用于线程间传递一些上下文信息，比如用户身份、请求 ID 等。</p><h3 id="内存泄漏" tabindex="-1"><a class="header-anchor" href="#内存泄漏"><span>内存泄漏</span></a></h3><p><code>ThreadLocal</code> 可能导致<strong>内存泄露</strong>，主要是因为它底层使用的 <code>ThreadLocalMap</code> 中，<strong>key 是弱引用，value 是强引用</strong>，而且这个 map 是保存在线程对象内部的。</p><p>具体来说，当我们创建一个 <code>ThreadLocal</code> 变量并使用后，如果外部代码没有强引用再指向这个变量，那么 JVM 会在下一次垃圾回收时<strong>回收掉这个弱引用的 key</strong>，但是由于 <code>ThreadLocalMap</code> 中的 value 是强引用，它不会被自动回收，就会变成一个“key 为 null，value 还存在”的残留对象。</p><p>更关键的是：这个 <code>ThreadLocalMap</code> 是存在线程对象里的，而<strong>线程对象本身不会被回收，尤其在线程池中会被长时间复用</strong>，这就导致那些 key 为 null 的 value 长期留在内存里，形成内存泄露。</p><p><strong>正确做法：</strong></p><p>在使用 <code>ThreadLocal</code> 时，务必在使用完毕后手动调用 <code>remove()</code> 方法，清除当前线程中的变量，释放引用，防止内存泄漏。</p><h3 id="跨线程传递threadlocal-的值" tabindex="-1"><a class="header-anchor" href="#跨线程传递threadlocal-的值"><span>跨线程传递ThreadLocal 的值</span></a></h3><p>普通 <code>ThreadLocal</code> 无法跨线程传递。因为它是为线程隔离设计的，每个线程内部维护自己独立的变量副本，默认线程之间是互不可见的。</p><p>在实际开发中，我们有时候确实需要把某些线程上下文信息，比如用户身份、请求 ID、事务信息等，从一个线程<strong>传递给另一个线程</strong>。这就涉及了 **“ThreadLocal 跨线程传递”**的问题。</p><hr><p><strong>1. InheritableThreadLocal：用于父子线程传递</strong></p><p>Java 标准库提供了一个子类叫 <code>InheritableThreadLocal</code>，它的作用是在<strong>子线程创建时</strong>，把父线程中对应的 ThreadLocal 值<strong>复制一份</strong>到子线程里。</p><p>原理是在 <code>Thread</code> 类中，创建子线程时会检查父线程是否有 <code>inheritableThreadLocals</code>，如果有，就将其内容拷贝到子线程。</p><p>这个机制可以实现在子线程中读取父线程设置的变量值，但也有两个局限：</p><ul><li><strong>只在创建子线程那一刻生效</strong>，后续父线程对变量的修改，子线程无法感知；</li><li><strong>在线程池中无效</strong>，因为线程池中的线程是复用的，不会重新触发拷贝操作。</li></ul><hr><p><strong>2. TransmittableThreadLocal：解决线程池场景下的变量传递</strong></p><p>为了支持在线程池中也能传递上下文变量，阿里开源了一个增强版工具类叫 <strong><code>TransmittableThreadLocal</code>（TTL）</strong>。</p><p>TTL 的核心原理是：在任务提交给线程池时，它会把当前线程中的所有 TTL 变量<strong>复制到任务中</strong>，再由框架在任务执行前注入到目标线程，执行完后再恢复现场。通过这种<strong>包装 Runnable 或 Callable 的方式</strong>，实现了跨线程、跨线程池上下文的“显式传递”。</p><p>简单来说，TTL 是通过 <strong>任务封装 + ThreadLocalMap 拷贝 + 执行前注入 + 执行后清理</strong> 实现变量在异步线程之间的“可控传播”。</p><p>这解决了 <code>InheritableThreadLocal</code> 在线程池中无效的问题，是在日志链路追踪、分布式调用等场景下非常实用的方案。</p><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h1><h2 id="future" tabindex="-1"><a class="header-anchor" href="#future"><span>Future</span></a></h2><p><code>Future</code> 是 Java 5 引入的一个接口，用于表示一个异步计算的结果。它通常与 <code>ExecutorService</code> 搭配使用，用来提交任务并获取结果。调用 <code>submit()</code> 方法后，主线程可以继续执行其他操作，稍后通过 <code>Future</code> 获取任务的执行结果。</p><p><code>Future</code> 的核心方法包括：</p><ul><li><code>get()</code>：阻塞当前线程，直到任务执行完毕并返回结果；</li><li><code>get(long, TimeUnit)</code>：指定最大等待时间，防止无限阻塞；</li><li><code>isDone()</code>：判断任务是否已经完成；</li><li><code>isCancelled()</code> 和 <code>cancel()</code>：用于任务的取消控制。</li></ul><p>虽然 <code>Future</code> 支持异步获取结果，但它本身是<strong>阻塞式的</strong>。也就是说，如果你调用 <code>get()</code> 方法，主线程仍然会被阻塞直到结果返回，因此并不是真正意义上的“非阻塞异步”。</p><p>此外，<code>Future</code> 不支持任务之间的组合、链式调用，也不具备异常回调等机制，编程模型较为原始。在复杂并发场景下，使用起来相对繁琐，缺乏灵活性。</p><p>正因为这些局限，Java 8 后引入了更强大的 <code>CompletableFuture</code>，它是对 <code>Future</code> 的增强，解决了结果阻塞、组合困难、缺乏回调等问题。</p><h2 id="completablefuture" tabindex="-1"><a class="header-anchor" href="#completablefuture"><span>CompletableFuture</span></a></h2><p><code>CompletableFuture</code> 是 Java 8 引入的一个强大的异步编程工具，用于表示一个可能在未来某个时间点完成的计算结果。它不仅可以实现类似 <code>Future</code> 的异步任务提交与获取，还大大增强了任务之间的组合、异常处理、以及非阻塞回调等能力。</p><p>与传统的 <code>Future</code> 相比，<code>CompletableFuture</code> 最大的优势有三点：</p><p>第一，它支持任务之间的链式组合，比如可以在任务执行完成后自动触发下一个任务（如 <code>thenApply</code>、<code>thenAccept</code>、<code>thenCompose</code>），从而实现流式异步逻辑，而不需要手动阻塞或轮询。</p><p>第二，它提供了丰富的并发编排方法。可以通过 <code>thenCombine</code>、<code>allOf</code>、<code>anyOf</code> 等方法将多个异步任务组合起来，控制它们的并发执行和聚合结果，非常适合构建复杂的异步流程。</p><p>第三，它支持异常处理和任务回退机制，比如 <code>exceptionally</code>、<code>handle</code>、<code>whenComplete</code> 等，可以在任务失败时优雅地处理异常，避免主流程崩溃。</p><p>此外，<code>CompletableFuture</code> 还支持异步任务的执行线程控制。默认会使用公共线程池（ForkJoinPool），也可以通过 <code>supplyAsync</code> 或 <code>runAsync</code> 指定自定义线程池，便于在不同业务中做资源隔离。</p><p>总的来说，<code>CompletableFuture</code> 让 Java 的异步编程变得更加灵活、优雅、非阻塞，并且非常适合在高并发、响应式、微服务等场景中使用。</p><h3 id="一个任务需要依赖另外两个任务执行完之后再执行-怎么设计" tabindex="-1"><a class="header-anchor" href="#一个任务需要依赖另外两个任务执行完之后再执行-怎么设计"><span><a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html#%E2%AD%90%EF%B8%8F%E4%B8%80%E4%B8%AA%E4%BB%BB%E5%8A%A1%E9%9C%80%E8%A6%81%E4%BE%9D%E8%B5%96%E5%8F%A6%E5%A4%96%E4%B8%A4%E4%B8%AA%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%AE%8C%E4%B9%8B%E5%90%8E%E5%86%8D%E6%89%A7%E8%A1%8C-%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener noreferrer">一个任务需要依赖另外两个任务执行完之后再执行，怎么设计？</a></span></a></h3><h3 id="使用-completablefuture-有一个任务失败-如何处理异常" tabindex="-1"><a class="header-anchor" href="#使用-completablefuture-有一个任务失败-如何处理异常"><span><a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html#%E2%AD%90%EF%B8%8F%E4%BD%BF%E7%94%A8-completablefuture-%E6%9C%89%E4%B8%80%E4%B8%AA%E4%BB%BB%E5%8A%A1%E5%A4%B1%E8%B4%A5-%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8" target="_blank" rel="noopener noreferrer">使用 CompletableFuture，有一个任务失败，如何处理异常？</a></span></a></h3><h3 id="在使用-completablefuture-的时候为什么要自定义线程池" tabindex="-1"><a class="header-anchor" href="#在使用-completablefuture-的时候为什么要自定义线程池"><span><a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html#%E2%AD%90%EF%B8%8F%E5%9C%A8%E4%BD%BF%E7%94%A8-completablefuture-%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0" target="_blank" rel="noopener noreferrer">在使用 CompletableFuture 的时候为什么要自定义线程池？</a></span></a></h3><h2 id="aqs" tabindex="-1"><a class="header-anchor" href="#aqs"><span>AQS</span></a></h2><p>AQS，全称是 <strong>AbstractQueuedSynchronizer</strong>，是 Java 并发包 <code>java.util.concurrent.locks</code> 下的一个抽象类。它是构建<strong>锁和同步器的核心基础框架</strong>，底层支撑了 ReentrantLock、Semaphore、CountDownLatch、ReadWriteLock 等多种并发工具。</p><p>AQS 的核心思想是：<strong>将同步状态的管理与线程排队逻辑分离</strong>，并通过一个 <strong>FIFO 双向队列</strong>来管理获取锁失败的线程。</p><p>它内部维护了一个 <code>int</code> 类型的变量，叫做<strong>同步状态（state）</strong>，用于表示资源的占用情况。比如：独占锁会将 state 为 0 表示未被占用，1 表示占用；共享锁可能用大于 0 的值来表示剩余许可。</p><p>线程在尝试获取锁时，如果资源可用，AQS 会通过 <code>CAS</code> 操作尝试修改 state 值；如果失败，则会将当前线程封装成一个节点加入<strong>等待队列（CLH 队列）</strong>，然后阻塞挂起。</p><p>一旦资源释放，AQS 会从队列中唤醒下一个等待线程，重新尝试获取锁，从而实现公平或非公平的线程调度。</p><p>AQS 提供了两种模式：<strong>独占模式（Exclusive）</strong> 和 <strong>共享模式（Shared）</strong>。独占模式下，同一时刻只能有一个线程持有资源，比如 ReentrantLock；共享模式下，允许多个线程共享资源，比如 Semaphore 和 ReadWriteLock 的读锁。</p><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>AQS 的核心原理可以总结为三点：<strong>同步状态管理、CLH 队列维护、线程阻塞与唤醒机制</strong>。</p><p>首先，AQS 通过一个 <code>volatile int state</code> 变量来表示共享资源的状态。线程要想获取锁，必须先尝试修改这个 state。修改通常是通过 <strong>CAS（Compare-And-Swap）原子操作</strong>完成的，确保在并发场景下能安全地竞争资源。</p><p>如果线程获取 state 成功，就说明资源可用，它可以继续执行；如果失败，说明资源当前不可用，线程就会被封装成一个 <code>Node</code> 节点，加入到 AQS 内部维护的一个 <strong>双向 FIFO 队列</strong>中，这个队列本质上是一个变种的 CLH 队列（即链式等待队列）。</p><p>排队的线程并不会自旋消耗 CPU，而是通过调用 <code>LockSupport.park()</code> 方法被<strong>挂起阻塞</strong>，直到前驱节点释放资源并显式调用 <code>unpark()</code> 唤醒它。</p><p>当锁释放时，线程会调用 <code>release()</code> 方法，AQS 会将 state 设置为可用状态，并从等待队列中唤醒下一个节点所代表的线程。唤醒后，它再重新尝试获取锁，直到成功为止。</p><p>AQS 支持两种资源获取模式：</p><ul><li><strong>独占模式（Exclusive）</strong>：同一时刻只有一个线程能获取资源，典型代表是 <code>ReentrantLock</code>。</li><li><strong>共享模式（Shared）</strong>：多个线程可以同时获取资源，如 <code>Semaphore</code> 和读写锁中的读锁。</li></ul><p>这两种模式下，AQS 会调用不同的模板方法来处理，比如 <code>tryAcquire</code>/<code>tryRelease</code> 用于独占模式，<code>tryAcquireShared</code>/<code>tryReleaseShared</code> 用于共享模式。开发者只需要继承 AQS，并实现这些关键方法，就能构建出各种自定义同步工具。</p><p>总结一下，AQS 的原理是： 通过一个原子变量控制同步状态，失败则排队等待；队列基于 CLH 实现，线程通过 park 阻塞、unpark 唤醒；并提供独占与共享两种访问控制模式，支撑了大多数 JUC 锁与同步器的实现。</p><h3 id="aqs-1" tabindex="-1"><a class="header-anchor" href="#aqs-1"><span><a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html#aqs" target="_blank" rel="noopener noreferrer">AQS</a></span></a></h3><h2 id="线程池最佳实践" tabindex="-1"><a class="header-anchor" href="#线程池最佳实践"><span><a href="https://javaguide.cn/java/concurrent/java-thread-pool-best-practices.html" target="_blank" rel="noopener noreferrer">线程池最佳实践</a></span></a></h2><h2 id="常见并发容器总结" tabindex="-1"><a class="header-anchor" href="#常见并发容器总结"><span><a href="https://javaguide.cn/java/concurrent/java-concurrent-collections.html" target="_blank" rel="noopener noreferrer">常见并发容器总结</a></span></a></h2><h2 id="atomic-原子类" tabindex="-1"><a class="header-anchor" href="#atomic-原子类"><span>Atomic 原子类</span></a></h2><p><a href="https://javaguide.cn/java/concurrent/atomic-classes.html" target="_blank" rel="noopener noreferrer">Atomic 原子类总结 | JavaGuide</a></p><h2 id="虚拟线程" tabindex="-1"><a class="header-anchor" href="#虚拟线程"><span>虚拟线程</span></a></h2><p><a href="https://javaguide.cn/java/concurrent/virtual-thread.html" target="_blank" rel="noopener noreferrer">虚拟线程常见问题总结 | JavaGuide</a></p>`,332)]))}const l=o(t,[["render",c]]),i=JSON.parse('{"path":"/1.Note/1.Java%20_%20CS/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B.html","title":"Java多线程","lang":"en-US","frontmatter":{"title":"Java多线程","order":4},"git":{"createdTime":1752991351000,"updatedTime":1752991351000,"contributors":[{"name":"Nu11Cat","username":"Nu11Cat","email":"2111867383@qq.com","commits":1,"url":"https://github.com/Nu11Cat"}]},"readingTime":{"minutes":56.25,"words":16874},"filePathRelative":"1.Note/1.Java & CS/Java多线程.md"}');export{l as comp,i as data};
